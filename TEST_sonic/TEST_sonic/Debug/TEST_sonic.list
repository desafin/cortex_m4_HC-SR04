
TEST_sonic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ed8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08006088  08006088  00016088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006150  08006150  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006150  08006150  00016150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006158  08006158  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006158  08006158  00016158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800615c  0800615c  0001615c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006160  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          0000080c  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000087c  2000087c  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014681  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000244f  00000000  00000000  00034721  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001158  00000000  00000000  00036b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001080  00000000  00000000  00037cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025b3c  00000000  00000000  00038d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000126d8  00000000  00000000  0005e884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e40e4  00000000  00000000  00070f5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00155040  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005410  00000000  00000000  00155090  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006070 	.word	0x08006070

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08006070 	.word	0x08006070

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2uiz>:
 8000a2c:	004a      	lsls	r2, r1, #1
 8000a2e:	d211      	bcs.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d211      	bcs.n	8000a5a <__aeabi_d2uiz+0x2e>
 8000a36:	d50d      	bpl.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d40e      	bmi.n	8000a60 <__aeabi_d2uiz+0x34>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_d2uiz+0x3a>
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a80:	f000 b974 	b.w	8000d6c <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9d08      	ldr	r5, [sp, #32]
 8000aa2:	4604      	mov	r4, r0
 8000aa4:	468e      	mov	lr, r1
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d14d      	bne.n	8000b46 <__udivmoddi4+0xaa>
 8000aaa:	428a      	cmp	r2, r1
 8000aac:	4694      	mov	ip, r2
 8000aae:	d969      	bls.n	8000b84 <__udivmoddi4+0xe8>
 8000ab0:	fab2 f282 	clz	r2, r2
 8000ab4:	b152      	cbz	r2, 8000acc <__udivmoddi4+0x30>
 8000ab6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aba:	f1c2 0120 	rsb	r1, r2, #32
 8000abe:	fa20 f101 	lsr.w	r1, r0, r1
 8000ac2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ac6:	ea41 0e03 	orr.w	lr, r1, r3
 8000aca:	4094      	lsls	r4, r2
 8000acc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ad0:	0c21      	lsrs	r1, r4, #16
 8000ad2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ad6:	fa1f f78c 	uxth.w	r7, ip
 8000ada:	fb08 e316 	mls	r3, r8, r6, lr
 8000ade:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ae2:	fb06 f107 	mul.w	r1, r6, r7
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	d90a      	bls.n	8000b00 <__udivmoddi4+0x64>
 8000aea:	eb1c 0303 	adds.w	r3, ip, r3
 8000aee:	f106 30ff 	add.w	r0, r6, #4294967295
 8000af2:	f080 811f 	bcs.w	8000d34 <__udivmoddi4+0x298>
 8000af6:	4299      	cmp	r1, r3
 8000af8:	f240 811c 	bls.w	8000d34 <__udivmoddi4+0x298>
 8000afc:	3e02      	subs	r6, #2
 8000afe:	4463      	add	r3, ip
 8000b00:	1a5b      	subs	r3, r3, r1
 8000b02:	b2a4      	uxth	r4, r4
 8000b04:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b08:	fb08 3310 	mls	r3, r8, r0, r3
 8000b0c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b10:	fb00 f707 	mul.w	r7, r0, r7
 8000b14:	42a7      	cmp	r7, r4
 8000b16:	d90a      	bls.n	8000b2e <__udivmoddi4+0x92>
 8000b18:	eb1c 0404 	adds.w	r4, ip, r4
 8000b1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b20:	f080 810a 	bcs.w	8000d38 <__udivmoddi4+0x29c>
 8000b24:	42a7      	cmp	r7, r4
 8000b26:	f240 8107 	bls.w	8000d38 <__udivmoddi4+0x29c>
 8000b2a:	4464      	add	r4, ip
 8000b2c:	3802      	subs	r0, #2
 8000b2e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b32:	1be4      	subs	r4, r4, r7
 8000b34:	2600      	movs	r6, #0
 8000b36:	b11d      	cbz	r5, 8000b40 <__udivmoddi4+0xa4>
 8000b38:	40d4      	lsrs	r4, r2
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b40:	4631      	mov	r1, r6
 8000b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b46:	428b      	cmp	r3, r1
 8000b48:	d909      	bls.n	8000b5e <__udivmoddi4+0xc2>
 8000b4a:	2d00      	cmp	r5, #0
 8000b4c:	f000 80ef 	beq.w	8000d2e <__udivmoddi4+0x292>
 8000b50:	2600      	movs	r6, #0
 8000b52:	e9c5 0100 	strd	r0, r1, [r5]
 8000b56:	4630      	mov	r0, r6
 8000b58:	4631      	mov	r1, r6
 8000b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5e:	fab3 f683 	clz	r6, r3
 8000b62:	2e00      	cmp	r6, #0
 8000b64:	d14a      	bne.n	8000bfc <__udivmoddi4+0x160>
 8000b66:	428b      	cmp	r3, r1
 8000b68:	d302      	bcc.n	8000b70 <__udivmoddi4+0xd4>
 8000b6a:	4282      	cmp	r2, r0
 8000b6c:	f200 80f9 	bhi.w	8000d62 <__udivmoddi4+0x2c6>
 8000b70:	1a84      	subs	r4, r0, r2
 8000b72:	eb61 0303 	sbc.w	r3, r1, r3
 8000b76:	2001      	movs	r0, #1
 8000b78:	469e      	mov	lr, r3
 8000b7a:	2d00      	cmp	r5, #0
 8000b7c:	d0e0      	beq.n	8000b40 <__udivmoddi4+0xa4>
 8000b7e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b82:	e7dd      	b.n	8000b40 <__udivmoddi4+0xa4>
 8000b84:	b902      	cbnz	r2, 8000b88 <__udivmoddi4+0xec>
 8000b86:	deff      	udf	#255	; 0xff
 8000b88:	fab2 f282 	clz	r2, r2
 8000b8c:	2a00      	cmp	r2, #0
 8000b8e:	f040 8092 	bne.w	8000cb6 <__udivmoddi4+0x21a>
 8000b92:	eba1 010c 	sub.w	r1, r1, ip
 8000b96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b9a:	fa1f fe8c 	uxth.w	lr, ip
 8000b9e:	2601      	movs	r6, #1
 8000ba0:	0c20      	lsrs	r0, r4, #16
 8000ba2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ba6:	fb07 1113 	mls	r1, r7, r3, r1
 8000baa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bae:	fb0e f003 	mul.w	r0, lr, r3
 8000bb2:	4288      	cmp	r0, r1
 8000bb4:	d908      	bls.n	8000bc8 <__udivmoddi4+0x12c>
 8000bb6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bba:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bbe:	d202      	bcs.n	8000bc6 <__udivmoddi4+0x12a>
 8000bc0:	4288      	cmp	r0, r1
 8000bc2:	f200 80cb 	bhi.w	8000d5c <__udivmoddi4+0x2c0>
 8000bc6:	4643      	mov	r3, r8
 8000bc8:	1a09      	subs	r1, r1, r0
 8000bca:	b2a4      	uxth	r4, r4
 8000bcc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bd0:	fb07 1110 	mls	r1, r7, r0, r1
 8000bd4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bd8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bdc:	45a6      	cmp	lr, r4
 8000bde:	d908      	bls.n	8000bf2 <__udivmoddi4+0x156>
 8000be0:	eb1c 0404 	adds.w	r4, ip, r4
 8000be4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000be8:	d202      	bcs.n	8000bf0 <__udivmoddi4+0x154>
 8000bea:	45a6      	cmp	lr, r4
 8000bec:	f200 80bb 	bhi.w	8000d66 <__udivmoddi4+0x2ca>
 8000bf0:	4608      	mov	r0, r1
 8000bf2:	eba4 040e 	sub.w	r4, r4, lr
 8000bf6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bfa:	e79c      	b.n	8000b36 <__udivmoddi4+0x9a>
 8000bfc:	f1c6 0720 	rsb	r7, r6, #32
 8000c00:	40b3      	lsls	r3, r6
 8000c02:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c06:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c0a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c0e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c12:	431c      	orrs	r4, r3
 8000c14:	40f9      	lsrs	r1, r7
 8000c16:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c1a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c1e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c22:	0c20      	lsrs	r0, r4, #16
 8000c24:	fa1f fe8c 	uxth.w	lr, ip
 8000c28:	fb09 1118 	mls	r1, r9, r8, r1
 8000c2c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c30:	fb08 f00e 	mul.w	r0, r8, lr
 8000c34:	4288      	cmp	r0, r1
 8000c36:	fa02 f206 	lsl.w	r2, r2, r6
 8000c3a:	d90b      	bls.n	8000c54 <__udivmoddi4+0x1b8>
 8000c3c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c40:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c44:	f080 8088 	bcs.w	8000d58 <__udivmoddi4+0x2bc>
 8000c48:	4288      	cmp	r0, r1
 8000c4a:	f240 8085 	bls.w	8000d58 <__udivmoddi4+0x2bc>
 8000c4e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c52:	4461      	add	r1, ip
 8000c54:	1a09      	subs	r1, r1, r0
 8000c56:	b2a4      	uxth	r4, r4
 8000c58:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c5c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c60:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c64:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c68:	458e      	cmp	lr, r1
 8000c6a:	d908      	bls.n	8000c7e <__udivmoddi4+0x1e2>
 8000c6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c70:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c74:	d26c      	bcs.n	8000d50 <__udivmoddi4+0x2b4>
 8000c76:	458e      	cmp	lr, r1
 8000c78:	d96a      	bls.n	8000d50 <__udivmoddi4+0x2b4>
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	4461      	add	r1, ip
 8000c7e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c82:	fba0 9402 	umull	r9, r4, r0, r2
 8000c86:	eba1 010e 	sub.w	r1, r1, lr
 8000c8a:	42a1      	cmp	r1, r4
 8000c8c:	46c8      	mov	r8, r9
 8000c8e:	46a6      	mov	lr, r4
 8000c90:	d356      	bcc.n	8000d40 <__udivmoddi4+0x2a4>
 8000c92:	d053      	beq.n	8000d3c <__udivmoddi4+0x2a0>
 8000c94:	b15d      	cbz	r5, 8000cae <__udivmoddi4+0x212>
 8000c96:	ebb3 0208 	subs.w	r2, r3, r8
 8000c9a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c9e:	fa01 f707 	lsl.w	r7, r1, r7
 8000ca2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ca6:	40f1      	lsrs	r1, r6
 8000ca8:	431f      	orrs	r7, r3
 8000caa:	e9c5 7100 	strd	r7, r1, [r5]
 8000cae:	2600      	movs	r6, #0
 8000cb0:	4631      	mov	r1, r6
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	f1c2 0320 	rsb	r3, r2, #32
 8000cba:	40d8      	lsrs	r0, r3
 8000cbc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cc4:	4091      	lsls	r1, r2
 8000cc6:	4301      	orrs	r1, r0
 8000cc8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ccc:	fa1f fe8c 	uxth.w	lr, ip
 8000cd0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cd4:	fb07 3610 	mls	r6, r7, r0, r3
 8000cd8:	0c0b      	lsrs	r3, r1, #16
 8000cda:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cde:	fb00 f60e 	mul.w	r6, r0, lr
 8000ce2:	429e      	cmp	r6, r3
 8000ce4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x260>
 8000cea:	eb1c 0303 	adds.w	r3, ip, r3
 8000cee:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cf2:	d22f      	bcs.n	8000d54 <__udivmoddi4+0x2b8>
 8000cf4:	429e      	cmp	r6, r3
 8000cf6:	d92d      	bls.n	8000d54 <__udivmoddi4+0x2b8>
 8000cf8:	3802      	subs	r0, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	1b9b      	subs	r3, r3, r6
 8000cfe:	b289      	uxth	r1, r1
 8000d00:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d04:	fb07 3316 	mls	r3, r7, r6, r3
 8000d08:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d0c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d10:	428b      	cmp	r3, r1
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x28a>
 8000d14:	eb1c 0101 	adds.w	r1, ip, r1
 8000d18:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d1c:	d216      	bcs.n	8000d4c <__udivmoddi4+0x2b0>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d914      	bls.n	8000d4c <__udivmoddi4+0x2b0>
 8000d22:	3e02      	subs	r6, #2
 8000d24:	4461      	add	r1, ip
 8000d26:	1ac9      	subs	r1, r1, r3
 8000d28:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d2c:	e738      	b.n	8000ba0 <__udivmoddi4+0x104>
 8000d2e:	462e      	mov	r6, r5
 8000d30:	4628      	mov	r0, r5
 8000d32:	e705      	b.n	8000b40 <__udivmoddi4+0xa4>
 8000d34:	4606      	mov	r6, r0
 8000d36:	e6e3      	b.n	8000b00 <__udivmoddi4+0x64>
 8000d38:	4618      	mov	r0, r3
 8000d3a:	e6f8      	b.n	8000b2e <__udivmoddi4+0x92>
 8000d3c:	454b      	cmp	r3, r9
 8000d3e:	d2a9      	bcs.n	8000c94 <__udivmoddi4+0x1f8>
 8000d40:	ebb9 0802 	subs.w	r8, r9, r2
 8000d44:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d48:	3801      	subs	r0, #1
 8000d4a:	e7a3      	b.n	8000c94 <__udivmoddi4+0x1f8>
 8000d4c:	4646      	mov	r6, r8
 8000d4e:	e7ea      	b.n	8000d26 <__udivmoddi4+0x28a>
 8000d50:	4620      	mov	r0, r4
 8000d52:	e794      	b.n	8000c7e <__udivmoddi4+0x1e2>
 8000d54:	4640      	mov	r0, r8
 8000d56:	e7d1      	b.n	8000cfc <__udivmoddi4+0x260>
 8000d58:	46d0      	mov	r8, sl
 8000d5a:	e77b      	b.n	8000c54 <__udivmoddi4+0x1b8>
 8000d5c:	3b02      	subs	r3, #2
 8000d5e:	4461      	add	r1, ip
 8000d60:	e732      	b.n	8000bc8 <__udivmoddi4+0x12c>
 8000d62:	4630      	mov	r0, r6
 8000d64:	e709      	b.n	8000b7a <__udivmoddi4+0xde>
 8000d66:	4464      	add	r4, ip
 8000d68:	3802      	subs	r0, #2
 8000d6a:	e742      	b.n	8000bf2 <__udivmoddi4+0x156>

08000d6c <__aeabi_idiv0>:
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop

08000d70 <delay>:
static void MX_USART3_UART_Init(void);
static void MX_USB_OTG_FS_PCD_Init(void);
static void MX_TIM3_Init(void);
/* USER CODE BEGIN PFP */
void delay (uint16_t time)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8000d7a:	4b09      	ldr	r3, [pc, #36]	; (8000da0 <delay+0x30>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	2200      	movs	r2, #0
 8000d80:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER (&htim3) < time);
 8000d82:	bf00      	nop
 8000d84:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <delay+0x30>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d8a:	88fb      	ldrh	r3, [r7, #6]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	d3f9      	bcc.n	8000d84 <delay+0x14>
}
 8000d90:	bf00      	nop
 8000d92:	bf00      	nop
 8000d94:	370c      	adds	r7, #12
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	200002b4 	.word	0x200002b4
 8000da4:	00000000 	.word	0x00000000

08000da8 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	7f1b      	ldrb	r3, [r3, #28]
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	f040 8083 	bne.w	8000ec0 <HAL_TIM_IC_CaptureCallback+0x118>
	{
		if (Flag==0) // if the first value is not captured
 8000dba:	4b45      	ldr	r3, [pc, #276]	; (8000ed0 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d11a      	bne.n	8000df8 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	6878      	ldr	r0, [r7, #4]
 8000dc6:	f002 fed3 	bl	8003b70 <HAL_TIM_ReadCapturedValue>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	4a41      	ldr	r2, [pc, #260]	; (8000ed4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000dce:	6013      	str	r3, [r2, #0]
			Flag = 1;  // set the first captured as true
 8000dd0:	4b3f      	ldr	r3, [pc, #252]	; (8000ed0 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	6a1a      	ldr	r2, [r3, #32]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f022 020a 	bic.w	r2, r2, #10
 8000de4:	621a      	str	r2, [r3, #32]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	6a1a      	ldr	r2, [r3, #32]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f042 0202 	orr.w	r2, r2, #2
 8000df4:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC1);
		}
	}
}
 8000df6:	e063      	b.n	8000ec0 <HAL_TIM_IC_CaptureCallback+0x118>
		else if (Flag==1)   // if the first is already captured
 8000df8:	4b35      	ldr	r3, [pc, #212]	; (8000ed0 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d15f      	bne.n	8000ec0 <HAL_TIM_IC_CaptureCallback+0x118>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8000e00:	2100      	movs	r1, #0
 8000e02:	6878      	ldr	r0, [r7, #4]
 8000e04:	f002 feb4 	bl	8003b70 <HAL_TIM_ReadCapturedValue>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	4a33      	ldr	r2, [pc, #204]	; (8000ed8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000e0c:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	2200      	movs	r2, #0
 8000e14:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1)
 8000e16:	4b30      	ldr	r3, [pc, #192]	; (8000ed8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	4b2e      	ldr	r3, [pc, #184]	; (8000ed4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	429a      	cmp	r2, r3
 8000e20:	d907      	bls.n	8000e32 <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = IC_Val2-IC_Val1;
 8000e22:	4b2d      	ldr	r3, [pc, #180]	; (8000ed8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	4b2b      	ldr	r3, [pc, #172]	; (8000ed4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	1ad3      	subs	r3, r2, r3
 8000e2c:	4a2b      	ldr	r2, [pc, #172]	; (8000edc <HAL_TIM_IC_CaptureCallback+0x134>)
 8000e2e:	6013      	str	r3, [r2, #0]
 8000e30:	e00f      	b.n	8000e52 <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (IC_Val1 > IC_Val2)
 8000e32:	4b28      	ldr	r3, [pc, #160]	; (8000ed4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	4b28      	ldr	r3, [pc, #160]	; (8000ed8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	d909      	bls.n	8000e52 <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8000e3e:	4b26      	ldr	r3, [pc, #152]	; (8000ed8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	4b24      	ldr	r3, [pc, #144]	; (8000ed4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	1ad3      	subs	r3, r2, r3
 8000e48:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000e4c:	33ff      	adds	r3, #255	; 0xff
 8000e4e:	4a23      	ldr	r2, [pc, #140]	; (8000edc <HAL_TIM_IC_CaptureCallback+0x134>)
 8000e50:	6013      	str	r3, [r2, #0]
			Distance = Difference * .034/2;
 8000e52:	4b22      	ldr	r3, [pc, #136]	; (8000edc <HAL_TIM_IC_CaptureCallback+0x134>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4618      	mov	r0, r3
 8000e58:	f7ff fb5c 	bl	8000514 <__aeabi_ui2d>
 8000e5c:	a31a      	add	r3, pc, #104	; (adr r3, 8000ec8 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e62:	f7ff fbd1 	bl	8000608 <__aeabi_dmul>
 8000e66:	4602      	mov	r2, r0
 8000e68:	460b      	mov	r3, r1
 8000e6a:	4610      	mov	r0, r2
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	f04f 0200 	mov.w	r2, #0
 8000e72:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e76:	f7ff fcf1 	bl	800085c <__aeabi_ddiv>
 8000e7a:	4602      	mov	r2, r0
 8000e7c:	460b      	mov	r3, r1
 8000e7e:	4610      	mov	r0, r2
 8000e80:	4619      	mov	r1, r3
 8000e82:	f7ff fdd3 	bl	8000a2c <__aeabi_d2uiz>
 8000e86:	4603      	mov	r3, r0
 8000e88:	b2da      	uxtb	r2, r3
 8000e8a:	4b15      	ldr	r3, [pc, #84]	; (8000ee0 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000e8c:	701a      	strb	r2, [r3, #0]
			Flag = 0; // set it back to false
 8000e8e:	4b10      	ldr	r3, [pc, #64]	; (8000ed0 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	6a1a      	ldr	r2, [r3, #32]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f022 020a 	bic.w	r2, r2, #10
 8000ea2:	621a      	str	r2, [r3, #32]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	6a12      	ldr	r2, [r2, #32]
 8000eae:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC1);
 8000eb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	68da      	ldr	r2, [r3, #12]
 8000eb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ee4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f022 0202 	bic.w	r2, r2, #2
 8000ebe:	60da      	str	r2, [r3, #12]
}
 8000ec0:	bf00      	nop
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	b020c49c 	.word	0xb020c49c
 8000ecc:	3fa16872 	.word	0x3fa16872
 8000ed0:	20000858 	.word	0x20000858
 8000ed4:	2000084c 	.word	0x2000084c
 8000ed8:	20000850 	.word	0x20000850
 8000edc:	20000854 	.word	0x20000854
 8000ee0:	20000859 	.word	0x20000859
 8000ee4:	200002b4 	.word	0x200002b4

08000ee8 <HCSR04_Read>:

void HCSR04_Read (void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000eec:	2201      	movs	r2, #1
 8000eee:	2120      	movs	r1, #32
 8000ef0:	480a      	ldr	r0, [pc, #40]	; (8000f1c <HCSR04_Read+0x34>)
 8000ef2:	f001 fc33 	bl	800275c <HAL_GPIO_WritePin>
	delay(10);  // wait for 10 us
 8000ef6:	200a      	movs	r0, #10
 8000ef8:	f7ff ff3a 	bl	8000d70 <delay>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000efc:	2200      	movs	r2, #0
 8000efe:	2120      	movs	r1, #32
 8000f00:	4806      	ldr	r0, [pc, #24]	; (8000f1c <HCSR04_Read+0x34>)
 8000f02:	f001 fc2b 	bl	800275c <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_CC1);
 8000f06:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <HCSR04_Read+0x38>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	68da      	ldr	r2, [r3, #12]
 8000f0c:	4b04      	ldr	r3, [pc, #16]	; (8000f20 <HCSR04_Read+0x38>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f042 0202 	orr.w	r2, r2, #2
 8000f14:	60da      	str	r2, [r3, #12]
}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40020000 	.word	0x40020000
 8000f20:	200002b4 	.word	0x200002b4

08000f24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f28:	f000 fd9c 	bl	8001a64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f2c:	f000 f826 	bl	8000f7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f30:	f000 f9a4 	bl	800127c <MX_GPIO_Init>
  MX_ETH_Init();
 8000f34:	f000 f88c 	bl	8001050 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000f38:	f000 f948 	bl	80011cc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000f3c:	f000 f970 	bl	8001220 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 8000f40:	f000 f8d4 	bl	80010ec <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000f44:	2100      	movs	r1, #0
 8000f46:	4809      	ldr	r0, [pc, #36]	; (8000f6c <main+0x48>)
 8000f48:	f002 fa7e 	bl	8003448 <HAL_TIM_IC_Start_IT>
  printf("Open Project\r\n");
 8000f4c:	4808      	ldr	r0, [pc, #32]	; (8000f70 <main+0x4c>)
 8000f4e:	f004 f911 	bl	8005174 <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HCSR04_Read();
 8000f52:	f7ff ffc9 	bl	8000ee8 <HCSR04_Read>
	  	  printf("%d cm\r\n",Distance);
 8000f56:	4b07      	ldr	r3, [pc, #28]	; (8000f74 <main+0x50>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4806      	ldr	r0, [pc, #24]	; (8000f78 <main+0x54>)
 8000f5e:	f004 f883 	bl	8005068 <iprintf>
	  	  HAL_Delay(200);
 8000f62:	20c8      	movs	r0, #200	; 0xc8
 8000f64:	f000 fdf0 	bl	8001b48 <HAL_Delay>
	  HCSR04_Read();
 8000f68:	e7f3      	b.n	8000f52 <main+0x2e>
 8000f6a:	bf00      	nop
 8000f6c:	200002b4 	.word	0x200002b4
 8000f70:	08006088 	.word	0x08006088
 8000f74:	20000859 	.word	0x20000859
 8000f78:	08006098 	.word	0x08006098

08000f7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b094      	sub	sp, #80	; 0x50
 8000f80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f82:	f107 0320 	add.w	r3, r7, #32
 8000f86:	2230      	movs	r2, #48	; 0x30
 8000f88:	2100      	movs	r1, #0
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f004 f864 	bl	8005058 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f90:	f107 030c 	add.w	r3, r7, #12
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]
 8000f9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	60bb      	str	r3, [r7, #8]
 8000fa4:	4b28      	ldr	r3, [pc, #160]	; (8001048 <SystemClock_Config+0xcc>)
 8000fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa8:	4a27      	ldr	r2, [pc, #156]	; (8001048 <SystemClock_Config+0xcc>)
 8000faa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fae:	6413      	str	r3, [r2, #64]	; 0x40
 8000fb0:	4b25      	ldr	r3, [pc, #148]	; (8001048 <SystemClock_Config+0xcc>)
 8000fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb8:	60bb      	str	r3, [r7, #8]
 8000fba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	607b      	str	r3, [r7, #4]
 8000fc0:	4b22      	ldr	r3, [pc, #136]	; (800104c <SystemClock_Config+0xd0>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a21      	ldr	r2, [pc, #132]	; (800104c <SystemClock_Config+0xd0>)
 8000fc6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fca:	6013      	str	r3, [r2, #0]
 8000fcc:	4b1f      	ldr	r3, [pc, #124]	; (800104c <SystemClock_Config+0xd0>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fd4:	607b      	str	r3, [r7, #4]
 8000fd6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000fdc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000fe0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fe6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000fec:	2304      	movs	r3, #4
 8000fee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000ff0:	23a8      	movs	r3, #168	; 0xa8
 8000ff2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ff8:	2307      	movs	r3, #7
 8000ffa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ffc:	f107 0320 	add.w	r3, r7, #32
 8001000:	4618      	mov	r0, r3
 8001002:	f001 fce1 	bl	80029c8 <HAL_RCC_OscConfig>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800100c:	f000 fa4c 	bl	80014a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001010:	230f      	movs	r3, #15
 8001012:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001014:	2302      	movs	r3, #2
 8001016:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001018:	2300      	movs	r3, #0
 800101a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800101c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001020:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001022:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001026:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001028:	f107 030c 	add.w	r3, r7, #12
 800102c:	2105      	movs	r1, #5
 800102e:	4618      	mov	r0, r3
 8001030:	f001 ff42 	bl	8002eb8 <HAL_RCC_ClockConfig>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800103a:	f000 fa35 	bl	80014a8 <Error_Handler>
  }
}
 800103e:	bf00      	nop
 8001040:	3750      	adds	r7, #80	; 0x50
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40023800 	.word	0x40023800
 800104c:	40007000 	.word	0x40007000

08001050 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001054:	4b1f      	ldr	r3, [pc, #124]	; (80010d4 <MX_ETH_Init+0x84>)
 8001056:	4a20      	ldr	r2, [pc, #128]	; (80010d8 <MX_ETH_Init+0x88>)
 8001058:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800105a:	4b20      	ldr	r3, [pc, #128]	; (80010dc <MX_ETH_Init+0x8c>)
 800105c:	2200      	movs	r2, #0
 800105e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001060:	4b1e      	ldr	r3, [pc, #120]	; (80010dc <MX_ETH_Init+0x8c>)
 8001062:	2280      	movs	r2, #128	; 0x80
 8001064:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001066:	4b1d      	ldr	r3, [pc, #116]	; (80010dc <MX_ETH_Init+0x8c>)
 8001068:	22e1      	movs	r2, #225	; 0xe1
 800106a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800106c:	4b1b      	ldr	r3, [pc, #108]	; (80010dc <MX_ETH_Init+0x8c>)
 800106e:	2200      	movs	r2, #0
 8001070:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001072:	4b1a      	ldr	r3, [pc, #104]	; (80010dc <MX_ETH_Init+0x8c>)
 8001074:	2200      	movs	r2, #0
 8001076:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001078:	4b18      	ldr	r3, [pc, #96]	; (80010dc <MX_ETH_Init+0x8c>)
 800107a:	2200      	movs	r2, #0
 800107c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800107e:	4b15      	ldr	r3, [pc, #84]	; (80010d4 <MX_ETH_Init+0x84>)
 8001080:	4a16      	ldr	r2, [pc, #88]	; (80010dc <MX_ETH_Init+0x8c>)
 8001082:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001084:	4b13      	ldr	r3, [pc, #76]	; (80010d4 <MX_ETH_Init+0x84>)
 8001086:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800108a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800108c:	4b11      	ldr	r3, [pc, #68]	; (80010d4 <MX_ETH_Init+0x84>)
 800108e:	4a14      	ldr	r2, [pc, #80]	; (80010e0 <MX_ETH_Init+0x90>)
 8001090:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001092:	4b10      	ldr	r3, [pc, #64]	; (80010d4 <MX_ETH_Init+0x84>)
 8001094:	4a13      	ldr	r2, [pc, #76]	; (80010e4 <MX_ETH_Init+0x94>)
 8001096:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001098:	4b0e      	ldr	r3, [pc, #56]	; (80010d4 <MX_ETH_Init+0x84>)
 800109a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800109e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80010a0:	480c      	ldr	r0, [pc, #48]	; (80010d4 <MX_ETH_Init+0x84>)
 80010a2:	f000 fe87 	bl	8001db4 <HAL_ETH_Init>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80010ac:	f000 f9fc 	bl	80014a8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80010b0:	2238      	movs	r2, #56	; 0x38
 80010b2:	2100      	movs	r1, #0
 80010b4:	480c      	ldr	r0, [pc, #48]	; (80010e8 <MX_ETH_Init+0x98>)
 80010b6:	f003 ffcf 	bl	8005058 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80010ba:	4b0b      	ldr	r3, [pc, #44]	; (80010e8 <MX_ETH_Init+0x98>)
 80010bc:	2221      	movs	r2, #33	; 0x21
 80010be:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80010c0:	4b09      	ldr	r3, [pc, #36]	; (80010e8 <MX_ETH_Init+0x98>)
 80010c2:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80010c6:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80010c8:	4b07      	ldr	r3, [pc, #28]	; (80010e8 <MX_ETH_Init+0x98>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20000204 	.word	0x20000204
 80010d8:	40028000 	.word	0x40028000
 80010dc:	2000085c 	.word	0x2000085c
 80010e0:	20000164 	.word	0x20000164
 80010e4:	200000c4 	.word	0x200000c4
 80010e8:	2000008c 	.word	0x2000008c

080010ec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b08a      	sub	sp, #40	; 0x28
 80010f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010f2:	f107 0318 	add.w	r3, r7, #24
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	605a      	str	r2, [r3, #4]
 80010fc:	609a      	str	r2, [r3, #8]
 80010fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001100:	f107 0310 	add.w	r3, r7, #16
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800110a:	463b      	mov	r3, r7
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001116:	4b2b      	ldr	r3, [pc, #172]	; (80011c4 <MX_TIM3_Init+0xd8>)
 8001118:	4a2b      	ldr	r2, [pc, #172]	; (80011c8 <MX_TIM3_Init+0xdc>)
 800111a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 800111c:	4b29      	ldr	r3, [pc, #164]	; (80011c4 <MX_TIM3_Init+0xd8>)
 800111e:	2253      	movs	r2, #83	; 0x53
 8001120:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001122:	4b28      	ldr	r3, [pc, #160]	; (80011c4 <MX_TIM3_Init+0xd8>)
 8001124:	2200      	movs	r2, #0
 8001126:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001128:	4b26      	ldr	r3, [pc, #152]	; (80011c4 <MX_TIM3_Init+0xd8>)
 800112a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800112e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001130:	4b24      	ldr	r3, [pc, #144]	; (80011c4 <MX_TIM3_Init+0xd8>)
 8001132:	2200      	movs	r2, #0
 8001134:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001136:	4b23      	ldr	r3, [pc, #140]	; (80011c4 <MX_TIM3_Init+0xd8>)
 8001138:	2280      	movs	r2, #128	; 0x80
 800113a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800113c:	4821      	ldr	r0, [pc, #132]	; (80011c4 <MX_TIM3_Init+0xd8>)
 800113e:	f002 f8db 	bl	80032f8 <HAL_TIM_Base_Init>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8001148:	f000 f9ae 	bl	80014a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800114c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001150:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001152:	f107 0318 	add.w	r3, r7, #24
 8001156:	4619      	mov	r1, r3
 8001158:	481a      	ldr	r0, [pc, #104]	; (80011c4 <MX_TIM3_Init+0xd8>)
 800115a:	f002 fc41 	bl	80039e0 <HAL_TIM_ConfigClockSource>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001164:	f000 f9a0 	bl	80014a8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001168:	4816      	ldr	r0, [pc, #88]	; (80011c4 <MX_TIM3_Init+0xd8>)
 800116a:	f002 f914 	bl	8003396 <HAL_TIM_IC_Init>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001174:	f000 f998 	bl	80014a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001178:	2300      	movs	r3, #0
 800117a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800117c:	2300      	movs	r3, #0
 800117e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001180:	f107 0310 	add.w	r3, r7, #16
 8001184:	4619      	mov	r1, r3
 8001186:	480f      	ldr	r0, [pc, #60]	; (80011c4 <MX_TIM3_Init+0xd8>)
 8001188:	f002 ffe8 	bl	800415c <HAL_TIMEx_MasterConfigSynchronization>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8001192:	f000 f989 	bl	80014a8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001196:	2300      	movs	r3, #0
 8001198:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800119a:	2301      	movs	r3, #1
 800119c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800119e:	2300      	movs	r3, #0
 80011a0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 4;
 80011a2:	2304      	movs	r3, #4
 80011a4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80011a6:	463b      	mov	r3, r7
 80011a8:	2200      	movs	r2, #0
 80011aa:	4619      	mov	r1, r3
 80011ac:	4805      	ldr	r0, [pc, #20]	; (80011c4 <MX_TIM3_Init+0xd8>)
 80011ae:	f002 fb7b 	bl	80038a8 <HAL_TIM_IC_ConfigChannel>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 80011b8:	f000 f976 	bl	80014a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80011bc:	bf00      	nop
 80011be:	3728      	adds	r7, #40	; 0x28
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	200002b4 	.word	0x200002b4
 80011c8:	40000400 	.word	0x40000400

080011cc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80011d0:	4b11      	ldr	r3, [pc, #68]	; (8001218 <MX_USART3_UART_Init+0x4c>)
 80011d2:	4a12      	ldr	r2, [pc, #72]	; (800121c <MX_USART3_UART_Init+0x50>)
 80011d4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80011d6:	4b10      	ldr	r3, [pc, #64]	; (8001218 <MX_USART3_UART_Init+0x4c>)
 80011d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011dc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011de:	4b0e      	ldr	r3, [pc, #56]	; (8001218 <MX_USART3_UART_Init+0x4c>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80011e4:	4b0c      	ldr	r3, [pc, #48]	; (8001218 <MX_USART3_UART_Init+0x4c>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80011ea:	4b0b      	ldr	r3, [pc, #44]	; (8001218 <MX_USART3_UART_Init+0x4c>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80011f0:	4b09      	ldr	r3, [pc, #36]	; (8001218 <MX_USART3_UART_Init+0x4c>)
 80011f2:	220c      	movs	r2, #12
 80011f4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011f6:	4b08      	ldr	r3, [pc, #32]	; (8001218 <MX_USART3_UART_Init+0x4c>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80011fc:	4b06      	ldr	r3, [pc, #24]	; (8001218 <MX_USART3_UART_Init+0x4c>)
 80011fe:	2200      	movs	r2, #0
 8001200:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001202:	4805      	ldr	r0, [pc, #20]	; (8001218 <MX_USART3_UART_Init+0x4c>)
 8001204:	f003 f83a 	bl	800427c <HAL_UART_Init>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800120e:	f000 f94b 	bl	80014a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	200002fc 	.word	0x200002fc
 800121c:	40004800 	.word	0x40004800

08001220 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001224:	4b14      	ldr	r3, [pc, #80]	; (8001278 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001226:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800122a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800122c:	4b12      	ldr	r3, [pc, #72]	; (8001278 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800122e:	2204      	movs	r2, #4
 8001230:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001232:	4b11      	ldr	r3, [pc, #68]	; (8001278 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001234:	2202      	movs	r2, #2
 8001236:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001238:	4b0f      	ldr	r3, [pc, #60]	; (8001278 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800123a:	2200      	movs	r2, #0
 800123c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800123e:	4b0e      	ldr	r3, [pc, #56]	; (8001278 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001240:	2202      	movs	r2, #2
 8001242:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001244:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001246:	2201      	movs	r2, #1
 8001248:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800124a:	4b0b      	ldr	r3, [pc, #44]	; (8001278 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800124c:	2200      	movs	r2, #0
 800124e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001250:	4b09      	ldr	r3, [pc, #36]	; (8001278 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001252:	2200      	movs	r2, #0
 8001254:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001256:	4b08      	ldr	r3, [pc, #32]	; (8001278 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001258:	2201      	movs	r2, #1
 800125a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800125c:	4b06      	ldr	r3, [pc, #24]	; (8001278 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800125e:	2200      	movs	r2, #0
 8001260:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001262:	4805      	ldr	r0, [pc, #20]	; (8001278 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001264:	f001 fa93 	bl	800278e <HAL_PCD_Init>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800126e:	f000 f91b 	bl	80014a8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	20000340 	.word	0x20000340

0800127c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b08c      	sub	sp, #48	; 0x30
 8001280:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001282:	f107 031c 	add.w	r3, r7, #28
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	605a      	str	r2, [r3, #4]
 800128c:	609a      	str	r2, [r3, #8]
 800128e:	60da      	str	r2, [r3, #12]
 8001290:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	61bb      	str	r3, [r7, #24]
 8001296:	4b67      	ldr	r3, [pc, #412]	; (8001434 <MX_GPIO_Init+0x1b8>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	4a66      	ldr	r2, [pc, #408]	; (8001434 <MX_GPIO_Init+0x1b8>)
 800129c:	f043 0304 	orr.w	r3, r3, #4
 80012a0:	6313      	str	r3, [r2, #48]	; 0x30
 80012a2:	4b64      	ldr	r3, [pc, #400]	; (8001434 <MX_GPIO_Init+0x1b8>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	f003 0304 	and.w	r3, r3, #4
 80012aa:	61bb      	str	r3, [r7, #24]
 80012ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	617b      	str	r3, [r7, #20]
 80012b2:	4b60      	ldr	r3, [pc, #384]	; (8001434 <MX_GPIO_Init+0x1b8>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	4a5f      	ldr	r2, [pc, #380]	; (8001434 <MX_GPIO_Init+0x1b8>)
 80012b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012bc:	6313      	str	r3, [r2, #48]	; 0x30
 80012be:	4b5d      	ldr	r3, [pc, #372]	; (8001434 <MX_GPIO_Init+0x1b8>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012c6:	617b      	str	r3, [r7, #20]
 80012c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	613b      	str	r3, [r7, #16]
 80012ce:	4b59      	ldr	r3, [pc, #356]	; (8001434 <MX_GPIO_Init+0x1b8>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	4a58      	ldr	r2, [pc, #352]	; (8001434 <MX_GPIO_Init+0x1b8>)
 80012d4:	f043 0301 	orr.w	r3, r3, #1
 80012d8:	6313      	str	r3, [r2, #48]	; 0x30
 80012da:	4b56      	ldr	r3, [pc, #344]	; (8001434 <MX_GPIO_Init+0x1b8>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	613b      	str	r3, [r7, #16]
 80012e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	60fb      	str	r3, [r7, #12]
 80012ea:	4b52      	ldr	r3, [pc, #328]	; (8001434 <MX_GPIO_Init+0x1b8>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	4a51      	ldr	r2, [pc, #324]	; (8001434 <MX_GPIO_Init+0x1b8>)
 80012f0:	f043 0302 	orr.w	r3, r3, #2
 80012f4:	6313      	str	r3, [r2, #48]	; 0x30
 80012f6:	4b4f      	ldr	r3, [pc, #316]	; (8001434 <MX_GPIO_Init+0x1b8>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	f003 0302 	and.w	r3, r3, #2
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	60bb      	str	r3, [r7, #8]
 8001306:	4b4b      	ldr	r3, [pc, #300]	; (8001434 <MX_GPIO_Init+0x1b8>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	4a4a      	ldr	r2, [pc, #296]	; (8001434 <MX_GPIO_Init+0x1b8>)
 800130c:	f043 0310 	orr.w	r3, r3, #16
 8001310:	6313      	str	r3, [r2, #48]	; 0x30
 8001312:	4b48      	ldr	r3, [pc, #288]	; (8001434 <MX_GPIO_Init+0x1b8>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	f003 0310 	and.w	r3, r3, #16
 800131a:	60bb      	str	r3, [r7, #8]
 800131c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	607b      	str	r3, [r7, #4]
 8001322:	4b44      	ldr	r3, [pc, #272]	; (8001434 <MX_GPIO_Init+0x1b8>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	4a43      	ldr	r2, [pc, #268]	; (8001434 <MX_GPIO_Init+0x1b8>)
 8001328:	f043 0308 	orr.w	r3, r3, #8
 800132c:	6313      	str	r3, [r2, #48]	; 0x30
 800132e:	4b41      	ldr	r3, [pc, #260]	; (8001434 <MX_GPIO_Init+0x1b8>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	f003 0308 	and.w	r3, r3, #8
 8001336:	607b      	str	r3, [r7, #4]
 8001338:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800133a:	2300      	movs	r3, #0
 800133c:	603b      	str	r3, [r7, #0]
 800133e:	4b3d      	ldr	r3, [pc, #244]	; (8001434 <MX_GPIO_Init+0x1b8>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	4a3c      	ldr	r2, [pc, #240]	; (8001434 <MX_GPIO_Init+0x1b8>)
 8001344:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001348:	6313      	str	r3, [r2, #48]	; 0x30
 800134a:	4b3a      	ldr	r3, [pc, #232]	; (8001434 <MX_GPIO_Init+0x1b8>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001352:	603b      	str	r3, [r7, #0]
 8001354:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001356:	2200      	movs	r2, #0
 8001358:	2120      	movs	r1, #32
 800135a:	4837      	ldr	r0, [pc, #220]	; (8001438 <MX_GPIO_Init+0x1bc>)
 800135c:	f001 f9fe 	bl	800275c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001360:	2200      	movs	r2, #0
 8001362:	f244 0181 	movw	r1, #16513	; 0x4081
 8001366:	4835      	ldr	r0, [pc, #212]	; (800143c <MX_GPIO_Init+0x1c0>)
 8001368:	f001 f9f8 	bl	800275c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 800136c:	2200      	movs	r2, #0
 800136e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001372:	4833      	ldr	r0, [pc, #204]	; (8001440 <MX_GPIO_Init+0x1c4>)
 8001374:	f001 f9f2 	bl	800275c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001378:	2200      	movs	r2, #0
 800137a:	2140      	movs	r1, #64	; 0x40
 800137c:	4831      	ldr	r0, [pc, #196]	; (8001444 <MX_GPIO_Init+0x1c8>)
 800137e:	f001 f9ed 	bl	800275c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001382:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001386:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001388:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800138c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001392:	f107 031c 	add.w	r3, r7, #28
 8001396:	4619      	mov	r1, r3
 8001398:	482b      	ldr	r0, [pc, #172]	; (8001448 <MX_GPIO_Init+0x1cc>)
 800139a:	f001 f833 	bl	8002404 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800139e:	2320      	movs	r3, #32
 80013a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a2:	2301      	movs	r3, #1
 80013a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013aa:	2300      	movs	r3, #0
 80013ac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ae:	f107 031c 	add.w	r3, r7, #28
 80013b2:	4619      	mov	r1, r3
 80013b4:	4820      	ldr	r0, [pc, #128]	; (8001438 <MX_GPIO_Init+0x1bc>)
 80013b6:	f001 f825 	bl	8002404 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80013ba:	f244 0381 	movw	r3, #16513	; 0x4081
 80013be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c0:	2301      	movs	r3, #1
 80013c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c8:	2300      	movs	r3, #0
 80013ca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013cc:	f107 031c 	add.w	r3, r7, #28
 80013d0:	4619      	mov	r1, r3
 80013d2:	481a      	ldr	r0, [pc, #104]	; (800143c <MX_GPIO_Init+0x1c0>)
 80013d4:	f001 f816 	bl	8002404 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80013d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013de:	2301      	movs	r3, #1
 80013e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e6:	2300      	movs	r3, #0
 80013e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013ea:	f107 031c 	add.w	r3, r7, #28
 80013ee:	4619      	mov	r1, r3
 80013f0:	4813      	ldr	r0, [pc, #76]	; (8001440 <MX_GPIO_Init+0x1c4>)
 80013f2:	f001 f807 	bl	8002404 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80013f6:	2340      	movs	r3, #64	; 0x40
 80013f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013fa:	2301      	movs	r3, #1
 80013fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fe:	2300      	movs	r3, #0
 8001400:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001402:	2300      	movs	r3, #0
 8001404:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001406:	f107 031c 	add.w	r3, r7, #28
 800140a:	4619      	mov	r1, r3
 800140c:	480d      	ldr	r0, [pc, #52]	; (8001444 <MX_GPIO_Init+0x1c8>)
 800140e:	f000 fff9 	bl	8002404 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001412:	2380      	movs	r3, #128	; 0x80
 8001414:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001416:	2300      	movs	r3, #0
 8001418:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141a:	2300      	movs	r3, #0
 800141c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800141e:	f107 031c 	add.w	r3, r7, #28
 8001422:	4619      	mov	r1, r3
 8001424:	4807      	ldr	r0, [pc, #28]	; (8001444 <MX_GPIO_Init+0x1c8>)
 8001426:	f000 ffed 	bl	8002404 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800142a:	bf00      	nop
 800142c:	3730      	adds	r7, #48	; 0x30
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	40023800 	.word	0x40023800
 8001438:	40020000 	.word	0x40020000
 800143c:	40020400 	.word	0x40020400
 8001440:	40021000 	.word	0x40021000
 8001444:	40021800 	.word	0x40021800
 8001448:	40020800 	.word	0x40020800

0800144c <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch)
{    //UART_HandleTypeDef huart1;
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8001454:	1d39      	adds	r1, r7, #4
 8001456:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800145a:	2201      	movs	r2, #1
 800145c:	4803      	ldr	r0, [pc, #12]	; (800146c <__io_putchar+0x20>)
 800145e:	f002 ff5a 	bl	8004316 <HAL_UART_Transmit>
  return ch;
 8001462:	687b      	ldr	r3, [r7, #4]
}
 8001464:	4618      	mov	r0, r3
 8001466:	3708      	adds	r7, #8
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	200002fc 	.word	0x200002fc

08001470 <_write>:
int _write(int file, char *ptr, int len)
{      int DataIdx;
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af00      	add	r7, sp, #0
 8001476:	60f8      	str	r0, [r7, #12]
 8001478:	60b9      	str	r1, [r7, #8]
 800147a:	607a      	str	r2, [r7, #4]
    for (DataIdx = 0; DataIdx < len; DataIdx++)
 800147c:	2300      	movs	r3, #0
 800147e:	617b      	str	r3, [r7, #20]
 8001480:	e009      	b.n	8001496 <_write+0x26>
    {
      __io_putchar(*ptr++);  //
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	1c5a      	adds	r2, r3, #1
 8001486:	60ba      	str	r2, [r7, #8]
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff ffde 	bl	800144c <__io_putchar>
    for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	3301      	adds	r3, #1
 8001494:	617b      	str	r3, [r7, #20]
 8001496:	697a      	ldr	r2, [r7, #20]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	429a      	cmp	r2, r3
 800149c:	dbf1      	blt.n	8001482 <_write+0x12>
    }
    return len;
 800149e:	687b      	ldr	r3, [r7, #4]
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3718      	adds	r7, #24
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014ac:	b672      	cpsid	i
}
 80014ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014b0:	e7fe      	b.n	80014b0 <Error_Handler+0x8>
	...

080014b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	607b      	str	r3, [r7, #4]
 80014be:	4b10      	ldr	r3, [pc, #64]	; (8001500 <HAL_MspInit+0x4c>)
 80014c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c2:	4a0f      	ldr	r2, [pc, #60]	; (8001500 <HAL_MspInit+0x4c>)
 80014c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014c8:	6453      	str	r3, [r2, #68]	; 0x44
 80014ca:	4b0d      	ldr	r3, [pc, #52]	; (8001500 <HAL_MspInit+0x4c>)
 80014cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014d2:	607b      	str	r3, [r7, #4]
 80014d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	603b      	str	r3, [r7, #0]
 80014da:	4b09      	ldr	r3, [pc, #36]	; (8001500 <HAL_MspInit+0x4c>)
 80014dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014de:	4a08      	ldr	r2, [pc, #32]	; (8001500 <HAL_MspInit+0x4c>)
 80014e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014e4:	6413      	str	r3, [r2, #64]	; 0x40
 80014e6:	4b06      	ldr	r3, [pc, #24]	; (8001500 <HAL_MspInit+0x4c>)
 80014e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ee:	603b      	str	r3, [r7, #0]
 80014f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014f2:	bf00      	nop
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	40023800 	.word	0x40023800

08001504 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b08e      	sub	sp, #56	; 0x38
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	605a      	str	r2, [r3, #4]
 8001516:	609a      	str	r2, [r3, #8]
 8001518:	60da      	str	r2, [r3, #12]
 800151a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a55      	ldr	r2, [pc, #340]	; (8001678 <HAL_ETH_MspInit+0x174>)
 8001522:	4293      	cmp	r3, r2
 8001524:	f040 80a4 	bne.w	8001670 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001528:	2300      	movs	r3, #0
 800152a:	623b      	str	r3, [r7, #32]
 800152c:	4b53      	ldr	r3, [pc, #332]	; (800167c <HAL_ETH_MspInit+0x178>)
 800152e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001530:	4a52      	ldr	r2, [pc, #328]	; (800167c <HAL_ETH_MspInit+0x178>)
 8001532:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001536:	6313      	str	r3, [r2, #48]	; 0x30
 8001538:	4b50      	ldr	r3, [pc, #320]	; (800167c <HAL_ETH_MspInit+0x178>)
 800153a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001540:	623b      	str	r3, [r7, #32]
 8001542:	6a3b      	ldr	r3, [r7, #32]
 8001544:	2300      	movs	r3, #0
 8001546:	61fb      	str	r3, [r7, #28]
 8001548:	4b4c      	ldr	r3, [pc, #304]	; (800167c <HAL_ETH_MspInit+0x178>)
 800154a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154c:	4a4b      	ldr	r2, [pc, #300]	; (800167c <HAL_ETH_MspInit+0x178>)
 800154e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001552:	6313      	str	r3, [r2, #48]	; 0x30
 8001554:	4b49      	ldr	r3, [pc, #292]	; (800167c <HAL_ETH_MspInit+0x178>)
 8001556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001558:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800155c:	61fb      	str	r3, [r7, #28]
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	2300      	movs	r3, #0
 8001562:	61bb      	str	r3, [r7, #24]
 8001564:	4b45      	ldr	r3, [pc, #276]	; (800167c <HAL_ETH_MspInit+0x178>)
 8001566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001568:	4a44      	ldr	r2, [pc, #272]	; (800167c <HAL_ETH_MspInit+0x178>)
 800156a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800156e:	6313      	str	r3, [r2, #48]	; 0x30
 8001570:	4b42      	ldr	r3, [pc, #264]	; (800167c <HAL_ETH_MspInit+0x178>)
 8001572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001574:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001578:	61bb      	str	r3, [r7, #24]
 800157a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800157c:	2300      	movs	r3, #0
 800157e:	617b      	str	r3, [r7, #20]
 8001580:	4b3e      	ldr	r3, [pc, #248]	; (800167c <HAL_ETH_MspInit+0x178>)
 8001582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001584:	4a3d      	ldr	r2, [pc, #244]	; (800167c <HAL_ETH_MspInit+0x178>)
 8001586:	f043 0304 	orr.w	r3, r3, #4
 800158a:	6313      	str	r3, [r2, #48]	; 0x30
 800158c:	4b3b      	ldr	r3, [pc, #236]	; (800167c <HAL_ETH_MspInit+0x178>)
 800158e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001590:	f003 0304 	and.w	r3, r3, #4
 8001594:	617b      	str	r3, [r7, #20]
 8001596:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001598:	2300      	movs	r3, #0
 800159a:	613b      	str	r3, [r7, #16]
 800159c:	4b37      	ldr	r3, [pc, #220]	; (800167c <HAL_ETH_MspInit+0x178>)
 800159e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a0:	4a36      	ldr	r2, [pc, #216]	; (800167c <HAL_ETH_MspInit+0x178>)
 80015a2:	f043 0301 	orr.w	r3, r3, #1
 80015a6:	6313      	str	r3, [r2, #48]	; 0x30
 80015a8:	4b34      	ldr	r3, [pc, #208]	; (800167c <HAL_ETH_MspInit+0x178>)
 80015aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ac:	f003 0301 	and.w	r3, r3, #1
 80015b0:	613b      	str	r3, [r7, #16]
 80015b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015b4:	2300      	movs	r3, #0
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	4b30      	ldr	r3, [pc, #192]	; (800167c <HAL_ETH_MspInit+0x178>)
 80015ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015bc:	4a2f      	ldr	r2, [pc, #188]	; (800167c <HAL_ETH_MspInit+0x178>)
 80015be:	f043 0302 	orr.w	r3, r3, #2
 80015c2:	6313      	str	r3, [r2, #48]	; 0x30
 80015c4:	4b2d      	ldr	r3, [pc, #180]	; (800167c <HAL_ETH_MspInit+0x178>)
 80015c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c8:	f003 0302 	and.w	r3, r3, #2
 80015cc:	60fb      	str	r3, [r7, #12]
 80015ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80015d0:	2300      	movs	r3, #0
 80015d2:	60bb      	str	r3, [r7, #8]
 80015d4:	4b29      	ldr	r3, [pc, #164]	; (800167c <HAL_ETH_MspInit+0x178>)
 80015d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d8:	4a28      	ldr	r2, [pc, #160]	; (800167c <HAL_ETH_MspInit+0x178>)
 80015da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015de:	6313      	str	r3, [r2, #48]	; 0x30
 80015e0:	4b26      	ldr	r3, [pc, #152]	; (800167c <HAL_ETH_MspInit+0x178>)
 80015e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015e8:	60bb      	str	r3, [r7, #8]
 80015ea:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80015ec:	2332      	movs	r3, #50	; 0x32
 80015ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f0:	2302      	movs	r3, #2
 80015f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f4:	2300      	movs	r3, #0
 80015f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f8:	2303      	movs	r3, #3
 80015fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015fc:	230b      	movs	r3, #11
 80015fe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001600:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001604:	4619      	mov	r1, r3
 8001606:	481e      	ldr	r0, [pc, #120]	; (8001680 <HAL_ETH_MspInit+0x17c>)
 8001608:	f000 fefc 	bl	8002404 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800160c:	2386      	movs	r3, #134	; 0x86
 800160e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001610:	2302      	movs	r3, #2
 8001612:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001614:	2300      	movs	r3, #0
 8001616:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001618:	2303      	movs	r3, #3
 800161a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800161c:	230b      	movs	r3, #11
 800161e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001620:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001624:	4619      	mov	r1, r3
 8001626:	4817      	ldr	r0, [pc, #92]	; (8001684 <HAL_ETH_MspInit+0x180>)
 8001628:	f000 feec 	bl	8002404 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800162c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001630:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001632:	2302      	movs	r3, #2
 8001634:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001636:	2300      	movs	r3, #0
 8001638:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800163a:	2303      	movs	r3, #3
 800163c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800163e:	230b      	movs	r3, #11
 8001640:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001642:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001646:	4619      	mov	r1, r3
 8001648:	480f      	ldr	r0, [pc, #60]	; (8001688 <HAL_ETH_MspInit+0x184>)
 800164a:	f000 fedb 	bl	8002404 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800164e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001652:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001654:	2302      	movs	r3, #2
 8001656:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001658:	2300      	movs	r3, #0
 800165a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800165c:	2303      	movs	r3, #3
 800165e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001660:	230b      	movs	r3, #11
 8001662:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001664:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001668:	4619      	mov	r1, r3
 800166a:	4808      	ldr	r0, [pc, #32]	; (800168c <HAL_ETH_MspInit+0x188>)
 800166c:	f000 feca 	bl	8002404 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001670:	bf00      	nop
 8001672:	3738      	adds	r7, #56	; 0x38
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	40028000 	.word	0x40028000
 800167c:	40023800 	.word	0x40023800
 8001680:	40020800 	.word	0x40020800
 8001684:	40020000 	.word	0x40020000
 8001688:	40020400 	.word	0x40020400
 800168c:	40021800 	.word	0x40021800

08001690 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b08a      	sub	sp, #40	; 0x28
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001698:	f107 0314 	add.w	r3, r7, #20
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	605a      	str	r2, [r3, #4]
 80016a2:	609a      	str	r2, [r3, #8]
 80016a4:	60da      	str	r2, [r3, #12]
 80016a6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a1d      	ldr	r2, [pc, #116]	; (8001724 <HAL_TIM_Base_MspInit+0x94>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d133      	bne.n	800171a <HAL_TIM_Base_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016b2:	2300      	movs	r3, #0
 80016b4:	613b      	str	r3, [r7, #16]
 80016b6:	4b1c      	ldr	r3, [pc, #112]	; (8001728 <HAL_TIM_Base_MspInit+0x98>)
 80016b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ba:	4a1b      	ldr	r2, [pc, #108]	; (8001728 <HAL_TIM_Base_MspInit+0x98>)
 80016bc:	f043 0302 	orr.w	r3, r3, #2
 80016c0:	6413      	str	r3, [r2, #64]	; 0x40
 80016c2:	4b19      	ldr	r3, [pc, #100]	; (8001728 <HAL_TIM_Base_MspInit+0x98>)
 80016c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	613b      	str	r3, [r7, #16]
 80016cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	60fb      	str	r3, [r7, #12]
 80016d2:	4b15      	ldr	r3, [pc, #84]	; (8001728 <HAL_TIM_Base_MspInit+0x98>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	4a14      	ldr	r2, [pc, #80]	; (8001728 <HAL_TIM_Base_MspInit+0x98>)
 80016d8:	f043 0301 	orr.w	r3, r3, #1
 80016dc:	6313      	str	r3, [r2, #48]	; 0x30
 80016de:	4b12      	ldr	r3, [pc, #72]	; (8001728 <HAL_TIM_Base_MspInit+0x98>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80016ea:	2340      	movs	r3, #64	; 0x40
 80016ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ee:	2302      	movs	r3, #2
 80016f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f2:	2300      	movs	r3, #0
 80016f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f6:	2300      	movs	r3, #0
 80016f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80016fa:	2302      	movs	r3, #2
 80016fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016fe:	f107 0314 	add.w	r3, r7, #20
 8001702:	4619      	mov	r1, r3
 8001704:	4809      	ldr	r0, [pc, #36]	; (800172c <HAL_TIM_Base_MspInit+0x9c>)
 8001706:	f000 fe7d 	bl	8002404 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800170a:	2200      	movs	r2, #0
 800170c:	2100      	movs	r1, #0
 800170e:	201d      	movs	r0, #29
 8001710:	f000 fb19 	bl	8001d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001714:	201d      	movs	r0, #29
 8001716:	f000 fb32 	bl	8001d7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800171a:	bf00      	nop
 800171c:	3728      	adds	r7, #40	; 0x28
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40000400 	.word	0x40000400
 8001728:	40023800 	.word	0x40023800
 800172c:	40020000 	.word	0x40020000

08001730 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b08a      	sub	sp, #40	; 0x28
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001738:	f107 0314 	add.w	r3, r7, #20
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	605a      	str	r2, [r3, #4]
 8001742:	609a      	str	r2, [r3, #8]
 8001744:	60da      	str	r2, [r3, #12]
 8001746:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a19      	ldr	r2, [pc, #100]	; (80017b4 <HAL_UART_MspInit+0x84>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d12c      	bne.n	80017ac <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	613b      	str	r3, [r7, #16]
 8001756:	4b18      	ldr	r3, [pc, #96]	; (80017b8 <HAL_UART_MspInit+0x88>)
 8001758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175a:	4a17      	ldr	r2, [pc, #92]	; (80017b8 <HAL_UART_MspInit+0x88>)
 800175c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001760:	6413      	str	r3, [r2, #64]	; 0x40
 8001762:	4b15      	ldr	r3, [pc, #84]	; (80017b8 <HAL_UART_MspInit+0x88>)
 8001764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001766:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800176a:	613b      	str	r3, [r7, #16]
 800176c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800176e:	2300      	movs	r3, #0
 8001770:	60fb      	str	r3, [r7, #12]
 8001772:	4b11      	ldr	r3, [pc, #68]	; (80017b8 <HAL_UART_MspInit+0x88>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001776:	4a10      	ldr	r2, [pc, #64]	; (80017b8 <HAL_UART_MspInit+0x88>)
 8001778:	f043 0308 	orr.w	r3, r3, #8
 800177c:	6313      	str	r3, [r2, #48]	; 0x30
 800177e:	4b0e      	ldr	r3, [pc, #56]	; (80017b8 <HAL_UART_MspInit+0x88>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001782:	f003 0308 	and.w	r3, r3, #8
 8001786:	60fb      	str	r3, [r7, #12]
 8001788:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800178a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800178e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001790:	2302      	movs	r3, #2
 8001792:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001794:	2300      	movs	r3, #0
 8001796:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001798:	2303      	movs	r3, #3
 800179a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800179c:	2307      	movs	r3, #7
 800179e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017a0:	f107 0314 	add.w	r3, r7, #20
 80017a4:	4619      	mov	r1, r3
 80017a6:	4805      	ldr	r0, [pc, #20]	; (80017bc <HAL_UART_MspInit+0x8c>)
 80017a8:	f000 fe2c 	bl	8002404 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80017ac:	bf00      	nop
 80017ae:	3728      	adds	r7, #40	; 0x28
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	40004800 	.word	0x40004800
 80017b8:	40023800 	.word	0x40023800
 80017bc:	40020c00 	.word	0x40020c00

080017c0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b08a      	sub	sp, #40	; 0x28
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c8:	f107 0314 	add.w	r3, r7, #20
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	605a      	str	r2, [r3, #4]
 80017d2:	609a      	str	r2, [r3, #8]
 80017d4:	60da      	str	r2, [r3, #12]
 80017d6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017e0:	d13f      	bne.n	8001862 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	613b      	str	r3, [r7, #16]
 80017e6:	4b21      	ldr	r3, [pc, #132]	; (800186c <HAL_PCD_MspInit+0xac>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	4a20      	ldr	r2, [pc, #128]	; (800186c <HAL_PCD_MspInit+0xac>)
 80017ec:	f043 0301 	orr.w	r3, r3, #1
 80017f0:	6313      	str	r3, [r2, #48]	; 0x30
 80017f2:	4b1e      	ldr	r3, [pc, #120]	; (800186c <HAL_PCD_MspInit+0xac>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	f003 0301 	and.w	r3, r3, #1
 80017fa:	613b      	str	r3, [r7, #16]
 80017fc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80017fe:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001802:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001804:	2302      	movs	r3, #2
 8001806:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001808:	2300      	movs	r3, #0
 800180a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800180c:	2303      	movs	r3, #3
 800180e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001810:	230a      	movs	r3, #10
 8001812:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001814:	f107 0314 	add.w	r3, r7, #20
 8001818:	4619      	mov	r1, r3
 800181a:	4815      	ldr	r0, [pc, #84]	; (8001870 <HAL_PCD_MspInit+0xb0>)
 800181c:	f000 fdf2 	bl	8002404 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001820:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001824:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001826:	2300      	movs	r3, #0
 8001828:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182a:	2300      	movs	r3, #0
 800182c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800182e:	f107 0314 	add.w	r3, r7, #20
 8001832:	4619      	mov	r1, r3
 8001834:	480e      	ldr	r0, [pc, #56]	; (8001870 <HAL_PCD_MspInit+0xb0>)
 8001836:	f000 fde5 	bl	8002404 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800183a:	4b0c      	ldr	r3, [pc, #48]	; (800186c <HAL_PCD_MspInit+0xac>)
 800183c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800183e:	4a0b      	ldr	r2, [pc, #44]	; (800186c <HAL_PCD_MspInit+0xac>)
 8001840:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001844:	6353      	str	r3, [r2, #52]	; 0x34
 8001846:	2300      	movs	r3, #0
 8001848:	60fb      	str	r3, [r7, #12]
 800184a:	4b08      	ldr	r3, [pc, #32]	; (800186c <HAL_PCD_MspInit+0xac>)
 800184c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800184e:	4a07      	ldr	r2, [pc, #28]	; (800186c <HAL_PCD_MspInit+0xac>)
 8001850:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001854:	6453      	str	r3, [r2, #68]	; 0x44
 8001856:	4b05      	ldr	r3, [pc, #20]	; (800186c <HAL_PCD_MspInit+0xac>)
 8001858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001862:	bf00      	nop
 8001864:	3728      	adds	r7, #40	; 0x28
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	40023800 	.word	0x40023800
 8001870:	40020000 	.word	0x40020000

08001874 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001878:	e7fe      	b.n	8001878 <NMI_Handler+0x4>

0800187a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800187a:	b480      	push	{r7}
 800187c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800187e:	e7fe      	b.n	800187e <HardFault_Handler+0x4>

08001880 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001884:	e7fe      	b.n	8001884 <MemManage_Handler+0x4>

08001886 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001886:	b480      	push	{r7}
 8001888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800188a:	e7fe      	b.n	800188a <BusFault_Handler+0x4>

0800188c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001890:	e7fe      	b.n	8001890 <UsageFault_Handler+0x4>

08001892 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001892:	b480      	push	{r7}
 8001894:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001896:	bf00      	nop
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018a4:	bf00      	nop
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr

080018ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018ae:	b480      	push	{r7}
 80018b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018b2:	bf00      	nop
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018c0:	f000 f922 	bl	8001b08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018c4:	bf00      	nop
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80018cc:	4802      	ldr	r0, [pc, #8]	; (80018d8 <TIM3_IRQHandler+0x10>)
 80018ce:	f001 fee3 	bl	8003698 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	200002b4 	.word	0x200002b4

080018dc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b086      	sub	sp, #24
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018e8:	2300      	movs	r3, #0
 80018ea:	617b      	str	r3, [r7, #20]
 80018ec:	e00a      	b.n	8001904 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018ee:	f3af 8000 	nop.w
 80018f2:	4601      	mov	r1, r0
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	1c5a      	adds	r2, r3, #1
 80018f8:	60ba      	str	r2, [r7, #8]
 80018fa:	b2ca      	uxtb	r2, r1
 80018fc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	3301      	adds	r3, #1
 8001902:	617b      	str	r3, [r7, #20]
 8001904:	697a      	ldr	r2, [r7, #20]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	429a      	cmp	r2, r3
 800190a:	dbf0      	blt.n	80018ee <_read+0x12>
  }

  return len;
 800190c:	687b      	ldr	r3, [r7, #4]
}
 800190e:	4618      	mov	r0, r3
 8001910:	3718      	adds	r7, #24
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001916:	b480      	push	{r7}
 8001918:	b083      	sub	sp, #12
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800191e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001922:	4618      	mov	r0, r3
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr

0800192e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800192e:	b480      	push	{r7}
 8001930:	b083      	sub	sp, #12
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
 8001936:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800193e:	605a      	str	r2, [r3, #4]
  return 0;
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr

0800194e <_isatty>:

int _isatty(int file)
{
 800194e:	b480      	push	{r7}
 8001950:	b083      	sub	sp, #12
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001956:	2301      	movs	r3, #1
}
 8001958:	4618      	mov	r0, r3
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001964:	b480      	push	{r7}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	60b9      	str	r1, [r7, #8]
 800196e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	3714      	adds	r7, #20
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
	...

08001980 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001988:	4a14      	ldr	r2, [pc, #80]	; (80019dc <_sbrk+0x5c>)
 800198a:	4b15      	ldr	r3, [pc, #84]	; (80019e0 <_sbrk+0x60>)
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001994:	4b13      	ldr	r3, [pc, #76]	; (80019e4 <_sbrk+0x64>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d102      	bne.n	80019a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800199c:	4b11      	ldr	r3, [pc, #68]	; (80019e4 <_sbrk+0x64>)
 800199e:	4a12      	ldr	r2, [pc, #72]	; (80019e8 <_sbrk+0x68>)
 80019a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019a2:	4b10      	ldr	r3, [pc, #64]	; (80019e4 <_sbrk+0x64>)
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4413      	add	r3, r2
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d207      	bcs.n	80019c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019b0:	f003 fb28 	bl	8005004 <__errno>
 80019b4:	4603      	mov	r3, r0
 80019b6:	220c      	movs	r2, #12
 80019b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019ba:	f04f 33ff 	mov.w	r3, #4294967295
 80019be:	e009      	b.n	80019d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019c0:	4b08      	ldr	r3, [pc, #32]	; (80019e4 <_sbrk+0x64>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019c6:	4b07      	ldr	r3, [pc, #28]	; (80019e4 <_sbrk+0x64>)
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4413      	add	r3, r2
 80019ce:	4a05      	ldr	r2, [pc, #20]	; (80019e4 <_sbrk+0x64>)
 80019d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019d2:	68fb      	ldr	r3, [r7, #12]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3718      	adds	r7, #24
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	20030000 	.word	0x20030000
 80019e0:	00000400 	.word	0x00000400
 80019e4:	20000864 	.word	0x20000864
 80019e8:	20000880 	.word	0x20000880

080019ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019f0:	4b06      	ldr	r3, [pc, #24]	; (8001a0c <SystemInit+0x20>)
 80019f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019f6:	4a05      	ldr	r2, [pc, #20]	; (8001a0c <SystemInit+0x20>)
 80019f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a00:	bf00      	nop
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	e000ed00 	.word	0xe000ed00

08001a10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001a10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a48 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a14:	480d      	ldr	r0, [pc, #52]	; (8001a4c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a16:	490e      	ldr	r1, [pc, #56]	; (8001a50 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a18:	4a0e      	ldr	r2, [pc, #56]	; (8001a54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a1c:	e002      	b.n	8001a24 <LoopCopyDataInit>

08001a1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a22:	3304      	adds	r3, #4

08001a24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a28:	d3f9      	bcc.n	8001a1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a2a:	4a0b      	ldr	r2, [pc, #44]	; (8001a58 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a2c:	4c0b      	ldr	r4, [pc, #44]	; (8001a5c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a30:	e001      	b.n	8001a36 <LoopFillZerobss>

08001a32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a34:	3204      	adds	r2, #4

08001a36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a38:	d3fb      	bcc.n	8001a32 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a3a:	f7ff ffd7 	bl	80019ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a3e:	f003 fae7 	bl	8005010 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a42:	f7ff fa6f 	bl	8000f24 <main>
  bx  lr    
 8001a46:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001a48:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001a4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a50:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001a54:	08006160 	.word	0x08006160
  ldr r2, =_sbss
 8001a58:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001a5c:	2000087c 	.word	0x2000087c

08001a60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a60:	e7fe      	b.n	8001a60 <ADC_IRQHandler>
	...

08001a64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a68:	4b0e      	ldr	r3, [pc, #56]	; (8001aa4 <HAL_Init+0x40>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a0d      	ldr	r2, [pc, #52]	; (8001aa4 <HAL_Init+0x40>)
 8001a6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a74:	4b0b      	ldr	r3, [pc, #44]	; (8001aa4 <HAL_Init+0x40>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a0a      	ldr	r2, [pc, #40]	; (8001aa4 <HAL_Init+0x40>)
 8001a7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a80:	4b08      	ldr	r3, [pc, #32]	; (8001aa4 <HAL_Init+0x40>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a07      	ldr	r2, [pc, #28]	; (8001aa4 <HAL_Init+0x40>)
 8001a86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a8c:	2003      	movs	r0, #3
 8001a8e:	f000 f94f 	bl	8001d30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a92:	2000      	movs	r0, #0
 8001a94:	f000 f808 	bl	8001aa8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a98:	f7ff fd0c 	bl	80014b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	40023c00 	.word	0x40023c00

08001aa8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ab0:	4b12      	ldr	r3, [pc, #72]	; (8001afc <HAL_InitTick+0x54>)
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	4b12      	ldr	r3, [pc, #72]	; (8001b00 <HAL_InitTick+0x58>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	4619      	mov	r1, r3
 8001aba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001abe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ac2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f000 f967 	bl	8001d9a <HAL_SYSTICK_Config>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e00e      	b.n	8001af4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2b0f      	cmp	r3, #15
 8001ada:	d80a      	bhi.n	8001af2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001adc:	2200      	movs	r2, #0
 8001ade:	6879      	ldr	r1, [r7, #4]
 8001ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ae4:	f000 f92f 	bl	8001d46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ae8:	4a06      	ldr	r2, [pc, #24]	; (8001b04 <HAL_InitTick+0x5c>)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001aee:	2300      	movs	r3, #0
 8001af0:	e000      	b.n	8001af4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3708      	adds	r7, #8
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	20000000 	.word	0x20000000
 8001b00:	20000008 	.word	0x20000008
 8001b04:	20000004 	.word	0x20000004

08001b08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b0c:	4b06      	ldr	r3, [pc, #24]	; (8001b28 <HAL_IncTick+0x20>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	461a      	mov	r2, r3
 8001b12:	4b06      	ldr	r3, [pc, #24]	; (8001b2c <HAL_IncTick+0x24>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4413      	add	r3, r2
 8001b18:	4a04      	ldr	r2, [pc, #16]	; (8001b2c <HAL_IncTick+0x24>)
 8001b1a:	6013      	str	r3, [r2, #0]
}
 8001b1c:	bf00      	nop
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	20000008 	.word	0x20000008
 8001b2c:	20000868 	.word	0x20000868

08001b30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  return uwTick;
 8001b34:	4b03      	ldr	r3, [pc, #12]	; (8001b44 <HAL_GetTick+0x14>)
 8001b36:	681b      	ldr	r3, [r3, #0]
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	20000868 	.word	0x20000868

08001b48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b50:	f7ff ffee 	bl	8001b30 <HAL_GetTick>
 8001b54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b60:	d005      	beq.n	8001b6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b62:	4b0a      	ldr	r3, [pc, #40]	; (8001b8c <HAL_Delay+0x44>)
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	461a      	mov	r2, r3
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b6e:	bf00      	nop
 8001b70:	f7ff ffde 	bl	8001b30 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	68fa      	ldr	r2, [r7, #12]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d8f7      	bhi.n	8001b70 <HAL_Delay+0x28>
  {
  }
}
 8001b80:	bf00      	nop
 8001b82:	bf00      	nop
 8001b84:	3710      	adds	r7, #16
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	20000008 	.word	0x20000008

08001b90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b085      	sub	sp, #20
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f003 0307 	and.w	r3, r3, #7
 8001b9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ba0:	4b0c      	ldr	r3, [pc, #48]	; (8001bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ba6:	68ba      	ldr	r2, [r7, #8]
 8001ba8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bac:	4013      	ands	r3, r2
 8001bae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bc2:	4a04      	ldr	r2, [pc, #16]	; (8001bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	60d3      	str	r3, [r2, #12]
}
 8001bc8:	bf00      	nop
 8001bca:	3714      	adds	r7, #20
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr
 8001bd4:	e000ed00 	.word	0xe000ed00

08001bd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bdc:	4b04      	ldr	r3, [pc, #16]	; (8001bf0 <__NVIC_GetPriorityGrouping+0x18>)
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	0a1b      	lsrs	r3, r3, #8
 8001be2:	f003 0307 	and.w	r3, r3, #7
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr
 8001bf0:	e000ed00 	.word	0xe000ed00

08001bf4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	db0b      	blt.n	8001c1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c06:	79fb      	ldrb	r3, [r7, #7]
 8001c08:	f003 021f 	and.w	r2, r3, #31
 8001c0c:	4907      	ldr	r1, [pc, #28]	; (8001c2c <__NVIC_EnableIRQ+0x38>)
 8001c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c12:	095b      	lsrs	r3, r3, #5
 8001c14:	2001      	movs	r0, #1
 8001c16:	fa00 f202 	lsl.w	r2, r0, r2
 8001c1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c1e:	bf00      	nop
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	e000e100 	.word	0xe000e100

08001c30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	4603      	mov	r3, r0
 8001c38:	6039      	str	r1, [r7, #0]
 8001c3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	db0a      	blt.n	8001c5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	b2da      	uxtb	r2, r3
 8001c48:	490c      	ldr	r1, [pc, #48]	; (8001c7c <__NVIC_SetPriority+0x4c>)
 8001c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4e:	0112      	lsls	r2, r2, #4
 8001c50:	b2d2      	uxtb	r2, r2
 8001c52:	440b      	add	r3, r1
 8001c54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c58:	e00a      	b.n	8001c70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	b2da      	uxtb	r2, r3
 8001c5e:	4908      	ldr	r1, [pc, #32]	; (8001c80 <__NVIC_SetPriority+0x50>)
 8001c60:	79fb      	ldrb	r3, [r7, #7]
 8001c62:	f003 030f 	and.w	r3, r3, #15
 8001c66:	3b04      	subs	r3, #4
 8001c68:	0112      	lsls	r2, r2, #4
 8001c6a:	b2d2      	uxtb	r2, r2
 8001c6c:	440b      	add	r3, r1
 8001c6e:	761a      	strb	r2, [r3, #24]
}
 8001c70:	bf00      	nop
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr
 8001c7c:	e000e100 	.word	0xe000e100
 8001c80:	e000ed00 	.word	0xe000ed00

08001c84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b089      	sub	sp, #36	; 0x24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	60b9      	str	r1, [r7, #8]
 8001c8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f003 0307 	and.w	r3, r3, #7
 8001c96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	f1c3 0307 	rsb	r3, r3, #7
 8001c9e:	2b04      	cmp	r3, #4
 8001ca0:	bf28      	it	cs
 8001ca2:	2304      	movcs	r3, #4
 8001ca4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	3304      	adds	r3, #4
 8001caa:	2b06      	cmp	r3, #6
 8001cac:	d902      	bls.n	8001cb4 <NVIC_EncodePriority+0x30>
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	3b03      	subs	r3, #3
 8001cb2:	e000      	b.n	8001cb6 <NVIC_EncodePriority+0x32>
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc2:	43da      	mvns	r2, r3
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	401a      	ands	r2, r3
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ccc:	f04f 31ff 	mov.w	r1, #4294967295
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd6:	43d9      	mvns	r1, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cdc:	4313      	orrs	r3, r2
         );
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3724      	adds	r7, #36	; 0x24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
	...

08001cec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cfc:	d301      	bcc.n	8001d02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e00f      	b.n	8001d22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d02:	4a0a      	ldr	r2, [pc, #40]	; (8001d2c <SysTick_Config+0x40>)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	3b01      	subs	r3, #1
 8001d08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d0a:	210f      	movs	r1, #15
 8001d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d10:	f7ff ff8e 	bl	8001c30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d14:	4b05      	ldr	r3, [pc, #20]	; (8001d2c <SysTick_Config+0x40>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d1a:	4b04      	ldr	r3, [pc, #16]	; (8001d2c <SysTick_Config+0x40>)
 8001d1c:	2207      	movs	r2, #7
 8001d1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	e000e010 	.word	0xe000e010

08001d30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f7ff ff29 	bl	8001b90 <__NVIC_SetPriorityGrouping>
}
 8001d3e:	bf00      	nop
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b086      	sub	sp, #24
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	60b9      	str	r1, [r7, #8]
 8001d50:	607a      	str	r2, [r7, #4]
 8001d52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d54:	2300      	movs	r3, #0
 8001d56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d58:	f7ff ff3e 	bl	8001bd8 <__NVIC_GetPriorityGrouping>
 8001d5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	68b9      	ldr	r1, [r7, #8]
 8001d62:	6978      	ldr	r0, [r7, #20]
 8001d64:	f7ff ff8e 	bl	8001c84 <NVIC_EncodePriority>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d6e:	4611      	mov	r1, r2
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7ff ff5d 	bl	8001c30 <__NVIC_SetPriority>
}
 8001d76:	bf00      	nop
 8001d78:	3718      	adds	r7, #24
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b082      	sub	sp, #8
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	4603      	mov	r3, r0
 8001d86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7ff ff31 	bl	8001bf4 <__NVIC_EnableIRQ>
}
 8001d92:	bf00      	nop
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b082      	sub	sp, #8
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f7ff ffa2 	bl	8001cec <SysTick_Config>
 8001da8:	4603      	mov	r3, r0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
	...

08001db4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d101      	bne.n	8001dc6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e06c      	b.n	8001ea0 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d106      	bne.n	8001dde <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2223      	movs	r2, #35	; 0x23
 8001dd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f7ff fb93 	bl	8001504 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dde:	2300      	movs	r3, #0
 8001de0:	60bb      	str	r3, [r7, #8]
 8001de2:	4b31      	ldr	r3, [pc, #196]	; (8001ea8 <HAL_ETH_Init+0xf4>)
 8001de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de6:	4a30      	ldr	r2, [pc, #192]	; (8001ea8 <HAL_ETH_Init+0xf4>)
 8001de8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dec:	6453      	str	r3, [r2, #68]	; 0x44
 8001dee:	4b2e      	ldr	r3, [pc, #184]	; (8001ea8 <HAL_ETH_Init+0xf4>)
 8001df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001df6:	60bb      	str	r3, [r7, #8]
 8001df8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001dfa:	4b2c      	ldr	r3, [pc, #176]	; (8001eac <HAL_ETH_Init+0xf8>)
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	4a2b      	ldr	r2, [pc, #172]	; (8001eac <HAL_ETH_Init+0xf8>)
 8001e00:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001e04:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001e06:	4b29      	ldr	r3, [pc, #164]	; (8001eac <HAL_ETH_Init+0xf8>)
 8001e08:	685a      	ldr	r2, [r3, #4]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	4927      	ldr	r1, [pc, #156]	; (8001eac <HAL_ETH_Init+0xf8>)
 8001e10:	4313      	orrs	r3, r2
 8001e12:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001e14:	4b25      	ldr	r3, [pc, #148]	; (8001eac <HAL_ETH_Init+0xf8>)
 8001e16:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	6812      	ldr	r2, [r2, #0]
 8001e26:	f043 0301 	orr.w	r3, r3, #1
 8001e2a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e2e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e30:	f7ff fe7e 	bl	8001b30 <HAL_GetTick>
 8001e34:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001e36:	e011      	b.n	8001e5c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001e38:	f7ff fe7a 	bl	8001b30 <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001e46:	d909      	bls.n	8001e5c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2204      	movs	r2, #4
 8001e4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	22e0      	movs	r2, #224	; 0xe0
 8001e54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e021      	b.n	8001ea0 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d1e4      	bne.n	8001e38 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f000 f958 	bl	8002124 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f000 f9ff 	bl	8002278 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f000 fa55 	bl	800232a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	461a      	mov	r2, r3
 8001e86:	2100      	movs	r1, #0
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f000 f9bd 	bl	8002208 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2210      	movs	r2, #16
 8001e9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001e9e:	2300      	movs	r3, #0
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3710      	adds	r7, #16
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	40023800 	.word	0x40023800
 8001eac:	40013800 	.word	0x40013800

08001eb0 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001ec2:	68fa      	ldr	r2, [r7, #12]
 8001ec4:	4b51      	ldr	r3, [pc, #324]	; (800200c <ETH_SetMACConfig+0x15c>)
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	7c1b      	ldrb	r3, [r3, #16]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d102      	bne.n	8001ed8 <ETH_SetMACConfig+0x28>
 8001ed2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001ed6:	e000      	b.n	8001eda <ETH_SetMACConfig+0x2a>
 8001ed8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	7c5b      	ldrb	r3, [r3, #17]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d102      	bne.n	8001ee8 <ETH_SetMACConfig+0x38>
 8001ee2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ee6:	e000      	b.n	8001eea <ETH_SetMACConfig+0x3a>
 8001ee8:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001eea:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001ef0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	7fdb      	ldrb	r3, [r3, #31]
 8001ef6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001ef8:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001efe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001f00:	683a      	ldr	r2, [r7, #0]
 8001f02:	7f92      	ldrb	r2, [r2, #30]
 8001f04:	2a00      	cmp	r2, #0
 8001f06:	d102      	bne.n	8001f0e <ETH_SetMACConfig+0x5e>
 8001f08:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f0c:	e000      	b.n	8001f10 <ETH_SetMACConfig+0x60>
 8001f0e:	2200      	movs	r2, #0
                        macconf->Speed |
 8001f10:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	7f1b      	ldrb	r3, [r3, #28]
 8001f16:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001f18:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001f1e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	791b      	ldrb	r3, [r3, #4]
 8001f24:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001f26:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001f28:	683a      	ldr	r2, [r7, #0]
 8001f2a:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001f2e:	2a00      	cmp	r2, #0
 8001f30:	d102      	bne.n	8001f38 <ETH_SetMACConfig+0x88>
 8001f32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f36:	e000      	b.n	8001f3a <ETH_SetMACConfig+0x8a>
 8001f38:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001f3a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	7bdb      	ldrb	r3, [r3, #15]
 8001f40:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001f42:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001f48:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001f50:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001f52:	4313      	orrs	r3, r2
 8001f54:	68fa      	ldr	r2, [r7, #12]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	68fa      	ldr	r2, [r7, #12]
 8001f60:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f6a:	2001      	movs	r0, #1
 8001f6c:	f7ff fdec 	bl	8001b48 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	68fa      	ldr	r2, [r7, #12]
 8001f76:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	699b      	ldr	r3, [r3, #24]
 8001f7e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001f80:	68fa      	ldr	r2, [r7, #12]
 8001f82:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001f86:	4013      	ands	r3, r2
 8001f88:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f8e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001f90:	683a      	ldr	r2, [r7, #0]
 8001f92:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001f96:	2a00      	cmp	r2, #0
 8001f98:	d101      	bne.n	8001f9e <ETH_SetMACConfig+0xee>
 8001f9a:	2280      	movs	r2, #128	; 0x80
 8001f9c:	e000      	b.n	8001fa0 <ETH_SetMACConfig+0xf0>
 8001f9e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001fa0:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001fa6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001fa8:	683a      	ldr	r2, [r7, #0]
 8001faa:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001fae:	2a01      	cmp	r2, #1
 8001fb0:	d101      	bne.n	8001fb6 <ETH_SetMACConfig+0x106>
 8001fb2:	2208      	movs	r2, #8
 8001fb4:	e000      	b.n	8001fb8 <ETH_SetMACConfig+0x108>
 8001fb6:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001fb8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001fc0:	2a01      	cmp	r2, #1
 8001fc2:	d101      	bne.n	8001fc8 <ETH_SetMACConfig+0x118>
 8001fc4:	2204      	movs	r2, #4
 8001fc6:	e000      	b.n	8001fca <ETH_SetMACConfig+0x11a>
 8001fc8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001fca:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001fcc:	683a      	ldr	r2, [r7, #0]
 8001fce:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001fd2:	2a01      	cmp	r2, #1
 8001fd4:	d101      	bne.n	8001fda <ETH_SetMACConfig+0x12a>
 8001fd6:	2202      	movs	r2, #2
 8001fd8:	e000      	b.n	8001fdc <ETH_SetMACConfig+0x12c>
 8001fda:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	68fa      	ldr	r2, [r7, #12]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	68fa      	ldr	r2, [r7, #12]
 8001fea:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	699b      	ldr	r3, [r3, #24]
 8001ff2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ff4:	2001      	movs	r0, #1
 8001ff6:	f7ff fda7 	bl	8001b48 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	68fa      	ldr	r2, [r7, #12]
 8002000:	619a      	str	r2, [r3, #24]
}
 8002002:	bf00      	nop
 8002004:	3710      	adds	r7, #16
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	ff20810f 	.word	0xff20810f

08002010 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002022:	699b      	ldr	r3, [r3, #24]
 8002024:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002026:	68fa      	ldr	r2, [r7, #12]
 8002028:	4b3d      	ldr	r3, [pc, #244]	; (8002120 <ETH_SetDMAConfig+0x110>)
 800202a:	4013      	ands	r3, r2
 800202c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	7b1b      	ldrb	r3, [r3, #12]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d102      	bne.n	800203c <ETH_SetDMAConfig+0x2c>
 8002036:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800203a:	e000      	b.n	800203e <ETH_SetDMAConfig+0x2e>
 800203c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	7b5b      	ldrb	r3, [r3, #13]
 8002042:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002044:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002046:	683a      	ldr	r2, [r7, #0]
 8002048:	7f52      	ldrb	r2, [r2, #29]
 800204a:	2a00      	cmp	r2, #0
 800204c:	d102      	bne.n	8002054 <ETH_SetDMAConfig+0x44>
 800204e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002052:	e000      	b.n	8002056 <ETH_SetDMAConfig+0x46>
 8002054:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002056:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	7b9b      	ldrb	r3, [r3, #14]
 800205c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800205e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002064:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	7f1b      	ldrb	r3, [r3, #28]
 800206a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800206c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	7f9b      	ldrb	r3, [r3, #30]
 8002072:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002074:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800207a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002082:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002084:	4313      	orrs	r3, r2
 8002086:	68fa      	ldr	r2, [r7, #12]
 8002088:	4313      	orrs	r3, r2
 800208a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002094:	461a      	mov	r2, r3
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020a2:	699b      	ldr	r3, [r3, #24]
 80020a4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80020a6:	2001      	movs	r0, #1
 80020a8:	f7ff fd4e 	bl	8001b48 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020b4:	461a      	mov	r2, r3
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	791b      	ldrb	r3, [r3, #4]
 80020be:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80020c4:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80020ca:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80020d0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80020d8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80020da:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80020e2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80020e8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	6812      	ldr	r2, [r2, #0]
 80020ee:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80020f2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80020f6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002104:	2001      	movs	r0, #1
 8002106:	f7ff fd1f 	bl	8001b48 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002112:	461a      	mov	r2, r3
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	6013      	str	r3, [r2, #0]
}
 8002118:	bf00      	nop
 800211a:	3710      	adds	r7, #16
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	f8de3f23 	.word	0xf8de3f23

08002124 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b0a6      	sub	sp, #152	; 0x98
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800212c:	2301      	movs	r3, #1
 800212e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002132:	2301      	movs	r3, #1
 8002134:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002138:	2300      	movs	r3, #0
 800213a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800213c:	2300      	movs	r3, #0
 800213e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002142:	2301      	movs	r3, #1
 8002144:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002148:	2300      	movs	r3, #0
 800214a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800214e:	2301      	movs	r3, #1
 8002150:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002154:	2300      	movs	r3, #0
 8002156:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800215a:	2300      	movs	r3, #0
 800215c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002160:	2300      	movs	r3, #0
 8002162:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002164:	2300      	movs	r3, #0
 8002166:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800216a:	2300      	movs	r3, #0
 800216c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800216e:	2300      	movs	r3, #0
 8002170:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002174:	2300      	movs	r3, #0
 8002176:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800217a:	2300      	movs	r3, #0
 800217c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002180:	2300      	movs	r3, #0
 8002182:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002186:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800218a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800218c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002190:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002192:	2300      	movs	r3, #0
 8002194:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002198:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800219c:	4619      	mov	r1, r3
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f7ff fe86 	bl	8001eb0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80021a4:	2301      	movs	r3, #1
 80021a6:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80021a8:	2301      	movs	r3, #1
 80021aa:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80021ac:	2301      	movs	r3, #1
 80021ae:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80021b2:	2301      	movs	r3, #1
 80021b4:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80021b6:	2300      	movs	r3, #0
 80021b8:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80021ba:	2300      	movs	r3, #0
 80021bc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80021c0:	2300      	movs	r3, #0
 80021c2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80021c6:	2300      	movs	r3, #0
 80021c8:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80021ca:	2301      	movs	r3, #1
 80021cc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80021d0:	2301      	movs	r3, #1
 80021d2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80021d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021d8:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80021da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80021de:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80021e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021e4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80021e6:	2301      	movs	r3, #1
 80021e8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80021ec:	2300      	movs	r3, #0
 80021ee:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80021f0:	2300      	movs	r3, #0
 80021f2:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80021f4:	f107 0308 	add.w	r3, r7, #8
 80021f8:	4619      	mov	r1, r3
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f7ff ff08 	bl	8002010 <ETH_SetDMAConfig>
}
 8002200:	bf00      	nop
 8002202:	3798      	adds	r7, #152	; 0x98
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002208:	b480      	push	{r7}
 800220a:	b087      	sub	sp, #28
 800220c:	af00      	add	r7, sp, #0
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	60b9      	str	r1, [r7, #8]
 8002212:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	3305      	adds	r3, #5
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	021b      	lsls	r3, r3, #8
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	3204      	adds	r2, #4
 8002220:	7812      	ldrb	r2, [r2, #0]
 8002222:	4313      	orrs	r3, r2
 8002224:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002226:	68ba      	ldr	r2, [r7, #8]
 8002228:	4b11      	ldr	r3, [pc, #68]	; (8002270 <ETH_MACAddressConfig+0x68>)
 800222a:	4413      	add	r3, r2
 800222c:	461a      	mov	r2, r3
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	3303      	adds	r3, #3
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	061a      	lsls	r2, r3, #24
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	3302      	adds	r3, #2
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	041b      	lsls	r3, r3, #16
 8002242:	431a      	orrs	r2, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	3301      	adds	r3, #1
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	021b      	lsls	r3, r3, #8
 800224c:	4313      	orrs	r3, r2
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	7812      	ldrb	r2, [r2, #0]
 8002252:	4313      	orrs	r3, r2
 8002254:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002256:	68ba      	ldr	r2, [r7, #8]
 8002258:	4b06      	ldr	r3, [pc, #24]	; (8002274 <ETH_MACAddressConfig+0x6c>)
 800225a:	4413      	add	r3, r2
 800225c:	461a      	mov	r2, r3
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	6013      	str	r3, [r2, #0]
}
 8002262:	bf00      	nop
 8002264:	371c      	adds	r7, #28
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	40028040 	.word	0x40028040
 8002274:	40028044 	.word	0x40028044

08002278 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002278:	b480      	push	{r7}
 800227a:	b085      	sub	sp, #20
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002280:	2300      	movs	r3, #0
 8002282:	60fb      	str	r3, [r7, #12]
 8002284:	e03e      	b.n	8002304 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	68d9      	ldr	r1, [r3, #12]
 800228a:	68fa      	ldr	r2, [r7, #12]
 800228c:	4613      	mov	r3, r2
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	4413      	add	r3, r2
 8002292:	00db      	lsls	r3, r3, #3
 8002294:	440b      	add	r3, r1
 8002296:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	2200      	movs	r2, #0
 800229c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	2200      	movs	r2, #0
 80022a2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	2200      	movs	r2, #0
 80022a8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	2200      	movs	r2, #0
 80022ae:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80022b0:	68b9      	ldr	r1, [r7, #8]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	68fa      	ldr	r2, [r7, #12]
 80022b6:	3206      	adds	r2, #6
 80022b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d80c      	bhi.n	80022e8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	68d9      	ldr	r1, [r3, #12]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	1c5a      	adds	r2, r3, #1
 80022d6:	4613      	mov	r3, r2
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	4413      	add	r3, r2
 80022dc:	00db      	lsls	r3, r3, #3
 80022de:	440b      	add	r3, r1
 80022e0:	461a      	mov	r2, r3
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	60da      	str	r2, [r3, #12]
 80022e6:	e004      	b.n	80022f2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	461a      	mov	r2, r3
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	3301      	adds	r3, #1
 8002302:	60fb      	str	r3, [r7, #12]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2b03      	cmp	r3, #3
 8002308:	d9bd      	bls.n	8002286 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	68da      	ldr	r2, [r3, #12]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800231c:	611a      	str	r2, [r3, #16]
}
 800231e:	bf00      	nop
 8002320:	3714      	adds	r7, #20
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr

0800232a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800232a:	b480      	push	{r7}
 800232c:	b085      	sub	sp, #20
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002332:	2300      	movs	r3, #0
 8002334:	60fb      	str	r3, [r7, #12]
 8002336:	e046      	b.n	80023c6 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6919      	ldr	r1, [r3, #16]
 800233c:	68fa      	ldr	r2, [r7, #12]
 800233e:	4613      	mov	r3, r2
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	4413      	add	r3, r2
 8002344:	00db      	lsls	r3, r3, #3
 8002346:	440b      	add	r3, r1
 8002348:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	2200      	movs	r2, #0
 800234e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	2200      	movs	r2, #0
 8002354:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	2200      	movs	r2, #0
 800235a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	2200      	movs	r2, #0
 8002360:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	2200      	movs	r2, #0
 8002366:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	2200      	movs	r2, #0
 800236c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002374:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800237c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800238a:	68b9      	ldr	r1, [r7, #8]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	68fa      	ldr	r2, [r7, #12]
 8002390:	3212      	adds	r2, #18
 8002392:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2b02      	cmp	r3, #2
 800239a:	d80c      	bhi.n	80023b6 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6919      	ldr	r1, [r3, #16]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	1c5a      	adds	r2, r3, #1
 80023a4:	4613      	mov	r3, r2
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	4413      	add	r3, r2
 80023aa:	00db      	lsls	r3, r3, #3
 80023ac:	440b      	add	r3, r1
 80023ae:	461a      	mov	r2, r3
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	60da      	str	r2, [r3, #12]
 80023b4:	e004      	b.n	80023c0 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	461a      	mov	r2, r3
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	3301      	adds	r3, #1
 80023c4:	60fb      	str	r3, [r7, #12]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2b03      	cmp	r3, #3
 80023ca:	d9b5      	bls.n	8002338 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	691a      	ldr	r2, [r3, #16]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023f6:	60da      	str	r2, [r3, #12]
}
 80023f8:	bf00      	nop
 80023fa:	3714      	adds	r7, #20
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002404:	b480      	push	{r7}
 8002406:	b089      	sub	sp, #36	; 0x24
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800240e:	2300      	movs	r3, #0
 8002410:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002412:	2300      	movs	r3, #0
 8002414:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002416:	2300      	movs	r3, #0
 8002418:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800241a:	2300      	movs	r3, #0
 800241c:	61fb      	str	r3, [r7, #28]
 800241e:	e177      	b.n	8002710 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002420:	2201      	movs	r2, #1
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	697a      	ldr	r2, [r7, #20]
 8002430:	4013      	ands	r3, r2
 8002432:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002434:	693a      	ldr	r2, [r7, #16]
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	429a      	cmp	r2, r3
 800243a:	f040 8166 	bne.w	800270a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f003 0303 	and.w	r3, r3, #3
 8002446:	2b01      	cmp	r3, #1
 8002448:	d005      	beq.n	8002456 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002452:	2b02      	cmp	r3, #2
 8002454:	d130      	bne.n	80024b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	2203      	movs	r2, #3
 8002462:	fa02 f303 	lsl.w	r3, r2, r3
 8002466:	43db      	mvns	r3, r3
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	4013      	ands	r3, r2
 800246c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	68da      	ldr	r2, [r3, #12]
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	005b      	lsls	r3, r3, #1
 8002476:	fa02 f303 	lsl.w	r3, r2, r3
 800247a:	69ba      	ldr	r2, [r7, #24]
 800247c:	4313      	orrs	r3, r2
 800247e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800248c:	2201      	movs	r2, #1
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	43db      	mvns	r3, r3
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	4013      	ands	r3, r2
 800249a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	091b      	lsrs	r3, r3, #4
 80024a2:	f003 0201 	and.w	r2, r3, #1
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f003 0303 	and.w	r3, r3, #3
 80024c0:	2b03      	cmp	r3, #3
 80024c2:	d017      	beq.n	80024f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	2203      	movs	r2, #3
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	43db      	mvns	r3, r3
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	4013      	ands	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	689a      	ldr	r2, [r3, #8]
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f003 0303 	and.w	r3, r3, #3
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d123      	bne.n	8002548 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	08da      	lsrs	r2, r3, #3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	3208      	adds	r2, #8
 8002508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800250c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	f003 0307 	and.w	r3, r3, #7
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	220f      	movs	r2, #15
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	43db      	mvns	r3, r3
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	4013      	ands	r3, r2
 8002522:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	691a      	ldr	r2, [r3, #16]
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	f003 0307 	and.w	r3, r3, #7
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	4313      	orrs	r3, r2
 8002538:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	08da      	lsrs	r2, r3, #3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	3208      	adds	r2, #8
 8002542:	69b9      	ldr	r1, [r7, #24]
 8002544:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	2203      	movs	r2, #3
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	43db      	mvns	r3, r3
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	4013      	ands	r3, r2
 800255e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f003 0203 	and.w	r2, r3, #3
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	4313      	orrs	r3, r2
 8002574:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002584:	2b00      	cmp	r3, #0
 8002586:	f000 80c0 	beq.w	800270a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800258a:	2300      	movs	r3, #0
 800258c:	60fb      	str	r3, [r7, #12]
 800258e:	4b66      	ldr	r3, [pc, #408]	; (8002728 <HAL_GPIO_Init+0x324>)
 8002590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002592:	4a65      	ldr	r2, [pc, #404]	; (8002728 <HAL_GPIO_Init+0x324>)
 8002594:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002598:	6453      	str	r3, [r2, #68]	; 0x44
 800259a:	4b63      	ldr	r3, [pc, #396]	; (8002728 <HAL_GPIO_Init+0x324>)
 800259c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800259e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025a2:	60fb      	str	r3, [r7, #12]
 80025a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025a6:	4a61      	ldr	r2, [pc, #388]	; (800272c <HAL_GPIO_Init+0x328>)
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	089b      	lsrs	r3, r3, #2
 80025ac:	3302      	adds	r3, #2
 80025ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	f003 0303 	and.w	r3, r3, #3
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	220f      	movs	r2, #15
 80025be:	fa02 f303 	lsl.w	r3, r2, r3
 80025c2:	43db      	mvns	r3, r3
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	4013      	ands	r3, r2
 80025c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a58      	ldr	r2, [pc, #352]	; (8002730 <HAL_GPIO_Init+0x32c>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d037      	beq.n	8002642 <HAL_GPIO_Init+0x23e>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a57      	ldr	r2, [pc, #348]	; (8002734 <HAL_GPIO_Init+0x330>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d031      	beq.n	800263e <HAL_GPIO_Init+0x23a>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a56      	ldr	r2, [pc, #344]	; (8002738 <HAL_GPIO_Init+0x334>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d02b      	beq.n	800263a <HAL_GPIO_Init+0x236>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a55      	ldr	r2, [pc, #340]	; (800273c <HAL_GPIO_Init+0x338>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d025      	beq.n	8002636 <HAL_GPIO_Init+0x232>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a54      	ldr	r2, [pc, #336]	; (8002740 <HAL_GPIO_Init+0x33c>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d01f      	beq.n	8002632 <HAL_GPIO_Init+0x22e>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a53      	ldr	r2, [pc, #332]	; (8002744 <HAL_GPIO_Init+0x340>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d019      	beq.n	800262e <HAL_GPIO_Init+0x22a>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a52      	ldr	r2, [pc, #328]	; (8002748 <HAL_GPIO_Init+0x344>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d013      	beq.n	800262a <HAL_GPIO_Init+0x226>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a51      	ldr	r2, [pc, #324]	; (800274c <HAL_GPIO_Init+0x348>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d00d      	beq.n	8002626 <HAL_GPIO_Init+0x222>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a50      	ldr	r2, [pc, #320]	; (8002750 <HAL_GPIO_Init+0x34c>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d007      	beq.n	8002622 <HAL_GPIO_Init+0x21e>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a4f      	ldr	r2, [pc, #316]	; (8002754 <HAL_GPIO_Init+0x350>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d101      	bne.n	800261e <HAL_GPIO_Init+0x21a>
 800261a:	2309      	movs	r3, #9
 800261c:	e012      	b.n	8002644 <HAL_GPIO_Init+0x240>
 800261e:	230a      	movs	r3, #10
 8002620:	e010      	b.n	8002644 <HAL_GPIO_Init+0x240>
 8002622:	2308      	movs	r3, #8
 8002624:	e00e      	b.n	8002644 <HAL_GPIO_Init+0x240>
 8002626:	2307      	movs	r3, #7
 8002628:	e00c      	b.n	8002644 <HAL_GPIO_Init+0x240>
 800262a:	2306      	movs	r3, #6
 800262c:	e00a      	b.n	8002644 <HAL_GPIO_Init+0x240>
 800262e:	2305      	movs	r3, #5
 8002630:	e008      	b.n	8002644 <HAL_GPIO_Init+0x240>
 8002632:	2304      	movs	r3, #4
 8002634:	e006      	b.n	8002644 <HAL_GPIO_Init+0x240>
 8002636:	2303      	movs	r3, #3
 8002638:	e004      	b.n	8002644 <HAL_GPIO_Init+0x240>
 800263a:	2302      	movs	r3, #2
 800263c:	e002      	b.n	8002644 <HAL_GPIO_Init+0x240>
 800263e:	2301      	movs	r3, #1
 8002640:	e000      	b.n	8002644 <HAL_GPIO_Init+0x240>
 8002642:	2300      	movs	r3, #0
 8002644:	69fa      	ldr	r2, [r7, #28]
 8002646:	f002 0203 	and.w	r2, r2, #3
 800264a:	0092      	lsls	r2, r2, #2
 800264c:	4093      	lsls	r3, r2
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	4313      	orrs	r3, r2
 8002652:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002654:	4935      	ldr	r1, [pc, #212]	; (800272c <HAL_GPIO_Init+0x328>)
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	089b      	lsrs	r3, r3, #2
 800265a:	3302      	adds	r3, #2
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002662:	4b3d      	ldr	r3, [pc, #244]	; (8002758 <HAL_GPIO_Init+0x354>)
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	43db      	mvns	r3, r3
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	4013      	ands	r3, r2
 8002670:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d003      	beq.n	8002686 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800267e:	69ba      	ldr	r2, [r7, #24]
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	4313      	orrs	r3, r2
 8002684:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002686:	4a34      	ldr	r2, [pc, #208]	; (8002758 <HAL_GPIO_Init+0x354>)
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800268c:	4b32      	ldr	r3, [pc, #200]	; (8002758 <HAL_GPIO_Init+0x354>)
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	43db      	mvns	r3, r3
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	4013      	ands	r3, r2
 800269a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d003      	beq.n	80026b0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026b0:	4a29      	ldr	r2, [pc, #164]	; (8002758 <HAL_GPIO_Init+0x354>)
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026b6:	4b28      	ldr	r3, [pc, #160]	; (8002758 <HAL_GPIO_Init+0x354>)
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	43db      	mvns	r3, r3
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	4013      	ands	r3, r2
 80026c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d003      	beq.n	80026da <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80026d2:	69ba      	ldr	r2, [r7, #24]
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026da:	4a1f      	ldr	r2, [pc, #124]	; (8002758 <HAL_GPIO_Init+0x354>)
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026e0:	4b1d      	ldr	r3, [pc, #116]	; (8002758 <HAL_GPIO_Init+0x354>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	43db      	mvns	r3, r3
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	4013      	ands	r3, r2
 80026ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d003      	beq.n	8002704 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	4313      	orrs	r3, r2
 8002702:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002704:	4a14      	ldr	r2, [pc, #80]	; (8002758 <HAL_GPIO_Init+0x354>)
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	3301      	adds	r3, #1
 800270e:	61fb      	str	r3, [r7, #28]
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	2b0f      	cmp	r3, #15
 8002714:	f67f ae84 	bls.w	8002420 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002718:	bf00      	nop
 800271a:	bf00      	nop
 800271c:	3724      	adds	r7, #36	; 0x24
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	40023800 	.word	0x40023800
 800272c:	40013800 	.word	0x40013800
 8002730:	40020000 	.word	0x40020000
 8002734:	40020400 	.word	0x40020400
 8002738:	40020800 	.word	0x40020800
 800273c:	40020c00 	.word	0x40020c00
 8002740:	40021000 	.word	0x40021000
 8002744:	40021400 	.word	0x40021400
 8002748:	40021800 	.word	0x40021800
 800274c:	40021c00 	.word	0x40021c00
 8002750:	40022000 	.word	0x40022000
 8002754:	40022400 	.word	0x40022400
 8002758:	40013c00 	.word	0x40013c00

0800275c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	460b      	mov	r3, r1
 8002766:	807b      	strh	r3, [r7, #2]
 8002768:	4613      	mov	r3, r2
 800276a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800276c:	787b      	ldrb	r3, [r7, #1]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d003      	beq.n	800277a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002772:	887a      	ldrh	r2, [r7, #2]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002778:	e003      	b.n	8002782 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800277a:	887b      	ldrh	r3, [r7, #2]
 800277c:	041a      	lsls	r2, r3, #16
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	619a      	str	r2, [r3, #24]
}
 8002782:	bf00      	nop
 8002784:	370c      	adds	r7, #12
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr

0800278e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800278e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002790:	b08f      	sub	sp, #60	; 0x3c
 8002792:	af0a      	add	r7, sp, #40	; 0x28
 8002794:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d101      	bne.n	80027a0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e10f      	b.n	80029c0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d106      	bne.n	80027c0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f7ff f800 	bl	80017c0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2203      	movs	r2, #3
 80027c4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d102      	bne.n	80027da <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4618      	mov	r0, r3
 80027e0:	f002 f96f 	bl	8004ac2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	603b      	str	r3, [r7, #0]
 80027ea:	687e      	ldr	r6, [r7, #4]
 80027ec:	466d      	mov	r5, sp
 80027ee:	f106 0410 	add.w	r4, r6, #16
 80027f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80027fe:	e885 0003 	stmia.w	r5, {r0, r1}
 8002802:	1d33      	adds	r3, r6, #4
 8002804:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002806:	6838      	ldr	r0, [r7, #0]
 8002808:	f002 f8fa 	bl	8004a00 <USB_CoreInit>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d005      	beq.n	800281e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2202      	movs	r2, #2
 8002816:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e0d0      	b.n	80029c0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	2100      	movs	r1, #0
 8002824:	4618      	mov	r0, r3
 8002826:	f002 f95d 	bl	8004ae4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800282a:	2300      	movs	r3, #0
 800282c:	73fb      	strb	r3, [r7, #15]
 800282e:	e04a      	b.n	80028c6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002830:	7bfa      	ldrb	r2, [r7, #15]
 8002832:	6879      	ldr	r1, [r7, #4]
 8002834:	4613      	mov	r3, r2
 8002836:	00db      	lsls	r3, r3, #3
 8002838:	4413      	add	r3, r2
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	440b      	add	r3, r1
 800283e:	333d      	adds	r3, #61	; 0x3d
 8002840:	2201      	movs	r2, #1
 8002842:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002844:	7bfa      	ldrb	r2, [r7, #15]
 8002846:	6879      	ldr	r1, [r7, #4]
 8002848:	4613      	mov	r3, r2
 800284a:	00db      	lsls	r3, r3, #3
 800284c:	4413      	add	r3, r2
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	440b      	add	r3, r1
 8002852:	333c      	adds	r3, #60	; 0x3c
 8002854:	7bfa      	ldrb	r2, [r7, #15]
 8002856:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002858:	7bfa      	ldrb	r2, [r7, #15]
 800285a:	7bfb      	ldrb	r3, [r7, #15]
 800285c:	b298      	uxth	r0, r3
 800285e:	6879      	ldr	r1, [r7, #4]
 8002860:	4613      	mov	r3, r2
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	4413      	add	r3, r2
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	440b      	add	r3, r1
 800286a:	3344      	adds	r3, #68	; 0x44
 800286c:	4602      	mov	r2, r0
 800286e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002870:	7bfa      	ldrb	r2, [r7, #15]
 8002872:	6879      	ldr	r1, [r7, #4]
 8002874:	4613      	mov	r3, r2
 8002876:	00db      	lsls	r3, r3, #3
 8002878:	4413      	add	r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	440b      	add	r3, r1
 800287e:	3340      	adds	r3, #64	; 0x40
 8002880:	2200      	movs	r2, #0
 8002882:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002884:	7bfa      	ldrb	r2, [r7, #15]
 8002886:	6879      	ldr	r1, [r7, #4]
 8002888:	4613      	mov	r3, r2
 800288a:	00db      	lsls	r3, r3, #3
 800288c:	4413      	add	r3, r2
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	440b      	add	r3, r1
 8002892:	3348      	adds	r3, #72	; 0x48
 8002894:	2200      	movs	r2, #0
 8002896:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002898:	7bfa      	ldrb	r2, [r7, #15]
 800289a:	6879      	ldr	r1, [r7, #4]
 800289c:	4613      	mov	r3, r2
 800289e:	00db      	lsls	r3, r3, #3
 80028a0:	4413      	add	r3, r2
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	440b      	add	r3, r1
 80028a6:	334c      	adds	r3, #76	; 0x4c
 80028a8:	2200      	movs	r2, #0
 80028aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80028ac:	7bfa      	ldrb	r2, [r7, #15]
 80028ae:	6879      	ldr	r1, [r7, #4]
 80028b0:	4613      	mov	r3, r2
 80028b2:	00db      	lsls	r3, r3, #3
 80028b4:	4413      	add	r3, r2
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	440b      	add	r3, r1
 80028ba:	3354      	adds	r3, #84	; 0x54
 80028bc:	2200      	movs	r2, #0
 80028be:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028c0:	7bfb      	ldrb	r3, [r7, #15]
 80028c2:	3301      	adds	r3, #1
 80028c4:	73fb      	strb	r3, [r7, #15]
 80028c6:	7bfa      	ldrb	r2, [r7, #15]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d3af      	bcc.n	8002830 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028d0:	2300      	movs	r3, #0
 80028d2:	73fb      	strb	r3, [r7, #15]
 80028d4:	e044      	b.n	8002960 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80028d6:	7bfa      	ldrb	r2, [r7, #15]
 80028d8:	6879      	ldr	r1, [r7, #4]
 80028da:	4613      	mov	r3, r2
 80028dc:	00db      	lsls	r3, r3, #3
 80028de:	4413      	add	r3, r2
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	440b      	add	r3, r1
 80028e4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80028e8:	2200      	movs	r2, #0
 80028ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80028ec:	7bfa      	ldrb	r2, [r7, #15]
 80028ee:	6879      	ldr	r1, [r7, #4]
 80028f0:	4613      	mov	r3, r2
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	4413      	add	r3, r2
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	440b      	add	r3, r1
 80028fa:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80028fe:	7bfa      	ldrb	r2, [r7, #15]
 8002900:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002902:	7bfa      	ldrb	r2, [r7, #15]
 8002904:	6879      	ldr	r1, [r7, #4]
 8002906:	4613      	mov	r3, r2
 8002908:	00db      	lsls	r3, r3, #3
 800290a:	4413      	add	r3, r2
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	440b      	add	r3, r1
 8002910:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002914:	2200      	movs	r2, #0
 8002916:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002918:	7bfa      	ldrb	r2, [r7, #15]
 800291a:	6879      	ldr	r1, [r7, #4]
 800291c:	4613      	mov	r3, r2
 800291e:	00db      	lsls	r3, r3, #3
 8002920:	4413      	add	r3, r2
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	440b      	add	r3, r1
 8002926:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800292a:	2200      	movs	r2, #0
 800292c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800292e:	7bfa      	ldrb	r2, [r7, #15]
 8002930:	6879      	ldr	r1, [r7, #4]
 8002932:	4613      	mov	r3, r2
 8002934:	00db      	lsls	r3, r3, #3
 8002936:	4413      	add	r3, r2
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	440b      	add	r3, r1
 800293c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002940:	2200      	movs	r2, #0
 8002942:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002944:	7bfa      	ldrb	r2, [r7, #15]
 8002946:	6879      	ldr	r1, [r7, #4]
 8002948:	4613      	mov	r3, r2
 800294a:	00db      	lsls	r3, r3, #3
 800294c:	4413      	add	r3, r2
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	440b      	add	r3, r1
 8002952:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002956:	2200      	movs	r2, #0
 8002958:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800295a:	7bfb      	ldrb	r3, [r7, #15]
 800295c:	3301      	adds	r3, #1
 800295e:	73fb      	strb	r3, [r7, #15]
 8002960:	7bfa      	ldrb	r2, [r7, #15]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	429a      	cmp	r2, r3
 8002968:	d3b5      	bcc.n	80028d6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	603b      	str	r3, [r7, #0]
 8002970:	687e      	ldr	r6, [r7, #4]
 8002972:	466d      	mov	r5, sp
 8002974:	f106 0410 	add.w	r4, r6, #16
 8002978:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800297a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800297c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800297e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002980:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002984:	e885 0003 	stmia.w	r5, {r0, r1}
 8002988:	1d33      	adds	r3, r6, #4
 800298a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800298c:	6838      	ldr	r0, [r7, #0]
 800298e:	f002 f8f5 	bl	8004b7c <USB_DevInit>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d005      	beq.n	80029a4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2202      	movs	r2, #2
 800299c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e00d      	b.n	80029c0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4618      	mov	r0, r3
 80029ba:	f002 fac0 	bl	8004f3e <USB_DevDisconnect>

  return HAL_OK;
 80029be:	2300      	movs	r3, #0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3714      	adds	r7, #20
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080029c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b086      	sub	sp, #24
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d101      	bne.n	80029da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e267      	b.n	8002eaa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0301 	and.w	r3, r3, #1
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d075      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029e6:	4b88      	ldr	r3, [pc, #544]	; (8002c08 <HAL_RCC_OscConfig+0x240>)
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	f003 030c 	and.w	r3, r3, #12
 80029ee:	2b04      	cmp	r3, #4
 80029f0:	d00c      	beq.n	8002a0c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029f2:	4b85      	ldr	r3, [pc, #532]	; (8002c08 <HAL_RCC_OscConfig+0x240>)
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029fa:	2b08      	cmp	r3, #8
 80029fc:	d112      	bne.n	8002a24 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029fe:	4b82      	ldr	r3, [pc, #520]	; (8002c08 <HAL_RCC_OscConfig+0x240>)
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a0a:	d10b      	bne.n	8002a24 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a0c:	4b7e      	ldr	r3, [pc, #504]	; (8002c08 <HAL_RCC_OscConfig+0x240>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d05b      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x108>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d157      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e242      	b.n	8002eaa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a2c:	d106      	bne.n	8002a3c <HAL_RCC_OscConfig+0x74>
 8002a2e:	4b76      	ldr	r3, [pc, #472]	; (8002c08 <HAL_RCC_OscConfig+0x240>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a75      	ldr	r2, [pc, #468]	; (8002c08 <HAL_RCC_OscConfig+0x240>)
 8002a34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a38:	6013      	str	r3, [r2, #0]
 8002a3a:	e01d      	b.n	8002a78 <HAL_RCC_OscConfig+0xb0>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a44:	d10c      	bne.n	8002a60 <HAL_RCC_OscConfig+0x98>
 8002a46:	4b70      	ldr	r3, [pc, #448]	; (8002c08 <HAL_RCC_OscConfig+0x240>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a6f      	ldr	r2, [pc, #444]	; (8002c08 <HAL_RCC_OscConfig+0x240>)
 8002a4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a50:	6013      	str	r3, [r2, #0]
 8002a52:	4b6d      	ldr	r3, [pc, #436]	; (8002c08 <HAL_RCC_OscConfig+0x240>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a6c      	ldr	r2, [pc, #432]	; (8002c08 <HAL_RCC_OscConfig+0x240>)
 8002a58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a5c:	6013      	str	r3, [r2, #0]
 8002a5e:	e00b      	b.n	8002a78 <HAL_RCC_OscConfig+0xb0>
 8002a60:	4b69      	ldr	r3, [pc, #420]	; (8002c08 <HAL_RCC_OscConfig+0x240>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a68      	ldr	r2, [pc, #416]	; (8002c08 <HAL_RCC_OscConfig+0x240>)
 8002a66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a6a:	6013      	str	r3, [r2, #0]
 8002a6c:	4b66      	ldr	r3, [pc, #408]	; (8002c08 <HAL_RCC_OscConfig+0x240>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a65      	ldr	r2, [pc, #404]	; (8002c08 <HAL_RCC_OscConfig+0x240>)
 8002a72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d013      	beq.n	8002aa8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a80:	f7ff f856 	bl	8001b30 <HAL_GetTick>
 8002a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a86:	e008      	b.n	8002a9a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a88:	f7ff f852 	bl	8001b30 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	2b64      	cmp	r3, #100	; 0x64
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e207      	b.n	8002eaa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a9a:	4b5b      	ldr	r3, [pc, #364]	; (8002c08 <HAL_RCC_OscConfig+0x240>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d0f0      	beq.n	8002a88 <HAL_RCC_OscConfig+0xc0>
 8002aa6:	e014      	b.n	8002ad2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa8:	f7ff f842 	bl	8001b30 <HAL_GetTick>
 8002aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aae:	e008      	b.n	8002ac2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ab0:	f7ff f83e 	bl	8001b30 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b64      	cmp	r3, #100	; 0x64
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e1f3      	b.n	8002eaa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ac2:	4b51      	ldr	r3, [pc, #324]	; (8002c08 <HAL_RCC_OscConfig+0x240>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d1f0      	bne.n	8002ab0 <HAL_RCC_OscConfig+0xe8>
 8002ace:	e000      	b.n	8002ad2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ad0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0302 	and.w	r3, r3, #2
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d063      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ade:	4b4a      	ldr	r3, [pc, #296]	; (8002c08 <HAL_RCC_OscConfig+0x240>)
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f003 030c 	and.w	r3, r3, #12
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d00b      	beq.n	8002b02 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002aea:	4b47      	ldr	r3, [pc, #284]	; (8002c08 <HAL_RCC_OscConfig+0x240>)
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002af2:	2b08      	cmp	r3, #8
 8002af4:	d11c      	bne.n	8002b30 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002af6:	4b44      	ldr	r3, [pc, #272]	; (8002c08 <HAL_RCC_OscConfig+0x240>)
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d116      	bne.n	8002b30 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b02:	4b41      	ldr	r3, [pc, #260]	; (8002c08 <HAL_RCC_OscConfig+0x240>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0302 	and.w	r3, r3, #2
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d005      	beq.n	8002b1a <HAL_RCC_OscConfig+0x152>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d001      	beq.n	8002b1a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e1c7      	b.n	8002eaa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b1a:	4b3b      	ldr	r3, [pc, #236]	; (8002c08 <HAL_RCC_OscConfig+0x240>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	00db      	lsls	r3, r3, #3
 8002b28:	4937      	ldr	r1, [pc, #220]	; (8002c08 <HAL_RCC_OscConfig+0x240>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b2e:	e03a      	b.n	8002ba6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d020      	beq.n	8002b7a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b38:	4b34      	ldr	r3, [pc, #208]	; (8002c0c <HAL_RCC_OscConfig+0x244>)
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b3e:	f7fe fff7 	bl	8001b30 <HAL_GetTick>
 8002b42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b44:	e008      	b.n	8002b58 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b46:	f7fe fff3 	bl	8001b30 <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d901      	bls.n	8002b58 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	e1a8      	b.n	8002eaa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b58:	4b2b      	ldr	r3, [pc, #172]	; (8002c08 <HAL_RCC_OscConfig+0x240>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0302 	and.w	r3, r3, #2
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d0f0      	beq.n	8002b46 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b64:	4b28      	ldr	r3, [pc, #160]	; (8002c08 <HAL_RCC_OscConfig+0x240>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	691b      	ldr	r3, [r3, #16]
 8002b70:	00db      	lsls	r3, r3, #3
 8002b72:	4925      	ldr	r1, [pc, #148]	; (8002c08 <HAL_RCC_OscConfig+0x240>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	600b      	str	r3, [r1, #0]
 8002b78:	e015      	b.n	8002ba6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b7a:	4b24      	ldr	r3, [pc, #144]	; (8002c0c <HAL_RCC_OscConfig+0x244>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b80:	f7fe ffd6 	bl	8001b30 <HAL_GetTick>
 8002b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b86:	e008      	b.n	8002b9a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b88:	f7fe ffd2 	bl	8001b30 <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d901      	bls.n	8002b9a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e187      	b.n	8002eaa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b9a:	4b1b      	ldr	r3, [pc, #108]	; (8002c08 <HAL_RCC_OscConfig+0x240>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d1f0      	bne.n	8002b88 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0308 	and.w	r3, r3, #8
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d036      	beq.n	8002c20 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	695b      	ldr	r3, [r3, #20]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d016      	beq.n	8002be8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bba:	4b15      	ldr	r3, [pc, #84]	; (8002c10 <HAL_RCC_OscConfig+0x248>)
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bc0:	f7fe ffb6 	bl	8001b30 <HAL_GetTick>
 8002bc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bc6:	e008      	b.n	8002bda <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bc8:	f7fe ffb2 	bl	8001b30 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d901      	bls.n	8002bda <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e167      	b.n	8002eaa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bda:	4b0b      	ldr	r3, [pc, #44]	; (8002c08 <HAL_RCC_OscConfig+0x240>)
 8002bdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bde:	f003 0302 	and.w	r3, r3, #2
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d0f0      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x200>
 8002be6:	e01b      	b.n	8002c20 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002be8:	4b09      	ldr	r3, [pc, #36]	; (8002c10 <HAL_RCC_OscConfig+0x248>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bee:	f7fe ff9f 	bl	8001b30 <HAL_GetTick>
 8002bf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bf4:	e00e      	b.n	8002c14 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bf6:	f7fe ff9b 	bl	8001b30 <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d907      	bls.n	8002c14 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	e150      	b.n	8002eaa <HAL_RCC_OscConfig+0x4e2>
 8002c08:	40023800 	.word	0x40023800
 8002c0c:	42470000 	.word	0x42470000
 8002c10:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c14:	4b88      	ldr	r3, [pc, #544]	; (8002e38 <HAL_RCC_OscConfig+0x470>)
 8002c16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c18:	f003 0302 	and.w	r3, r3, #2
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d1ea      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0304 	and.w	r3, r3, #4
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	f000 8097 	beq.w	8002d5c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c32:	4b81      	ldr	r3, [pc, #516]	; (8002e38 <HAL_RCC_OscConfig+0x470>)
 8002c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d10f      	bne.n	8002c5e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c3e:	2300      	movs	r3, #0
 8002c40:	60bb      	str	r3, [r7, #8]
 8002c42:	4b7d      	ldr	r3, [pc, #500]	; (8002e38 <HAL_RCC_OscConfig+0x470>)
 8002c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c46:	4a7c      	ldr	r2, [pc, #496]	; (8002e38 <HAL_RCC_OscConfig+0x470>)
 8002c48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c4c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c4e:	4b7a      	ldr	r3, [pc, #488]	; (8002e38 <HAL_RCC_OscConfig+0x470>)
 8002c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c56:	60bb      	str	r3, [r7, #8]
 8002c58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c5e:	4b77      	ldr	r3, [pc, #476]	; (8002e3c <HAL_RCC_OscConfig+0x474>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d118      	bne.n	8002c9c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c6a:	4b74      	ldr	r3, [pc, #464]	; (8002e3c <HAL_RCC_OscConfig+0x474>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a73      	ldr	r2, [pc, #460]	; (8002e3c <HAL_RCC_OscConfig+0x474>)
 8002c70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c76:	f7fe ff5b 	bl	8001b30 <HAL_GetTick>
 8002c7a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c7c:	e008      	b.n	8002c90 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c7e:	f7fe ff57 	bl	8001b30 <HAL_GetTick>
 8002c82:	4602      	mov	r2, r0
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d901      	bls.n	8002c90 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e10c      	b.n	8002eaa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c90:	4b6a      	ldr	r3, [pc, #424]	; (8002e3c <HAL_RCC_OscConfig+0x474>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d0f0      	beq.n	8002c7e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d106      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x2ea>
 8002ca4:	4b64      	ldr	r3, [pc, #400]	; (8002e38 <HAL_RCC_OscConfig+0x470>)
 8002ca6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca8:	4a63      	ldr	r2, [pc, #396]	; (8002e38 <HAL_RCC_OscConfig+0x470>)
 8002caa:	f043 0301 	orr.w	r3, r3, #1
 8002cae:	6713      	str	r3, [r2, #112]	; 0x70
 8002cb0:	e01c      	b.n	8002cec <HAL_RCC_OscConfig+0x324>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	2b05      	cmp	r3, #5
 8002cb8:	d10c      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x30c>
 8002cba:	4b5f      	ldr	r3, [pc, #380]	; (8002e38 <HAL_RCC_OscConfig+0x470>)
 8002cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cbe:	4a5e      	ldr	r2, [pc, #376]	; (8002e38 <HAL_RCC_OscConfig+0x470>)
 8002cc0:	f043 0304 	orr.w	r3, r3, #4
 8002cc4:	6713      	str	r3, [r2, #112]	; 0x70
 8002cc6:	4b5c      	ldr	r3, [pc, #368]	; (8002e38 <HAL_RCC_OscConfig+0x470>)
 8002cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cca:	4a5b      	ldr	r2, [pc, #364]	; (8002e38 <HAL_RCC_OscConfig+0x470>)
 8002ccc:	f043 0301 	orr.w	r3, r3, #1
 8002cd0:	6713      	str	r3, [r2, #112]	; 0x70
 8002cd2:	e00b      	b.n	8002cec <HAL_RCC_OscConfig+0x324>
 8002cd4:	4b58      	ldr	r3, [pc, #352]	; (8002e38 <HAL_RCC_OscConfig+0x470>)
 8002cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd8:	4a57      	ldr	r2, [pc, #348]	; (8002e38 <HAL_RCC_OscConfig+0x470>)
 8002cda:	f023 0301 	bic.w	r3, r3, #1
 8002cde:	6713      	str	r3, [r2, #112]	; 0x70
 8002ce0:	4b55      	ldr	r3, [pc, #340]	; (8002e38 <HAL_RCC_OscConfig+0x470>)
 8002ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce4:	4a54      	ldr	r2, [pc, #336]	; (8002e38 <HAL_RCC_OscConfig+0x470>)
 8002ce6:	f023 0304 	bic.w	r3, r3, #4
 8002cea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d015      	beq.n	8002d20 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cf4:	f7fe ff1c 	bl	8001b30 <HAL_GetTick>
 8002cf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cfa:	e00a      	b.n	8002d12 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cfc:	f7fe ff18 	bl	8001b30 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d901      	bls.n	8002d12 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e0cb      	b.n	8002eaa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d12:	4b49      	ldr	r3, [pc, #292]	; (8002e38 <HAL_RCC_OscConfig+0x470>)
 8002d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d16:	f003 0302 	and.w	r3, r3, #2
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d0ee      	beq.n	8002cfc <HAL_RCC_OscConfig+0x334>
 8002d1e:	e014      	b.n	8002d4a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d20:	f7fe ff06 	bl	8001b30 <HAL_GetTick>
 8002d24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d26:	e00a      	b.n	8002d3e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d28:	f7fe ff02 	bl	8001b30 <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e0b5      	b.n	8002eaa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d3e:	4b3e      	ldr	r3, [pc, #248]	; (8002e38 <HAL_RCC_OscConfig+0x470>)
 8002d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d42:	f003 0302 	and.w	r3, r3, #2
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d1ee      	bne.n	8002d28 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d4a:	7dfb      	ldrb	r3, [r7, #23]
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d105      	bne.n	8002d5c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d50:	4b39      	ldr	r3, [pc, #228]	; (8002e38 <HAL_RCC_OscConfig+0x470>)
 8002d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d54:	4a38      	ldr	r2, [pc, #224]	; (8002e38 <HAL_RCC_OscConfig+0x470>)
 8002d56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d5a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	699b      	ldr	r3, [r3, #24]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	f000 80a1 	beq.w	8002ea8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d66:	4b34      	ldr	r3, [pc, #208]	; (8002e38 <HAL_RCC_OscConfig+0x470>)
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f003 030c 	and.w	r3, r3, #12
 8002d6e:	2b08      	cmp	r3, #8
 8002d70:	d05c      	beq.n	8002e2c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	699b      	ldr	r3, [r3, #24]
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d141      	bne.n	8002dfe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d7a:	4b31      	ldr	r3, [pc, #196]	; (8002e40 <HAL_RCC_OscConfig+0x478>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d80:	f7fe fed6 	bl	8001b30 <HAL_GetTick>
 8002d84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d86:	e008      	b.n	8002d9a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d88:	f7fe fed2 	bl	8001b30 <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e087      	b.n	8002eaa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d9a:	4b27      	ldr	r3, [pc, #156]	; (8002e38 <HAL_RCC_OscConfig+0x470>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d1f0      	bne.n	8002d88 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	69da      	ldr	r2, [r3, #28]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a1b      	ldr	r3, [r3, #32]
 8002dae:	431a      	orrs	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db4:	019b      	lsls	r3, r3, #6
 8002db6:	431a      	orrs	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dbc:	085b      	lsrs	r3, r3, #1
 8002dbe:	3b01      	subs	r3, #1
 8002dc0:	041b      	lsls	r3, r3, #16
 8002dc2:	431a      	orrs	r2, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc8:	061b      	lsls	r3, r3, #24
 8002dca:	491b      	ldr	r1, [pc, #108]	; (8002e38 <HAL_RCC_OscConfig+0x470>)
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dd0:	4b1b      	ldr	r3, [pc, #108]	; (8002e40 <HAL_RCC_OscConfig+0x478>)
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd6:	f7fe feab 	bl	8001b30 <HAL_GetTick>
 8002dda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ddc:	e008      	b.n	8002df0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dde:	f7fe fea7 	bl	8001b30 <HAL_GetTick>
 8002de2:	4602      	mov	r2, r0
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d901      	bls.n	8002df0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e05c      	b.n	8002eaa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002df0:	4b11      	ldr	r3, [pc, #68]	; (8002e38 <HAL_RCC_OscConfig+0x470>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d0f0      	beq.n	8002dde <HAL_RCC_OscConfig+0x416>
 8002dfc:	e054      	b.n	8002ea8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dfe:	4b10      	ldr	r3, [pc, #64]	; (8002e40 <HAL_RCC_OscConfig+0x478>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e04:	f7fe fe94 	bl	8001b30 <HAL_GetTick>
 8002e08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e0a:	e008      	b.n	8002e1e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e0c:	f7fe fe90 	bl	8001b30 <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d901      	bls.n	8002e1e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e045      	b.n	8002eaa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e1e:	4b06      	ldr	r3, [pc, #24]	; (8002e38 <HAL_RCC_OscConfig+0x470>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d1f0      	bne.n	8002e0c <HAL_RCC_OscConfig+0x444>
 8002e2a:	e03d      	b.n	8002ea8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	699b      	ldr	r3, [r3, #24]
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d107      	bne.n	8002e44 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e038      	b.n	8002eaa <HAL_RCC_OscConfig+0x4e2>
 8002e38:	40023800 	.word	0x40023800
 8002e3c:	40007000 	.word	0x40007000
 8002e40:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e44:	4b1b      	ldr	r3, [pc, #108]	; (8002eb4 <HAL_RCC_OscConfig+0x4ec>)
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	699b      	ldr	r3, [r3, #24]
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d028      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d121      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d11a      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e6e:	68fa      	ldr	r2, [r7, #12]
 8002e70:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e74:	4013      	ands	r3, r2
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e7a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d111      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e8a:	085b      	lsrs	r3, r3, #1
 8002e8c:	3b01      	subs	r3, #1
 8002e8e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d107      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e9e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d001      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e000      	b.n	8002eaa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3718      	adds	r7, #24
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	40023800 	.word	0x40023800

08002eb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d101      	bne.n	8002ecc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e0cc      	b.n	8003066 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ecc:	4b68      	ldr	r3, [pc, #416]	; (8003070 <HAL_RCC_ClockConfig+0x1b8>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 030f 	and.w	r3, r3, #15
 8002ed4:	683a      	ldr	r2, [r7, #0]
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d90c      	bls.n	8002ef4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eda:	4b65      	ldr	r3, [pc, #404]	; (8003070 <HAL_RCC_ClockConfig+0x1b8>)
 8002edc:	683a      	ldr	r2, [r7, #0]
 8002ede:	b2d2      	uxtb	r2, r2
 8002ee0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ee2:	4b63      	ldr	r3, [pc, #396]	; (8003070 <HAL_RCC_ClockConfig+0x1b8>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 030f 	and.w	r3, r3, #15
 8002eea:	683a      	ldr	r2, [r7, #0]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d001      	beq.n	8002ef4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e0b8      	b.n	8003066 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0302 	and.w	r3, r3, #2
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d020      	beq.n	8002f42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0304 	and.w	r3, r3, #4
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d005      	beq.n	8002f18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f0c:	4b59      	ldr	r3, [pc, #356]	; (8003074 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	4a58      	ldr	r2, [pc, #352]	; (8003074 <HAL_RCC_ClockConfig+0x1bc>)
 8002f12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f16:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0308 	and.w	r3, r3, #8
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d005      	beq.n	8002f30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f24:	4b53      	ldr	r3, [pc, #332]	; (8003074 <HAL_RCC_ClockConfig+0x1bc>)
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	4a52      	ldr	r2, [pc, #328]	; (8003074 <HAL_RCC_ClockConfig+0x1bc>)
 8002f2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f30:	4b50      	ldr	r3, [pc, #320]	; (8003074 <HAL_RCC_ClockConfig+0x1bc>)
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	494d      	ldr	r1, [pc, #308]	; (8003074 <HAL_RCC_ClockConfig+0x1bc>)
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0301 	and.w	r3, r3, #1
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d044      	beq.n	8002fd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d107      	bne.n	8002f66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f56:	4b47      	ldr	r3, [pc, #284]	; (8003074 <HAL_RCC_ClockConfig+0x1bc>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d119      	bne.n	8002f96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e07f      	b.n	8003066 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d003      	beq.n	8002f76 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f72:	2b03      	cmp	r3, #3
 8002f74:	d107      	bne.n	8002f86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f76:	4b3f      	ldr	r3, [pc, #252]	; (8003074 <HAL_RCC_ClockConfig+0x1bc>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d109      	bne.n	8002f96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e06f      	b.n	8003066 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f86:	4b3b      	ldr	r3, [pc, #236]	; (8003074 <HAL_RCC_ClockConfig+0x1bc>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0302 	and.w	r3, r3, #2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d101      	bne.n	8002f96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e067      	b.n	8003066 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f96:	4b37      	ldr	r3, [pc, #220]	; (8003074 <HAL_RCC_ClockConfig+0x1bc>)
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f023 0203 	bic.w	r2, r3, #3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	4934      	ldr	r1, [pc, #208]	; (8003074 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fa8:	f7fe fdc2 	bl	8001b30 <HAL_GetTick>
 8002fac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fae:	e00a      	b.n	8002fc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fb0:	f7fe fdbe 	bl	8001b30 <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d901      	bls.n	8002fc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e04f      	b.n	8003066 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fc6:	4b2b      	ldr	r3, [pc, #172]	; (8003074 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	f003 020c 	and.w	r2, r3, #12
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d1eb      	bne.n	8002fb0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fd8:	4b25      	ldr	r3, [pc, #148]	; (8003070 <HAL_RCC_ClockConfig+0x1b8>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 030f 	and.w	r3, r3, #15
 8002fe0:	683a      	ldr	r2, [r7, #0]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d20c      	bcs.n	8003000 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fe6:	4b22      	ldr	r3, [pc, #136]	; (8003070 <HAL_RCC_ClockConfig+0x1b8>)
 8002fe8:	683a      	ldr	r2, [r7, #0]
 8002fea:	b2d2      	uxtb	r2, r2
 8002fec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fee:	4b20      	ldr	r3, [pc, #128]	; (8003070 <HAL_RCC_ClockConfig+0x1b8>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 030f 	and.w	r3, r3, #15
 8002ff6:	683a      	ldr	r2, [r7, #0]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d001      	beq.n	8003000 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e032      	b.n	8003066 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0304 	and.w	r3, r3, #4
 8003008:	2b00      	cmp	r3, #0
 800300a:	d008      	beq.n	800301e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800300c:	4b19      	ldr	r3, [pc, #100]	; (8003074 <HAL_RCC_ClockConfig+0x1bc>)
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	4916      	ldr	r1, [pc, #88]	; (8003074 <HAL_RCC_ClockConfig+0x1bc>)
 800301a:	4313      	orrs	r3, r2
 800301c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0308 	and.w	r3, r3, #8
 8003026:	2b00      	cmp	r3, #0
 8003028:	d009      	beq.n	800303e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800302a:	4b12      	ldr	r3, [pc, #72]	; (8003074 <HAL_RCC_ClockConfig+0x1bc>)
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	00db      	lsls	r3, r3, #3
 8003038:	490e      	ldr	r1, [pc, #56]	; (8003074 <HAL_RCC_ClockConfig+0x1bc>)
 800303a:	4313      	orrs	r3, r2
 800303c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800303e:	f000 f821 	bl	8003084 <HAL_RCC_GetSysClockFreq>
 8003042:	4602      	mov	r2, r0
 8003044:	4b0b      	ldr	r3, [pc, #44]	; (8003074 <HAL_RCC_ClockConfig+0x1bc>)
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	091b      	lsrs	r3, r3, #4
 800304a:	f003 030f 	and.w	r3, r3, #15
 800304e:	490a      	ldr	r1, [pc, #40]	; (8003078 <HAL_RCC_ClockConfig+0x1c0>)
 8003050:	5ccb      	ldrb	r3, [r1, r3]
 8003052:	fa22 f303 	lsr.w	r3, r2, r3
 8003056:	4a09      	ldr	r2, [pc, #36]	; (800307c <HAL_RCC_ClockConfig+0x1c4>)
 8003058:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800305a:	4b09      	ldr	r3, [pc, #36]	; (8003080 <HAL_RCC_ClockConfig+0x1c8>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4618      	mov	r0, r3
 8003060:	f7fe fd22 	bl	8001aa8 <HAL_InitTick>

  return HAL_OK;
 8003064:	2300      	movs	r3, #0
}
 8003066:	4618      	mov	r0, r3
 8003068:	3710      	adds	r7, #16
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	40023c00 	.word	0x40023c00
 8003074:	40023800 	.word	0x40023800
 8003078:	080060a0 	.word	0x080060a0
 800307c:	20000000 	.word	0x20000000
 8003080:	20000004 	.word	0x20000004

08003084 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003084:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003088:	b094      	sub	sp, #80	; 0x50
 800308a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800308c:	2300      	movs	r3, #0
 800308e:	647b      	str	r3, [r7, #68]	; 0x44
 8003090:	2300      	movs	r3, #0
 8003092:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003094:	2300      	movs	r3, #0
 8003096:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003098:	2300      	movs	r3, #0
 800309a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800309c:	4b79      	ldr	r3, [pc, #484]	; (8003284 <HAL_RCC_GetSysClockFreq+0x200>)
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	f003 030c 	and.w	r3, r3, #12
 80030a4:	2b08      	cmp	r3, #8
 80030a6:	d00d      	beq.n	80030c4 <HAL_RCC_GetSysClockFreq+0x40>
 80030a8:	2b08      	cmp	r3, #8
 80030aa:	f200 80e1 	bhi.w	8003270 <HAL_RCC_GetSysClockFreq+0x1ec>
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d002      	beq.n	80030b8 <HAL_RCC_GetSysClockFreq+0x34>
 80030b2:	2b04      	cmp	r3, #4
 80030b4:	d003      	beq.n	80030be <HAL_RCC_GetSysClockFreq+0x3a>
 80030b6:	e0db      	b.n	8003270 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030b8:	4b73      	ldr	r3, [pc, #460]	; (8003288 <HAL_RCC_GetSysClockFreq+0x204>)
 80030ba:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80030bc:	e0db      	b.n	8003276 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030be:	4b73      	ldr	r3, [pc, #460]	; (800328c <HAL_RCC_GetSysClockFreq+0x208>)
 80030c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80030c2:	e0d8      	b.n	8003276 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030c4:	4b6f      	ldr	r3, [pc, #444]	; (8003284 <HAL_RCC_GetSysClockFreq+0x200>)
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030cc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030ce:	4b6d      	ldr	r3, [pc, #436]	; (8003284 <HAL_RCC_GetSysClockFreq+0x200>)
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d063      	beq.n	80031a2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030da:	4b6a      	ldr	r3, [pc, #424]	; (8003284 <HAL_RCC_GetSysClockFreq+0x200>)
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	099b      	lsrs	r3, r3, #6
 80030e0:	2200      	movs	r2, #0
 80030e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80030e4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80030e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030ec:	633b      	str	r3, [r7, #48]	; 0x30
 80030ee:	2300      	movs	r3, #0
 80030f0:	637b      	str	r3, [r7, #52]	; 0x34
 80030f2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80030f6:	4622      	mov	r2, r4
 80030f8:	462b      	mov	r3, r5
 80030fa:	f04f 0000 	mov.w	r0, #0
 80030fe:	f04f 0100 	mov.w	r1, #0
 8003102:	0159      	lsls	r1, r3, #5
 8003104:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003108:	0150      	lsls	r0, r2, #5
 800310a:	4602      	mov	r2, r0
 800310c:	460b      	mov	r3, r1
 800310e:	4621      	mov	r1, r4
 8003110:	1a51      	subs	r1, r2, r1
 8003112:	6139      	str	r1, [r7, #16]
 8003114:	4629      	mov	r1, r5
 8003116:	eb63 0301 	sbc.w	r3, r3, r1
 800311a:	617b      	str	r3, [r7, #20]
 800311c:	f04f 0200 	mov.w	r2, #0
 8003120:	f04f 0300 	mov.w	r3, #0
 8003124:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003128:	4659      	mov	r1, fp
 800312a:	018b      	lsls	r3, r1, #6
 800312c:	4651      	mov	r1, sl
 800312e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003132:	4651      	mov	r1, sl
 8003134:	018a      	lsls	r2, r1, #6
 8003136:	4651      	mov	r1, sl
 8003138:	ebb2 0801 	subs.w	r8, r2, r1
 800313c:	4659      	mov	r1, fp
 800313e:	eb63 0901 	sbc.w	r9, r3, r1
 8003142:	f04f 0200 	mov.w	r2, #0
 8003146:	f04f 0300 	mov.w	r3, #0
 800314a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800314e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003152:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003156:	4690      	mov	r8, r2
 8003158:	4699      	mov	r9, r3
 800315a:	4623      	mov	r3, r4
 800315c:	eb18 0303 	adds.w	r3, r8, r3
 8003160:	60bb      	str	r3, [r7, #8]
 8003162:	462b      	mov	r3, r5
 8003164:	eb49 0303 	adc.w	r3, r9, r3
 8003168:	60fb      	str	r3, [r7, #12]
 800316a:	f04f 0200 	mov.w	r2, #0
 800316e:	f04f 0300 	mov.w	r3, #0
 8003172:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003176:	4629      	mov	r1, r5
 8003178:	024b      	lsls	r3, r1, #9
 800317a:	4621      	mov	r1, r4
 800317c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003180:	4621      	mov	r1, r4
 8003182:	024a      	lsls	r2, r1, #9
 8003184:	4610      	mov	r0, r2
 8003186:	4619      	mov	r1, r3
 8003188:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800318a:	2200      	movs	r2, #0
 800318c:	62bb      	str	r3, [r7, #40]	; 0x28
 800318e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003190:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003194:	f7fd fc6a 	bl	8000a6c <__aeabi_uldivmod>
 8003198:	4602      	mov	r2, r0
 800319a:	460b      	mov	r3, r1
 800319c:	4613      	mov	r3, r2
 800319e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031a0:	e058      	b.n	8003254 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031a2:	4b38      	ldr	r3, [pc, #224]	; (8003284 <HAL_RCC_GetSysClockFreq+0x200>)
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	099b      	lsrs	r3, r3, #6
 80031a8:	2200      	movs	r2, #0
 80031aa:	4618      	mov	r0, r3
 80031ac:	4611      	mov	r1, r2
 80031ae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80031b2:	623b      	str	r3, [r7, #32]
 80031b4:	2300      	movs	r3, #0
 80031b6:	627b      	str	r3, [r7, #36]	; 0x24
 80031b8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80031bc:	4642      	mov	r2, r8
 80031be:	464b      	mov	r3, r9
 80031c0:	f04f 0000 	mov.w	r0, #0
 80031c4:	f04f 0100 	mov.w	r1, #0
 80031c8:	0159      	lsls	r1, r3, #5
 80031ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031ce:	0150      	lsls	r0, r2, #5
 80031d0:	4602      	mov	r2, r0
 80031d2:	460b      	mov	r3, r1
 80031d4:	4641      	mov	r1, r8
 80031d6:	ebb2 0a01 	subs.w	sl, r2, r1
 80031da:	4649      	mov	r1, r9
 80031dc:	eb63 0b01 	sbc.w	fp, r3, r1
 80031e0:	f04f 0200 	mov.w	r2, #0
 80031e4:	f04f 0300 	mov.w	r3, #0
 80031e8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80031ec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80031f0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80031f4:	ebb2 040a 	subs.w	r4, r2, sl
 80031f8:	eb63 050b 	sbc.w	r5, r3, fp
 80031fc:	f04f 0200 	mov.w	r2, #0
 8003200:	f04f 0300 	mov.w	r3, #0
 8003204:	00eb      	lsls	r3, r5, #3
 8003206:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800320a:	00e2      	lsls	r2, r4, #3
 800320c:	4614      	mov	r4, r2
 800320e:	461d      	mov	r5, r3
 8003210:	4643      	mov	r3, r8
 8003212:	18e3      	adds	r3, r4, r3
 8003214:	603b      	str	r3, [r7, #0]
 8003216:	464b      	mov	r3, r9
 8003218:	eb45 0303 	adc.w	r3, r5, r3
 800321c:	607b      	str	r3, [r7, #4]
 800321e:	f04f 0200 	mov.w	r2, #0
 8003222:	f04f 0300 	mov.w	r3, #0
 8003226:	e9d7 4500 	ldrd	r4, r5, [r7]
 800322a:	4629      	mov	r1, r5
 800322c:	028b      	lsls	r3, r1, #10
 800322e:	4621      	mov	r1, r4
 8003230:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003234:	4621      	mov	r1, r4
 8003236:	028a      	lsls	r2, r1, #10
 8003238:	4610      	mov	r0, r2
 800323a:	4619      	mov	r1, r3
 800323c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800323e:	2200      	movs	r2, #0
 8003240:	61bb      	str	r3, [r7, #24]
 8003242:	61fa      	str	r2, [r7, #28]
 8003244:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003248:	f7fd fc10 	bl	8000a6c <__aeabi_uldivmod>
 800324c:	4602      	mov	r2, r0
 800324e:	460b      	mov	r3, r1
 8003250:	4613      	mov	r3, r2
 8003252:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003254:	4b0b      	ldr	r3, [pc, #44]	; (8003284 <HAL_RCC_GetSysClockFreq+0x200>)
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	0c1b      	lsrs	r3, r3, #16
 800325a:	f003 0303 	and.w	r3, r3, #3
 800325e:	3301      	adds	r3, #1
 8003260:	005b      	lsls	r3, r3, #1
 8003262:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003264:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003266:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003268:	fbb2 f3f3 	udiv	r3, r2, r3
 800326c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800326e:	e002      	b.n	8003276 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003270:	4b05      	ldr	r3, [pc, #20]	; (8003288 <HAL_RCC_GetSysClockFreq+0x204>)
 8003272:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003274:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003276:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003278:	4618      	mov	r0, r3
 800327a:	3750      	adds	r7, #80	; 0x50
 800327c:	46bd      	mov	sp, r7
 800327e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003282:	bf00      	nop
 8003284:	40023800 	.word	0x40023800
 8003288:	00f42400 	.word	0x00f42400
 800328c:	007a1200 	.word	0x007a1200

08003290 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003290:	b480      	push	{r7}
 8003292:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003294:	4b03      	ldr	r3, [pc, #12]	; (80032a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003296:	681b      	ldr	r3, [r3, #0]
}
 8003298:	4618      	mov	r0, r3
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	20000000 	.word	0x20000000

080032a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80032ac:	f7ff fff0 	bl	8003290 <HAL_RCC_GetHCLKFreq>
 80032b0:	4602      	mov	r2, r0
 80032b2:	4b05      	ldr	r3, [pc, #20]	; (80032c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	0a9b      	lsrs	r3, r3, #10
 80032b8:	f003 0307 	and.w	r3, r3, #7
 80032bc:	4903      	ldr	r1, [pc, #12]	; (80032cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80032be:	5ccb      	ldrb	r3, [r1, r3]
 80032c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	40023800 	.word	0x40023800
 80032cc:	080060b0 	.word	0x080060b0

080032d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80032d4:	f7ff ffdc 	bl	8003290 <HAL_RCC_GetHCLKFreq>
 80032d8:	4602      	mov	r2, r0
 80032da:	4b05      	ldr	r3, [pc, #20]	; (80032f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	0b5b      	lsrs	r3, r3, #13
 80032e0:	f003 0307 	and.w	r3, r3, #7
 80032e4:	4903      	ldr	r1, [pc, #12]	; (80032f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032e6:	5ccb      	ldrb	r3, [r1, r3]
 80032e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	40023800 	.word	0x40023800
 80032f4:	080060b0 	.word	0x080060b0

080032f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d101      	bne.n	800330a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e041      	b.n	800338e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003310:	b2db      	uxtb	r3, r3
 8003312:	2b00      	cmp	r3, #0
 8003314:	d106      	bne.n	8003324 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f7fe f9b6 	bl	8001690 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2202      	movs	r2, #2
 8003328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	3304      	adds	r3, #4
 8003334:	4619      	mov	r1, r3
 8003336:	4610      	mov	r0, r2
 8003338:	f000 fc86 	bl	8003c48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3708      	adds	r7, #8
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}

08003396 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003396:	b580      	push	{r7, lr}
 8003398:	b082      	sub	sp, #8
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d101      	bne.n	80033a8 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e041      	b.n	800342c <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d106      	bne.n	80033c2 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f000 f839 	bl	8003434 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2202      	movs	r2, #2
 80033c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	3304      	adds	r3, #4
 80033d2:	4619      	mov	r1, r3
 80033d4:	4610      	mov	r0, r2
 80033d6:	f000 fc37 	bl	8003c48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2201      	movs	r2, #1
 80033de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2201      	movs	r2, #1
 80033e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2201      	movs	r2, #1
 80033ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2201      	movs	r2, #1
 80033f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2201      	movs	r2, #1
 80033fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2201      	movs	r2, #1
 8003406:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2201      	movs	r2, #1
 800340e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2201      	movs	r2, #1
 8003416:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2201      	movs	r2, #1
 800341e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2201      	movs	r2, #1
 8003426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800342a:	2300      	movs	r3, #0
}
 800342c:	4618      	mov	r0, r3
 800342e:	3708      	adds	r7, #8
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}

08003434 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800343c:	bf00      	nop
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr

08003448 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003452:	2300      	movs	r3, #0
 8003454:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d104      	bne.n	8003466 <HAL_TIM_IC_Start_IT+0x1e>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003462:	b2db      	uxtb	r3, r3
 8003464:	e013      	b.n	800348e <HAL_TIM_IC_Start_IT+0x46>
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	2b04      	cmp	r3, #4
 800346a:	d104      	bne.n	8003476 <HAL_TIM_IC_Start_IT+0x2e>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003472:	b2db      	uxtb	r3, r3
 8003474:	e00b      	b.n	800348e <HAL_TIM_IC_Start_IT+0x46>
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	2b08      	cmp	r3, #8
 800347a:	d104      	bne.n	8003486 <HAL_TIM_IC_Start_IT+0x3e>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003482:	b2db      	uxtb	r3, r3
 8003484:	e003      	b.n	800348e <HAL_TIM_IC_Start_IT+0x46>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800348c:	b2db      	uxtb	r3, r3
 800348e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d104      	bne.n	80034a0 <HAL_TIM_IC_Start_IT+0x58>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800349c:	b2db      	uxtb	r3, r3
 800349e:	e013      	b.n	80034c8 <HAL_TIM_IC_Start_IT+0x80>
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	2b04      	cmp	r3, #4
 80034a4:	d104      	bne.n	80034b0 <HAL_TIM_IC_Start_IT+0x68>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	e00b      	b.n	80034c8 <HAL_TIM_IC_Start_IT+0x80>
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	2b08      	cmp	r3, #8
 80034b4:	d104      	bne.n	80034c0 <HAL_TIM_IC_Start_IT+0x78>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	e003      	b.n	80034c8 <HAL_TIM_IC_Start_IT+0x80>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80034ca:	7bbb      	ldrb	r3, [r7, #14]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d102      	bne.n	80034d6 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80034d0:	7b7b      	ldrb	r3, [r7, #13]
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d001      	beq.n	80034da <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e0cc      	b.n	8003674 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d104      	bne.n	80034ea <HAL_TIM_IC_Start_IT+0xa2>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2202      	movs	r2, #2
 80034e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034e8:	e013      	b.n	8003512 <HAL_TIM_IC_Start_IT+0xca>
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	2b04      	cmp	r3, #4
 80034ee:	d104      	bne.n	80034fa <HAL_TIM_IC_Start_IT+0xb2>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2202      	movs	r2, #2
 80034f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034f8:	e00b      	b.n	8003512 <HAL_TIM_IC_Start_IT+0xca>
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	2b08      	cmp	r3, #8
 80034fe:	d104      	bne.n	800350a <HAL_TIM_IC_Start_IT+0xc2>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2202      	movs	r2, #2
 8003504:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003508:	e003      	b.n	8003512 <HAL_TIM_IC_Start_IT+0xca>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2202      	movs	r2, #2
 800350e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d104      	bne.n	8003522 <HAL_TIM_IC_Start_IT+0xda>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2202      	movs	r2, #2
 800351c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003520:	e013      	b.n	800354a <HAL_TIM_IC_Start_IT+0x102>
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	2b04      	cmp	r3, #4
 8003526:	d104      	bne.n	8003532 <HAL_TIM_IC_Start_IT+0xea>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2202      	movs	r2, #2
 800352c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003530:	e00b      	b.n	800354a <HAL_TIM_IC_Start_IT+0x102>
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	2b08      	cmp	r3, #8
 8003536:	d104      	bne.n	8003542 <HAL_TIM_IC_Start_IT+0xfa>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2202      	movs	r2, #2
 800353c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003540:	e003      	b.n	800354a <HAL_TIM_IC_Start_IT+0x102>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2202      	movs	r2, #2
 8003546:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	2b0c      	cmp	r3, #12
 800354e:	d841      	bhi.n	80035d4 <HAL_TIM_IC_Start_IT+0x18c>
 8003550:	a201      	add	r2, pc, #4	; (adr r2, 8003558 <HAL_TIM_IC_Start_IT+0x110>)
 8003552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003556:	bf00      	nop
 8003558:	0800358d 	.word	0x0800358d
 800355c:	080035d5 	.word	0x080035d5
 8003560:	080035d5 	.word	0x080035d5
 8003564:	080035d5 	.word	0x080035d5
 8003568:	0800359f 	.word	0x0800359f
 800356c:	080035d5 	.word	0x080035d5
 8003570:	080035d5 	.word	0x080035d5
 8003574:	080035d5 	.word	0x080035d5
 8003578:	080035b1 	.word	0x080035b1
 800357c:	080035d5 	.word	0x080035d5
 8003580:	080035d5 	.word	0x080035d5
 8003584:	080035d5 	.word	0x080035d5
 8003588:	080035c3 	.word	0x080035c3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	68da      	ldr	r2, [r3, #12]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f042 0202 	orr.w	r2, r2, #2
 800359a:	60da      	str	r2, [r3, #12]
      break;
 800359c:	e01d      	b.n	80035da <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	68da      	ldr	r2, [r3, #12]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f042 0204 	orr.w	r2, r2, #4
 80035ac:	60da      	str	r2, [r3, #12]
      break;
 80035ae:	e014      	b.n	80035da <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	68da      	ldr	r2, [r3, #12]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f042 0208 	orr.w	r2, r2, #8
 80035be:	60da      	str	r2, [r3, #12]
      break;
 80035c0:	e00b      	b.n	80035da <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	68da      	ldr	r2, [r3, #12]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f042 0210 	orr.w	r2, r2, #16
 80035d0:	60da      	str	r2, [r3, #12]
      break;
 80035d2:	e002      	b.n	80035da <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	73fb      	strb	r3, [r7, #15]
      break;
 80035d8:	bf00      	nop
  }

  if (status == HAL_OK)
 80035da:	7bfb      	ldrb	r3, [r7, #15]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d148      	bne.n	8003672 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2201      	movs	r2, #1
 80035e6:	6839      	ldr	r1, [r7, #0]
 80035e8:	4618      	mov	r0, r3
 80035ea:	f000 fd91 	bl	8004110 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a22      	ldr	r2, [pc, #136]	; (800367c <HAL_TIM_IC_Start_IT+0x234>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d022      	beq.n	800363e <HAL_TIM_IC_Start_IT+0x1f6>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003600:	d01d      	beq.n	800363e <HAL_TIM_IC_Start_IT+0x1f6>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a1e      	ldr	r2, [pc, #120]	; (8003680 <HAL_TIM_IC_Start_IT+0x238>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d018      	beq.n	800363e <HAL_TIM_IC_Start_IT+0x1f6>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a1c      	ldr	r2, [pc, #112]	; (8003684 <HAL_TIM_IC_Start_IT+0x23c>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d013      	beq.n	800363e <HAL_TIM_IC_Start_IT+0x1f6>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a1b      	ldr	r2, [pc, #108]	; (8003688 <HAL_TIM_IC_Start_IT+0x240>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d00e      	beq.n	800363e <HAL_TIM_IC_Start_IT+0x1f6>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a19      	ldr	r2, [pc, #100]	; (800368c <HAL_TIM_IC_Start_IT+0x244>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d009      	beq.n	800363e <HAL_TIM_IC_Start_IT+0x1f6>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a18      	ldr	r2, [pc, #96]	; (8003690 <HAL_TIM_IC_Start_IT+0x248>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d004      	beq.n	800363e <HAL_TIM_IC_Start_IT+0x1f6>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a16      	ldr	r2, [pc, #88]	; (8003694 <HAL_TIM_IC_Start_IT+0x24c>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d111      	bne.n	8003662 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f003 0307 	and.w	r3, r3, #7
 8003648:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	2b06      	cmp	r3, #6
 800364e:	d010      	beq.n	8003672 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f042 0201 	orr.w	r2, r2, #1
 800365e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003660:	e007      	b.n	8003672 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f042 0201 	orr.w	r2, r2, #1
 8003670:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003672:	7bfb      	ldrb	r3, [r7, #15]
}
 8003674:	4618      	mov	r0, r3
 8003676:	3710      	adds	r7, #16
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}
 800367c:	40010000 	.word	0x40010000
 8003680:	40000400 	.word	0x40000400
 8003684:	40000800 	.word	0x40000800
 8003688:	40000c00 	.word	0x40000c00
 800368c:	40010400 	.word	0x40010400
 8003690:	40014000 	.word	0x40014000
 8003694:	40001800 	.word	0x40001800

08003698 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	f003 0302 	and.w	r3, r3, #2
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d122      	bne.n	80036f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	f003 0302 	and.w	r3, r3, #2
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d11b      	bne.n	80036f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f06f 0202 	mvn.w	r2, #2
 80036c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2201      	movs	r2, #1
 80036ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	f003 0303 	and.w	r3, r3, #3
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d003      	beq.n	80036e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f7fd fb64 	bl	8000da8 <HAL_TIM_IC_CaptureCallback>
 80036e0:	e005      	b.n	80036ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 fa92 	bl	8003c0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f000 fa99 	bl	8003c20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	691b      	ldr	r3, [r3, #16]
 80036fa:	f003 0304 	and.w	r3, r3, #4
 80036fe:	2b04      	cmp	r3, #4
 8003700:	d122      	bne.n	8003748 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	f003 0304 	and.w	r3, r3, #4
 800370c:	2b04      	cmp	r3, #4
 800370e:	d11b      	bne.n	8003748 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f06f 0204 	mvn.w	r2, #4
 8003718:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2202      	movs	r2, #2
 800371e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800372a:	2b00      	cmp	r3, #0
 800372c:	d003      	beq.n	8003736 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f7fd fb3a 	bl	8000da8 <HAL_TIM_IC_CaptureCallback>
 8003734:	e005      	b.n	8003742 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 fa68 	bl	8003c0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f000 fa6f 	bl	8003c20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	f003 0308 	and.w	r3, r3, #8
 8003752:	2b08      	cmp	r3, #8
 8003754:	d122      	bne.n	800379c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	f003 0308 	and.w	r3, r3, #8
 8003760:	2b08      	cmp	r3, #8
 8003762:	d11b      	bne.n	800379c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f06f 0208 	mvn.w	r2, #8
 800376c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2204      	movs	r2, #4
 8003772:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	69db      	ldr	r3, [r3, #28]
 800377a:	f003 0303 	and.w	r3, r3, #3
 800377e:	2b00      	cmp	r3, #0
 8003780:	d003      	beq.n	800378a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f7fd fb10 	bl	8000da8 <HAL_TIM_IC_CaptureCallback>
 8003788:	e005      	b.n	8003796 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f000 fa3e 	bl	8003c0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f000 fa45 	bl	8003c20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	f003 0310 	and.w	r3, r3, #16
 80037a6:	2b10      	cmp	r3, #16
 80037a8:	d122      	bne.n	80037f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	f003 0310 	and.w	r3, r3, #16
 80037b4:	2b10      	cmp	r3, #16
 80037b6:	d11b      	bne.n	80037f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f06f 0210 	mvn.w	r2, #16
 80037c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2208      	movs	r2, #8
 80037c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	69db      	ldr	r3, [r3, #28]
 80037ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d003      	beq.n	80037de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f7fd fae6 	bl	8000da8 <HAL_TIM_IC_CaptureCallback>
 80037dc:	e005      	b.n	80037ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f000 fa14 	bl	8003c0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f000 fa1b 	bl	8003c20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	f003 0301 	and.w	r3, r3, #1
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d10e      	bne.n	800381c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	f003 0301 	and.w	r3, r3, #1
 8003808:	2b01      	cmp	r3, #1
 800380a:	d107      	bne.n	800381c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f06f 0201 	mvn.w	r2, #1
 8003814:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 f9ee 	bl	8003bf8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003826:	2b80      	cmp	r3, #128	; 0x80
 8003828:	d10e      	bne.n	8003848 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003834:	2b80      	cmp	r3, #128	; 0x80
 8003836:	d107      	bne.n	8003848 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003840:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 fd10 	bl	8004268 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	691b      	ldr	r3, [r3, #16]
 800384e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003852:	2b40      	cmp	r3, #64	; 0x40
 8003854:	d10e      	bne.n	8003874 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003860:	2b40      	cmp	r3, #64	; 0x40
 8003862:	d107      	bne.n	8003874 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800386c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 f9e0 	bl	8003c34 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	f003 0320 	and.w	r3, r3, #32
 800387e:	2b20      	cmp	r3, #32
 8003880:	d10e      	bne.n	80038a0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	f003 0320 	and.w	r3, r3, #32
 800388c:	2b20      	cmp	r3, #32
 800388e:	d107      	bne.n	80038a0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f06f 0220 	mvn.w	r2, #32
 8003898:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f000 fcda 	bl	8004254 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038a0:	bf00      	nop
 80038a2:	3708      	adds	r7, #8
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b086      	sub	sp, #24
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	60b9      	str	r1, [r7, #8]
 80038b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038b4:	2300      	movs	r3, #0
 80038b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d101      	bne.n	80038c6 <HAL_TIM_IC_ConfigChannel+0x1e>
 80038c2:	2302      	movs	r3, #2
 80038c4:	e088      	b.n	80039d8 <HAL_TIM_IC_ConfigChannel+0x130>
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2201      	movs	r2, #1
 80038ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d11b      	bne.n	800390c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6818      	ldr	r0, [r3, #0]
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	6819      	ldr	r1, [r3, #0]
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	685a      	ldr	r2, [r3, #4]
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	f000 fa50 	bl	8003d88 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	699a      	ldr	r2, [r3, #24]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f022 020c 	bic.w	r2, r2, #12
 80038f6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	6999      	ldr	r1, [r3, #24]
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	689a      	ldr	r2, [r3, #8]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	430a      	orrs	r2, r1
 8003908:	619a      	str	r2, [r3, #24]
 800390a:	e060      	b.n	80039ce <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2b04      	cmp	r3, #4
 8003910:	d11c      	bne.n	800394c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6818      	ldr	r0, [r3, #0]
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	6819      	ldr	r1, [r3, #0]
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	685a      	ldr	r2, [r3, #4]
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	f000 fad4 	bl	8003ece <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	699a      	ldr	r2, [r3, #24]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003934:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	6999      	ldr	r1, [r3, #24]
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	021a      	lsls	r2, r3, #8
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	430a      	orrs	r2, r1
 8003948:	619a      	str	r2, [r3, #24]
 800394a:	e040      	b.n	80039ce <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2b08      	cmp	r3, #8
 8003950:	d11b      	bne.n	800398a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6818      	ldr	r0, [r3, #0]
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	6819      	ldr	r1, [r3, #0]
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	685a      	ldr	r2, [r3, #4]
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	f000 fb21 	bl	8003fa8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	69da      	ldr	r2, [r3, #28]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f022 020c 	bic.w	r2, r2, #12
 8003974:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	69d9      	ldr	r1, [r3, #28]
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	689a      	ldr	r2, [r3, #8]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	430a      	orrs	r2, r1
 8003986:	61da      	str	r2, [r3, #28]
 8003988:	e021      	b.n	80039ce <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2b0c      	cmp	r3, #12
 800398e:	d11c      	bne.n	80039ca <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6818      	ldr	r0, [r3, #0]
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	6819      	ldr	r1, [r3, #0]
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	685a      	ldr	r2, [r3, #4]
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	f000 fb3e 	bl	8004020 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	69da      	ldr	r2, [r3, #28]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80039b2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	69d9      	ldr	r1, [r3, #28]
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	021a      	lsls	r2, r3, #8
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	430a      	orrs	r2, r1
 80039c6:	61da      	str	r2, [r3, #28]
 80039c8:	e001      	b.n	80039ce <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80039d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3718      	adds	r7, #24
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}

080039e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039ea:	2300      	movs	r3, #0
 80039ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d101      	bne.n	80039fc <HAL_TIM_ConfigClockSource+0x1c>
 80039f8:	2302      	movs	r3, #2
 80039fa:	e0b4      	b.n	8003b66 <HAL_TIM_ConfigClockSource+0x186>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2202      	movs	r2, #2
 8003a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003a1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a22:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68ba      	ldr	r2, [r7, #8]
 8003a2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a34:	d03e      	beq.n	8003ab4 <HAL_TIM_ConfigClockSource+0xd4>
 8003a36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a3a:	f200 8087 	bhi.w	8003b4c <HAL_TIM_ConfigClockSource+0x16c>
 8003a3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a42:	f000 8086 	beq.w	8003b52 <HAL_TIM_ConfigClockSource+0x172>
 8003a46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a4a:	d87f      	bhi.n	8003b4c <HAL_TIM_ConfigClockSource+0x16c>
 8003a4c:	2b70      	cmp	r3, #112	; 0x70
 8003a4e:	d01a      	beq.n	8003a86 <HAL_TIM_ConfigClockSource+0xa6>
 8003a50:	2b70      	cmp	r3, #112	; 0x70
 8003a52:	d87b      	bhi.n	8003b4c <HAL_TIM_ConfigClockSource+0x16c>
 8003a54:	2b60      	cmp	r3, #96	; 0x60
 8003a56:	d050      	beq.n	8003afa <HAL_TIM_ConfigClockSource+0x11a>
 8003a58:	2b60      	cmp	r3, #96	; 0x60
 8003a5a:	d877      	bhi.n	8003b4c <HAL_TIM_ConfigClockSource+0x16c>
 8003a5c:	2b50      	cmp	r3, #80	; 0x50
 8003a5e:	d03c      	beq.n	8003ada <HAL_TIM_ConfigClockSource+0xfa>
 8003a60:	2b50      	cmp	r3, #80	; 0x50
 8003a62:	d873      	bhi.n	8003b4c <HAL_TIM_ConfigClockSource+0x16c>
 8003a64:	2b40      	cmp	r3, #64	; 0x40
 8003a66:	d058      	beq.n	8003b1a <HAL_TIM_ConfigClockSource+0x13a>
 8003a68:	2b40      	cmp	r3, #64	; 0x40
 8003a6a:	d86f      	bhi.n	8003b4c <HAL_TIM_ConfigClockSource+0x16c>
 8003a6c:	2b30      	cmp	r3, #48	; 0x30
 8003a6e:	d064      	beq.n	8003b3a <HAL_TIM_ConfigClockSource+0x15a>
 8003a70:	2b30      	cmp	r3, #48	; 0x30
 8003a72:	d86b      	bhi.n	8003b4c <HAL_TIM_ConfigClockSource+0x16c>
 8003a74:	2b20      	cmp	r3, #32
 8003a76:	d060      	beq.n	8003b3a <HAL_TIM_ConfigClockSource+0x15a>
 8003a78:	2b20      	cmp	r3, #32
 8003a7a:	d867      	bhi.n	8003b4c <HAL_TIM_ConfigClockSource+0x16c>
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d05c      	beq.n	8003b3a <HAL_TIM_ConfigClockSource+0x15a>
 8003a80:	2b10      	cmp	r3, #16
 8003a82:	d05a      	beq.n	8003b3a <HAL_TIM_ConfigClockSource+0x15a>
 8003a84:	e062      	b.n	8003b4c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6818      	ldr	r0, [r3, #0]
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	6899      	ldr	r1, [r3, #8]
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	685a      	ldr	r2, [r3, #4]
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	f000 fb1b 	bl	80040d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003aa8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	68ba      	ldr	r2, [r7, #8]
 8003ab0:	609a      	str	r2, [r3, #8]
      break;
 8003ab2:	e04f      	b.n	8003b54 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6818      	ldr	r0, [r3, #0]
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	6899      	ldr	r1, [r3, #8]
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	685a      	ldr	r2, [r3, #4]
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	f000 fb04 	bl	80040d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	689a      	ldr	r2, [r3, #8]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ad6:	609a      	str	r2, [r3, #8]
      break;
 8003ad8:	e03c      	b.n	8003b54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6818      	ldr	r0, [r3, #0]
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	6859      	ldr	r1, [r3, #4]
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	f000 f9c2 	bl	8003e70 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	2150      	movs	r1, #80	; 0x50
 8003af2:	4618      	mov	r0, r3
 8003af4:	f000 fad1 	bl	800409a <TIM_ITRx_SetConfig>
      break;
 8003af8:	e02c      	b.n	8003b54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6818      	ldr	r0, [r3, #0]
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	6859      	ldr	r1, [r3, #4]
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	461a      	mov	r2, r3
 8003b08:	f000 fa1e 	bl	8003f48 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2160      	movs	r1, #96	; 0x60
 8003b12:	4618      	mov	r0, r3
 8003b14:	f000 fac1 	bl	800409a <TIM_ITRx_SetConfig>
      break;
 8003b18:	e01c      	b.n	8003b54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6818      	ldr	r0, [r3, #0]
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	6859      	ldr	r1, [r3, #4]
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	461a      	mov	r2, r3
 8003b28:	f000 f9a2 	bl	8003e70 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2140      	movs	r1, #64	; 0x40
 8003b32:	4618      	mov	r0, r3
 8003b34:	f000 fab1 	bl	800409a <TIM_ITRx_SetConfig>
      break;
 8003b38:	e00c      	b.n	8003b54 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4619      	mov	r1, r3
 8003b44:	4610      	mov	r0, r2
 8003b46:	f000 faa8 	bl	800409a <TIM_ITRx_SetConfig>
      break;
 8003b4a:	e003      	b.n	8003b54 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	73fb      	strb	r3, [r7, #15]
      break;
 8003b50:	e000      	b.n	8003b54 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003b52:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3710      	adds	r7, #16
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
	...

08003b70 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b085      	sub	sp, #20
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	2b0c      	cmp	r3, #12
 8003b82:	d831      	bhi.n	8003be8 <HAL_TIM_ReadCapturedValue+0x78>
 8003b84:	a201      	add	r2, pc, #4	; (adr r2, 8003b8c <HAL_TIM_ReadCapturedValue+0x1c>)
 8003b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b8a:	bf00      	nop
 8003b8c:	08003bc1 	.word	0x08003bc1
 8003b90:	08003be9 	.word	0x08003be9
 8003b94:	08003be9 	.word	0x08003be9
 8003b98:	08003be9 	.word	0x08003be9
 8003b9c:	08003bcb 	.word	0x08003bcb
 8003ba0:	08003be9 	.word	0x08003be9
 8003ba4:	08003be9 	.word	0x08003be9
 8003ba8:	08003be9 	.word	0x08003be9
 8003bac:	08003bd5 	.word	0x08003bd5
 8003bb0:	08003be9 	.word	0x08003be9
 8003bb4:	08003be9 	.word	0x08003be9
 8003bb8:	08003be9 	.word	0x08003be9
 8003bbc:	08003bdf 	.word	0x08003bdf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bc6:	60fb      	str	r3, [r7, #12]

      break;
 8003bc8:	e00f      	b.n	8003bea <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd0:	60fb      	str	r3, [r7, #12]

      break;
 8003bd2:	e00a      	b.n	8003bea <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bda:	60fb      	str	r3, [r7, #12]

      break;
 8003bdc:	e005      	b.n	8003bea <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be4:	60fb      	str	r3, [r7, #12]

      break;
 8003be6:	e000      	b.n	8003bea <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003be8:	bf00      	nop
  }

  return tmpreg;
 8003bea:	68fb      	ldr	r3, [r7, #12]
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3714      	adds	r7, #20
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003c00:	bf00      	nop
 8003c02:	370c      	adds	r7, #12
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr

08003c0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c14:	bf00      	nop
 8003c16:	370c      	adds	r7, #12
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c28:	bf00      	nop
 8003c2a:	370c      	adds	r7, #12
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c3c:	bf00      	nop
 8003c3e:	370c      	adds	r7, #12
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b085      	sub	sp, #20
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	4a40      	ldr	r2, [pc, #256]	; (8003d5c <TIM_Base_SetConfig+0x114>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d013      	beq.n	8003c88 <TIM_Base_SetConfig+0x40>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c66:	d00f      	beq.n	8003c88 <TIM_Base_SetConfig+0x40>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	4a3d      	ldr	r2, [pc, #244]	; (8003d60 <TIM_Base_SetConfig+0x118>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d00b      	beq.n	8003c88 <TIM_Base_SetConfig+0x40>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	4a3c      	ldr	r2, [pc, #240]	; (8003d64 <TIM_Base_SetConfig+0x11c>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d007      	beq.n	8003c88 <TIM_Base_SetConfig+0x40>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	4a3b      	ldr	r2, [pc, #236]	; (8003d68 <TIM_Base_SetConfig+0x120>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d003      	beq.n	8003c88 <TIM_Base_SetConfig+0x40>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	4a3a      	ldr	r2, [pc, #232]	; (8003d6c <TIM_Base_SetConfig+0x124>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d108      	bne.n	8003c9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	68fa      	ldr	r2, [r7, #12]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a2f      	ldr	r2, [pc, #188]	; (8003d5c <TIM_Base_SetConfig+0x114>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d02b      	beq.n	8003cfa <TIM_Base_SetConfig+0xb2>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ca8:	d027      	beq.n	8003cfa <TIM_Base_SetConfig+0xb2>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a2c      	ldr	r2, [pc, #176]	; (8003d60 <TIM_Base_SetConfig+0x118>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d023      	beq.n	8003cfa <TIM_Base_SetConfig+0xb2>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a2b      	ldr	r2, [pc, #172]	; (8003d64 <TIM_Base_SetConfig+0x11c>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d01f      	beq.n	8003cfa <TIM_Base_SetConfig+0xb2>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a2a      	ldr	r2, [pc, #168]	; (8003d68 <TIM_Base_SetConfig+0x120>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d01b      	beq.n	8003cfa <TIM_Base_SetConfig+0xb2>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a29      	ldr	r2, [pc, #164]	; (8003d6c <TIM_Base_SetConfig+0x124>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d017      	beq.n	8003cfa <TIM_Base_SetConfig+0xb2>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a28      	ldr	r2, [pc, #160]	; (8003d70 <TIM_Base_SetConfig+0x128>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d013      	beq.n	8003cfa <TIM_Base_SetConfig+0xb2>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a27      	ldr	r2, [pc, #156]	; (8003d74 <TIM_Base_SetConfig+0x12c>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d00f      	beq.n	8003cfa <TIM_Base_SetConfig+0xb2>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4a26      	ldr	r2, [pc, #152]	; (8003d78 <TIM_Base_SetConfig+0x130>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d00b      	beq.n	8003cfa <TIM_Base_SetConfig+0xb2>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a25      	ldr	r2, [pc, #148]	; (8003d7c <TIM_Base_SetConfig+0x134>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d007      	beq.n	8003cfa <TIM_Base_SetConfig+0xb2>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a24      	ldr	r2, [pc, #144]	; (8003d80 <TIM_Base_SetConfig+0x138>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d003      	beq.n	8003cfa <TIM_Base_SetConfig+0xb2>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a23      	ldr	r2, [pc, #140]	; (8003d84 <TIM_Base_SetConfig+0x13c>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d108      	bne.n	8003d0c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	68db      	ldr	r3, [r3, #12]
 8003d06:	68fa      	ldr	r2, [r7, #12]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	695b      	ldr	r3, [r3, #20]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	68fa      	ldr	r2, [r7, #12]
 8003d1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	689a      	ldr	r2, [r3, #8]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4a0a      	ldr	r2, [pc, #40]	; (8003d5c <TIM_Base_SetConfig+0x114>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d003      	beq.n	8003d40 <TIM_Base_SetConfig+0xf8>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4a0c      	ldr	r2, [pc, #48]	; (8003d6c <TIM_Base_SetConfig+0x124>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d103      	bne.n	8003d48 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	691a      	ldr	r2, [r3, #16]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	615a      	str	r2, [r3, #20]
}
 8003d4e:	bf00      	nop
 8003d50:	3714      	adds	r7, #20
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr
 8003d5a:	bf00      	nop
 8003d5c:	40010000 	.word	0x40010000
 8003d60:	40000400 	.word	0x40000400
 8003d64:	40000800 	.word	0x40000800
 8003d68:	40000c00 	.word	0x40000c00
 8003d6c:	40010400 	.word	0x40010400
 8003d70:	40014000 	.word	0x40014000
 8003d74:	40014400 	.word	0x40014400
 8003d78:	40014800 	.word	0x40014800
 8003d7c:	40001800 	.word	0x40001800
 8003d80:	40001c00 	.word	0x40001c00
 8003d84:	40002000 	.word	0x40002000

08003d88 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b087      	sub	sp, #28
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	607a      	str	r2, [r7, #4]
 8003d94:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	6a1b      	ldr	r3, [r3, #32]
 8003d9a:	f023 0201 	bic.w	r2, r3, #1
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	699b      	ldr	r3, [r3, #24]
 8003da6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6a1b      	ldr	r3, [r3, #32]
 8003dac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	4a28      	ldr	r2, [pc, #160]	; (8003e54 <TIM_TI1_SetConfig+0xcc>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d01b      	beq.n	8003dee <TIM_TI1_SetConfig+0x66>
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dbc:	d017      	beq.n	8003dee <TIM_TI1_SetConfig+0x66>
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	4a25      	ldr	r2, [pc, #148]	; (8003e58 <TIM_TI1_SetConfig+0xd0>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d013      	beq.n	8003dee <TIM_TI1_SetConfig+0x66>
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	4a24      	ldr	r2, [pc, #144]	; (8003e5c <TIM_TI1_SetConfig+0xd4>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d00f      	beq.n	8003dee <TIM_TI1_SetConfig+0x66>
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	4a23      	ldr	r2, [pc, #140]	; (8003e60 <TIM_TI1_SetConfig+0xd8>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d00b      	beq.n	8003dee <TIM_TI1_SetConfig+0x66>
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	4a22      	ldr	r2, [pc, #136]	; (8003e64 <TIM_TI1_SetConfig+0xdc>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d007      	beq.n	8003dee <TIM_TI1_SetConfig+0x66>
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	4a21      	ldr	r2, [pc, #132]	; (8003e68 <TIM_TI1_SetConfig+0xe0>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d003      	beq.n	8003dee <TIM_TI1_SetConfig+0x66>
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	4a20      	ldr	r2, [pc, #128]	; (8003e6c <TIM_TI1_SetConfig+0xe4>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d101      	bne.n	8003df2 <TIM_TI1_SetConfig+0x6a>
 8003dee:	2301      	movs	r3, #1
 8003df0:	e000      	b.n	8003df4 <TIM_TI1_SetConfig+0x6c>
 8003df2:	2300      	movs	r3, #0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d008      	beq.n	8003e0a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	f023 0303 	bic.w	r3, r3, #3
 8003dfe:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003e00:	697a      	ldr	r2, [r7, #20]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	617b      	str	r3, [r7, #20]
 8003e08:	e003      	b.n	8003e12 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	f043 0301 	orr.w	r3, r3, #1
 8003e10:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	011b      	lsls	r3, r3, #4
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	697a      	ldr	r2, [r7, #20]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	f023 030a 	bic.w	r3, r3, #10
 8003e2c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	f003 030a 	and.w	r3, r3, #10
 8003e34:	693a      	ldr	r2, [r7, #16]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	697a      	ldr	r2, [r7, #20]
 8003e3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	693a      	ldr	r2, [r7, #16]
 8003e44:	621a      	str	r2, [r3, #32]
}
 8003e46:	bf00      	nop
 8003e48:	371c      	adds	r7, #28
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	40010000 	.word	0x40010000
 8003e58:	40000400 	.word	0x40000400
 8003e5c:	40000800 	.word	0x40000800
 8003e60:	40000c00 	.word	0x40000c00
 8003e64:	40010400 	.word	0x40010400
 8003e68:	40014000 	.word	0x40014000
 8003e6c:	40001800 	.word	0x40001800

08003e70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b087      	sub	sp, #28
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6a1b      	ldr	r3, [r3, #32]
 8003e80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6a1b      	ldr	r3, [r3, #32]
 8003e86:	f023 0201 	bic.w	r2, r3, #1
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	699b      	ldr	r3, [r3, #24]
 8003e92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	011b      	lsls	r3, r3, #4
 8003ea0:	693a      	ldr	r2, [r7, #16]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	f023 030a 	bic.w	r3, r3, #10
 8003eac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003eae:	697a      	ldr	r2, [r7, #20]
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	693a      	ldr	r2, [r7, #16]
 8003eba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	697a      	ldr	r2, [r7, #20]
 8003ec0:	621a      	str	r2, [r3, #32]
}
 8003ec2:	bf00      	nop
 8003ec4:	371c      	adds	r7, #28
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr

08003ece <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003ece:	b480      	push	{r7}
 8003ed0:	b087      	sub	sp, #28
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	60f8      	str	r0, [r7, #12]
 8003ed6:	60b9      	str	r1, [r7, #8]
 8003ed8:	607a      	str	r2, [r7, #4]
 8003eda:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6a1b      	ldr	r3, [r3, #32]
 8003ee0:	f023 0210 	bic.w	r2, r3, #16
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	699b      	ldr	r3, [r3, #24]
 8003eec:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6a1b      	ldr	r3, [r3, #32]
 8003ef2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003efa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	021b      	lsls	r3, r3, #8
 8003f00:	697a      	ldr	r2, [r7, #20]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f0c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	031b      	lsls	r3, r3, #12
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	697a      	ldr	r2, [r7, #20]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003f20:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	011b      	lsls	r3, r3, #4
 8003f26:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003f2a:	693a      	ldr	r2, [r7, #16]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	697a      	ldr	r2, [r7, #20]
 8003f34:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	693a      	ldr	r2, [r7, #16]
 8003f3a:	621a      	str	r2, [r3, #32]
}
 8003f3c:	bf00      	nop
 8003f3e:	371c      	adds	r7, #28
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b087      	sub	sp, #28
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	60b9      	str	r1, [r7, #8]
 8003f52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6a1b      	ldr	r3, [r3, #32]
 8003f58:	f023 0210 	bic.w	r2, r3, #16
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	699b      	ldr	r3, [r3, #24]
 8003f64:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6a1b      	ldr	r3, [r3, #32]
 8003f6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f72:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	031b      	lsls	r3, r3, #12
 8003f78:	697a      	ldr	r2, [r7, #20]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003f84:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	011b      	lsls	r3, r3, #4
 8003f8a:	693a      	ldr	r2, [r7, #16]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	697a      	ldr	r2, [r7, #20]
 8003f94:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	693a      	ldr	r2, [r7, #16]
 8003f9a:	621a      	str	r2, [r3, #32]
}
 8003f9c:	bf00      	nop
 8003f9e:	371c      	adds	r7, #28
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr

08003fa8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b087      	sub	sp, #28
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	60b9      	str	r1, [r7, #8]
 8003fb2:	607a      	str	r2, [r7, #4]
 8003fb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6a1b      	ldr	r3, [r3, #32]
 8003fba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	69db      	ldr	r3, [r3, #28]
 8003fc6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6a1b      	ldr	r3, [r3, #32]
 8003fcc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	f023 0303 	bic.w	r3, r3, #3
 8003fd4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003fd6:	697a      	ldr	r2, [r7, #20]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fe4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	011b      	lsls	r3, r3, #4
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	697a      	ldr	r2, [r7, #20]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003ff8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	021b      	lsls	r3, r3, #8
 8003ffe:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004002:	693a      	ldr	r2, [r7, #16]
 8004004:	4313      	orrs	r3, r2
 8004006:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	697a      	ldr	r2, [r7, #20]
 800400c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	693a      	ldr	r2, [r7, #16]
 8004012:	621a      	str	r2, [r3, #32]
}
 8004014:	bf00      	nop
 8004016:	371c      	adds	r7, #28
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004020:	b480      	push	{r7}
 8004022:	b087      	sub	sp, #28
 8004024:	af00      	add	r7, sp, #0
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	60b9      	str	r1, [r7, #8]
 800402a:	607a      	str	r2, [r7, #4]
 800402c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6a1b      	ldr	r3, [r3, #32]
 8004032:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	69db      	ldr	r3, [r3, #28]
 800403e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6a1b      	ldr	r3, [r3, #32]
 8004044:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800404c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	021b      	lsls	r3, r3, #8
 8004052:	697a      	ldr	r2, [r7, #20]
 8004054:	4313      	orrs	r3, r2
 8004056:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800405e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	031b      	lsls	r3, r3, #12
 8004064:	b29b      	uxth	r3, r3
 8004066:	697a      	ldr	r2, [r7, #20]
 8004068:	4313      	orrs	r3, r2
 800406a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004072:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	031b      	lsls	r3, r3, #12
 8004078:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800407c:	693a      	ldr	r2, [r7, #16]
 800407e:	4313      	orrs	r3, r2
 8004080:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	697a      	ldr	r2, [r7, #20]
 8004086:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	693a      	ldr	r2, [r7, #16]
 800408c:	621a      	str	r2, [r3, #32]
}
 800408e:	bf00      	nop
 8004090:	371c      	adds	r7, #28
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr

0800409a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800409a:	b480      	push	{r7}
 800409c:	b085      	sub	sp, #20
 800409e:	af00      	add	r7, sp, #0
 80040a0:	6078      	str	r0, [r7, #4]
 80040a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80040b2:	683a      	ldr	r2, [r7, #0]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	f043 0307 	orr.w	r3, r3, #7
 80040bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	68fa      	ldr	r2, [r7, #12]
 80040c2:	609a      	str	r2, [r3, #8]
}
 80040c4:	bf00      	nop
 80040c6:	3714      	adds	r7, #20
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr

080040d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b087      	sub	sp, #28
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	60f8      	str	r0, [r7, #12]
 80040d8:	60b9      	str	r1, [r7, #8]
 80040da:	607a      	str	r2, [r7, #4]
 80040dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	021a      	lsls	r2, r3, #8
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	431a      	orrs	r2, r3
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	697a      	ldr	r2, [r7, #20]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	697a      	ldr	r2, [r7, #20]
 8004102:	609a      	str	r2, [r3, #8]
}
 8004104:	bf00      	nop
 8004106:	371c      	adds	r7, #28
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004110:	b480      	push	{r7}
 8004112:	b087      	sub	sp, #28
 8004114:	af00      	add	r7, sp, #0
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	f003 031f 	and.w	r3, r3, #31
 8004122:	2201      	movs	r2, #1
 8004124:	fa02 f303 	lsl.w	r3, r2, r3
 8004128:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6a1a      	ldr	r2, [r3, #32]
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	43db      	mvns	r3, r3
 8004132:	401a      	ands	r2, r3
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6a1a      	ldr	r2, [r3, #32]
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	f003 031f 	and.w	r3, r3, #31
 8004142:	6879      	ldr	r1, [r7, #4]
 8004144:	fa01 f303 	lsl.w	r3, r1, r3
 8004148:	431a      	orrs	r2, r3
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	621a      	str	r2, [r3, #32]
}
 800414e:	bf00      	nop
 8004150:	371c      	adds	r7, #28
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr
	...

0800415c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800415c:	b480      	push	{r7}
 800415e:	b085      	sub	sp, #20
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800416c:	2b01      	cmp	r3, #1
 800416e:	d101      	bne.n	8004174 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004170:	2302      	movs	r3, #2
 8004172:	e05a      	b.n	800422a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2202      	movs	r2, #2
 8004180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800419a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	68fa      	ldr	r2, [r7, #12]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	68fa      	ldr	r2, [r7, #12]
 80041ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a21      	ldr	r2, [pc, #132]	; (8004238 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d022      	beq.n	80041fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041c0:	d01d      	beq.n	80041fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a1d      	ldr	r2, [pc, #116]	; (800423c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d018      	beq.n	80041fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a1b      	ldr	r2, [pc, #108]	; (8004240 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d013      	beq.n	80041fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a1a      	ldr	r2, [pc, #104]	; (8004244 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d00e      	beq.n	80041fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a18      	ldr	r2, [pc, #96]	; (8004248 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d009      	beq.n	80041fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a17      	ldr	r2, [pc, #92]	; (800424c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d004      	beq.n	80041fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a15      	ldr	r2, [pc, #84]	; (8004250 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d10c      	bne.n	8004218 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004204:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	68ba      	ldr	r2, [r7, #8]
 800420c:	4313      	orrs	r3, r2
 800420e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	68ba      	ldr	r2, [r7, #8]
 8004216:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004228:	2300      	movs	r3, #0
}
 800422a:	4618      	mov	r0, r3
 800422c:	3714      	adds	r7, #20
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr
 8004236:	bf00      	nop
 8004238:	40010000 	.word	0x40010000
 800423c:	40000400 	.word	0x40000400
 8004240:	40000800 	.word	0x40000800
 8004244:	40000c00 	.word	0x40000c00
 8004248:	40010400 	.word	0x40010400
 800424c:	40014000 	.word	0x40014000
 8004250:	40001800 	.word	0x40001800

08004254 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800425c:	bf00      	nop
 800425e:	370c      	adds	r7, #12
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr

08004268 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004268:	b480      	push	{r7}
 800426a:	b083      	sub	sp, #12
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004270:	bf00      	nop
 8004272:	370c      	adds	r7, #12
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr

0800427c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b082      	sub	sp, #8
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d101      	bne.n	800428e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e03f      	b.n	800430e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004294:	b2db      	uxtb	r3, r3
 8004296:	2b00      	cmp	r3, #0
 8004298:	d106      	bne.n	80042a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f7fd fa44 	bl	8001730 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2224      	movs	r2, #36	; 0x24
 80042ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68da      	ldr	r2, [r3, #12]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f000 f929 	bl	8004518 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	691a      	ldr	r2, [r3, #16]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	695a      	ldr	r2, [r3, #20]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	68da      	ldr	r2, [r3, #12]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2220      	movs	r2, #32
 8004300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2220      	movs	r2, #32
 8004308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800430c:	2300      	movs	r3, #0
}
 800430e:	4618      	mov	r0, r3
 8004310:	3708      	adds	r7, #8
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}

08004316 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004316:	b580      	push	{r7, lr}
 8004318:	b08a      	sub	sp, #40	; 0x28
 800431a:	af02      	add	r7, sp, #8
 800431c:	60f8      	str	r0, [r7, #12]
 800431e:	60b9      	str	r1, [r7, #8]
 8004320:	603b      	str	r3, [r7, #0]
 8004322:	4613      	mov	r3, r2
 8004324:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004326:	2300      	movs	r3, #0
 8004328:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004330:	b2db      	uxtb	r3, r3
 8004332:	2b20      	cmp	r3, #32
 8004334:	d17c      	bne.n	8004430 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d002      	beq.n	8004342 <HAL_UART_Transmit+0x2c>
 800433c:	88fb      	ldrh	r3, [r7, #6]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d101      	bne.n	8004346 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e075      	b.n	8004432 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800434c:	2b01      	cmp	r3, #1
 800434e:	d101      	bne.n	8004354 <HAL_UART_Transmit+0x3e>
 8004350:	2302      	movs	r3, #2
 8004352:	e06e      	b.n	8004432 <HAL_UART_Transmit+0x11c>
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2200      	movs	r2, #0
 8004360:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2221      	movs	r2, #33	; 0x21
 8004366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800436a:	f7fd fbe1 	bl	8001b30 <HAL_GetTick>
 800436e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	88fa      	ldrh	r2, [r7, #6]
 8004374:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	88fa      	ldrh	r2, [r7, #6]
 800437a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004384:	d108      	bne.n	8004398 <HAL_UART_Transmit+0x82>
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d104      	bne.n	8004398 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800438e:	2300      	movs	r3, #0
 8004390:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	61bb      	str	r3, [r7, #24]
 8004396:	e003      	b.n	80043a0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800439c:	2300      	movs	r3, #0
 800439e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2200      	movs	r2, #0
 80043a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80043a8:	e02a      	b.n	8004400 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	9300      	str	r3, [sp, #0]
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	2200      	movs	r2, #0
 80043b2:	2180      	movs	r1, #128	; 0x80
 80043b4:	68f8      	ldr	r0, [r7, #12]
 80043b6:	f000 f840 	bl	800443a <UART_WaitOnFlagUntilTimeout>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d001      	beq.n	80043c4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80043c0:	2303      	movs	r3, #3
 80043c2:	e036      	b.n	8004432 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d10b      	bne.n	80043e2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043ca:	69bb      	ldr	r3, [r7, #24]
 80043cc:	881b      	ldrh	r3, [r3, #0]
 80043ce:	461a      	mov	r2, r3
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043d8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80043da:	69bb      	ldr	r3, [r7, #24]
 80043dc:	3302      	adds	r3, #2
 80043de:	61bb      	str	r3, [r7, #24]
 80043e0:	e007      	b.n	80043f2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	781a      	ldrb	r2, [r3, #0]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	3301      	adds	r3, #1
 80043f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	3b01      	subs	r3, #1
 80043fa:	b29a      	uxth	r2, r3
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004404:	b29b      	uxth	r3, r3
 8004406:	2b00      	cmp	r3, #0
 8004408:	d1cf      	bne.n	80043aa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	9300      	str	r3, [sp, #0]
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	2200      	movs	r2, #0
 8004412:	2140      	movs	r1, #64	; 0x40
 8004414:	68f8      	ldr	r0, [r7, #12]
 8004416:	f000 f810 	bl	800443a <UART_WaitOnFlagUntilTimeout>
 800441a:	4603      	mov	r3, r0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d001      	beq.n	8004424 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004420:	2303      	movs	r3, #3
 8004422:	e006      	b.n	8004432 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2220      	movs	r2, #32
 8004428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800442c:	2300      	movs	r3, #0
 800442e:	e000      	b.n	8004432 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004430:	2302      	movs	r3, #2
  }
}
 8004432:	4618      	mov	r0, r3
 8004434:	3720      	adds	r7, #32
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}

0800443a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800443a:	b580      	push	{r7, lr}
 800443c:	b090      	sub	sp, #64	; 0x40
 800443e:	af00      	add	r7, sp, #0
 8004440:	60f8      	str	r0, [r7, #12]
 8004442:	60b9      	str	r1, [r7, #8]
 8004444:	603b      	str	r3, [r7, #0]
 8004446:	4613      	mov	r3, r2
 8004448:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800444a:	e050      	b.n	80044ee <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800444c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800444e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004452:	d04c      	beq.n	80044ee <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004454:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004456:	2b00      	cmp	r3, #0
 8004458:	d007      	beq.n	800446a <UART_WaitOnFlagUntilTimeout+0x30>
 800445a:	f7fd fb69 	bl	8001b30 <HAL_GetTick>
 800445e:	4602      	mov	r2, r0
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004466:	429a      	cmp	r2, r3
 8004468:	d241      	bcs.n	80044ee <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	330c      	adds	r3, #12
 8004470:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004474:	e853 3f00 	ldrex	r3, [r3]
 8004478:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800447a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004480:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	330c      	adds	r3, #12
 8004488:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800448a:	637a      	str	r2, [r7, #52]	; 0x34
 800448c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800448e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004490:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004492:	e841 2300 	strex	r3, r2, [r1]
 8004496:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800449a:	2b00      	cmp	r3, #0
 800449c:	d1e5      	bne.n	800446a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	3314      	adds	r3, #20
 80044a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	e853 3f00 	ldrex	r3, [r3]
 80044ac:	613b      	str	r3, [r7, #16]
   return(result);
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	f023 0301 	bic.w	r3, r3, #1
 80044b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	3314      	adds	r3, #20
 80044bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80044be:	623a      	str	r2, [r7, #32]
 80044c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c2:	69f9      	ldr	r1, [r7, #28]
 80044c4:	6a3a      	ldr	r2, [r7, #32]
 80044c6:	e841 2300 	strex	r3, r2, [r1]
 80044ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80044cc:	69bb      	ldr	r3, [r7, #24]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d1e5      	bne.n	800449e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2220      	movs	r2, #32
 80044d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2220      	movs	r2, #32
 80044de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	e00f      	b.n	800450e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	4013      	ands	r3, r2
 80044f8:	68ba      	ldr	r2, [r7, #8]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	bf0c      	ite	eq
 80044fe:	2301      	moveq	r3, #1
 8004500:	2300      	movne	r3, #0
 8004502:	b2db      	uxtb	r3, r3
 8004504:	461a      	mov	r2, r3
 8004506:	79fb      	ldrb	r3, [r7, #7]
 8004508:	429a      	cmp	r2, r3
 800450a:	d09f      	beq.n	800444c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	3740      	adds	r7, #64	; 0x40
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
	...

08004518 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004518:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800451c:	b0c0      	sub	sp, #256	; 0x100
 800451e:	af00      	add	r7, sp, #0
 8004520:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	691b      	ldr	r3, [r3, #16]
 800452c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004534:	68d9      	ldr	r1, [r3, #12]
 8004536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	ea40 0301 	orr.w	r3, r0, r1
 8004540:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004546:	689a      	ldr	r2, [r3, #8]
 8004548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800454c:	691b      	ldr	r3, [r3, #16]
 800454e:	431a      	orrs	r2, r3
 8004550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004554:	695b      	ldr	r3, [r3, #20]
 8004556:	431a      	orrs	r2, r3
 8004558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800455c:	69db      	ldr	r3, [r3, #28]
 800455e:	4313      	orrs	r3, r2
 8004560:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004570:	f021 010c 	bic.w	r1, r1, #12
 8004574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800457e:	430b      	orrs	r3, r1
 8004580:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004582:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	695b      	ldr	r3, [r3, #20]
 800458a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800458e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004592:	6999      	ldr	r1, [r3, #24]
 8004594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	ea40 0301 	orr.w	r3, r0, r1
 800459e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80045a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	4b8f      	ldr	r3, [pc, #572]	; (80047e4 <UART_SetConfig+0x2cc>)
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d005      	beq.n	80045b8 <UART_SetConfig+0xa0>
 80045ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	4b8d      	ldr	r3, [pc, #564]	; (80047e8 <UART_SetConfig+0x2d0>)
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d104      	bne.n	80045c2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80045b8:	f7fe fe8a 	bl	80032d0 <HAL_RCC_GetPCLK2Freq>
 80045bc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80045c0:	e003      	b.n	80045ca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80045c2:	f7fe fe71 	bl	80032a8 <HAL_RCC_GetPCLK1Freq>
 80045c6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045ce:	69db      	ldr	r3, [r3, #28]
 80045d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045d4:	f040 810c 	bne.w	80047f0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80045d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045dc:	2200      	movs	r2, #0
 80045de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80045e2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80045e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80045ea:	4622      	mov	r2, r4
 80045ec:	462b      	mov	r3, r5
 80045ee:	1891      	adds	r1, r2, r2
 80045f0:	65b9      	str	r1, [r7, #88]	; 0x58
 80045f2:	415b      	adcs	r3, r3
 80045f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80045f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80045fa:	4621      	mov	r1, r4
 80045fc:	eb12 0801 	adds.w	r8, r2, r1
 8004600:	4629      	mov	r1, r5
 8004602:	eb43 0901 	adc.w	r9, r3, r1
 8004606:	f04f 0200 	mov.w	r2, #0
 800460a:	f04f 0300 	mov.w	r3, #0
 800460e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004612:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004616:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800461a:	4690      	mov	r8, r2
 800461c:	4699      	mov	r9, r3
 800461e:	4623      	mov	r3, r4
 8004620:	eb18 0303 	adds.w	r3, r8, r3
 8004624:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004628:	462b      	mov	r3, r5
 800462a:	eb49 0303 	adc.w	r3, r9, r3
 800462e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004632:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800463e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004642:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004646:	460b      	mov	r3, r1
 8004648:	18db      	adds	r3, r3, r3
 800464a:	653b      	str	r3, [r7, #80]	; 0x50
 800464c:	4613      	mov	r3, r2
 800464e:	eb42 0303 	adc.w	r3, r2, r3
 8004652:	657b      	str	r3, [r7, #84]	; 0x54
 8004654:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004658:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800465c:	f7fc fa06 	bl	8000a6c <__aeabi_uldivmod>
 8004660:	4602      	mov	r2, r0
 8004662:	460b      	mov	r3, r1
 8004664:	4b61      	ldr	r3, [pc, #388]	; (80047ec <UART_SetConfig+0x2d4>)
 8004666:	fba3 2302 	umull	r2, r3, r3, r2
 800466a:	095b      	lsrs	r3, r3, #5
 800466c:	011c      	lsls	r4, r3, #4
 800466e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004672:	2200      	movs	r2, #0
 8004674:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004678:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800467c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004680:	4642      	mov	r2, r8
 8004682:	464b      	mov	r3, r9
 8004684:	1891      	adds	r1, r2, r2
 8004686:	64b9      	str	r1, [r7, #72]	; 0x48
 8004688:	415b      	adcs	r3, r3
 800468a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800468c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004690:	4641      	mov	r1, r8
 8004692:	eb12 0a01 	adds.w	sl, r2, r1
 8004696:	4649      	mov	r1, r9
 8004698:	eb43 0b01 	adc.w	fp, r3, r1
 800469c:	f04f 0200 	mov.w	r2, #0
 80046a0:	f04f 0300 	mov.w	r3, #0
 80046a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80046a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80046ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80046b0:	4692      	mov	sl, r2
 80046b2:	469b      	mov	fp, r3
 80046b4:	4643      	mov	r3, r8
 80046b6:	eb1a 0303 	adds.w	r3, sl, r3
 80046ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80046be:	464b      	mov	r3, r9
 80046c0:	eb4b 0303 	adc.w	r3, fp, r3
 80046c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80046c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	2200      	movs	r2, #0
 80046d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80046d4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80046d8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80046dc:	460b      	mov	r3, r1
 80046de:	18db      	adds	r3, r3, r3
 80046e0:	643b      	str	r3, [r7, #64]	; 0x40
 80046e2:	4613      	mov	r3, r2
 80046e4:	eb42 0303 	adc.w	r3, r2, r3
 80046e8:	647b      	str	r3, [r7, #68]	; 0x44
 80046ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80046ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80046f2:	f7fc f9bb 	bl	8000a6c <__aeabi_uldivmod>
 80046f6:	4602      	mov	r2, r0
 80046f8:	460b      	mov	r3, r1
 80046fa:	4611      	mov	r1, r2
 80046fc:	4b3b      	ldr	r3, [pc, #236]	; (80047ec <UART_SetConfig+0x2d4>)
 80046fe:	fba3 2301 	umull	r2, r3, r3, r1
 8004702:	095b      	lsrs	r3, r3, #5
 8004704:	2264      	movs	r2, #100	; 0x64
 8004706:	fb02 f303 	mul.w	r3, r2, r3
 800470a:	1acb      	subs	r3, r1, r3
 800470c:	00db      	lsls	r3, r3, #3
 800470e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004712:	4b36      	ldr	r3, [pc, #216]	; (80047ec <UART_SetConfig+0x2d4>)
 8004714:	fba3 2302 	umull	r2, r3, r3, r2
 8004718:	095b      	lsrs	r3, r3, #5
 800471a:	005b      	lsls	r3, r3, #1
 800471c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004720:	441c      	add	r4, r3
 8004722:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004726:	2200      	movs	r2, #0
 8004728:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800472c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004730:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004734:	4642      	mov	r2, r8
 8004736:	464b      	mov	r3, r9
 8004738:	1891      	adds	r1, r2, r2
 800473a:	63b9      	str	r1, [r7, #56]	; 0x38
 800473c:	415b      	adcs	r3, r3
 800473e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004740:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004744:	4641      	mov	r1, r8
 8004746:	1851      	adds	r1, r2, r1
 8004748:	6339      	str	r1, [r7, #48]	; 0x30
 800474a:	4649      	mov	r1, r9
 800474c:	414b      	adcs	r3, r1
 800474e:	637b      	str	r3, [r7, #52]	; 0x34
 8004750:	f04f 0200 	mov.w	r2, #0
 8004754:	f04f 0300 	mov.w	r3, #0
 8004758:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800475c:	4659      	mov	r1, fp
 800475e:	00cb      	lsls	r3, r1, #3
 8004760:	4651      	mov	r1, sl
 8004762:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004766:	4651      	mov	r1, sl
 8004768:	00ca      	lsls	r2, r1, #3
 800476a:	4610      	mov	r0, r2
 800476c:	4619      	mov	r1, r3
 800476e:	4603      	mov	r3, r0
 8004770:	4642      	mov	r2, r8
 8004772:	189b      	adds	r3, r3, r2
 8004774:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004778:	464b      	mov	r3, r9
 800477a:	460a      	mov	r2, r1
 800477c:	eb42 0303 	adc.w	r3, r2, r3
 8004780:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004790:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004794:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004798:	460b      	mov	r3, r1
 800479a:	18db      	adds	r3, r3, r3
 800479c:	62bb      	str	r3, [r7, #40]	; 0x28
 800479e:	4613      	mov	r3, r2
 80047a0:	eb42 0303 	adc.w	r3, r2, r3
 80047a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80047aa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80047ae:	f7fc f95d 	bl	8000a6c <__aeabi_uldivmod>
 80047b2:	4602      	mov	r2, r0
 80047b4:	460b      	mov	r3, r1
 80047b6:	4b0d      	ldr	r3, [pc, #52]	; (80047ec <UART_SetConfig+0x2d4>)
 80047b8:	fba3 1302 	umull	r1, r3, r3, r2
 80047bc:	095b      	lsrs	r3, r3, #5
 80047be:	2164      	movs	r1, #100	; 0x64
 80047c0:	fb01 f303 	mul.w	r3, r1, r3
 80047c4:	1ad3      	subs	r3, r2, r3
 80047c6:	00db      	lsls	r3, r3, #3
 80047c8:	3332      	adds	r3, #50	; 0x32
 80047ca:	4a08      	ldr	r2, [pc, #32]	; (80047ec <UART_SetConfig+0x2d4>)
 80047cc:	fba2 2303 	umull	r2, r3, r2, r3
 80047d0:	095b      	lsrs	r3, r3, #5
 80047d2:	f003 0207 	and.w	r2, r3, #7
 80047d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4422      	add	r2, r4
 80047de:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80047e0:	e105      	b.n	80049ee <UART_SetConfig+0x4d6>
 80047e2:	bf00      	nop
 80047e4:	40011000 	.word	0x40011000
 80047e8:	40011400 	.word	0x40011400
 80047ec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80047f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047f4:	2200      	movs	r2, #0
 80047f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80047fa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80047fe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004802:	4642      	mov	r2, r8
 8004804:	464b      	mov	r3, r9
 8004806:	1891      	adds	r1, r2, r2
 8004808:	6239      	str	r1, [r7, #32]
 800480a:	415b      	adcs	r3, r3
 800480c:	627b      	str	r3, [r7, #36]	; 0x24
 800480e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004812:	4641      	mov	r1, r8
 8004814:	1854      	adds	r4, r2, r1
 8004816:	4649      	mov	r1, r9
 8004818:	eb43 0501 	adc.w	r5, r3, r1
 800481c:	f04f 0200 	mov.w	r2, #0
 8004820:	f04f 0300 	mov.w	r3, #0
 8004824:	00eb      	lsls	r3, r5, #3
 8004826:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800482a:	00e2      	lsls	r2, r4, #3
 800482c:	4614      	mov	r4, r2
 800482e:	461d      	mov	r5, r3
 8004830:	4643      	mov	r3, r8
 8004832:	18e3      	adds	r3, r4, r3
 8004834:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004838:	464b      	mov	r3, r9
 800483a:	eb45 0303 	adc.w	r3, r5, r3
 800483e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004842:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	2200      	movs	r2, #0
 800484a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800484e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004852:	f04f 0200 	mov.w	r2, #0
 8004856:	f04f 0300 	mov.w	r3, #0
 800485a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800485e:	4629      	mov	r1, r5
 8004860:	008b      	lsls	r3, r1, #2
 8004862:	4621      	mov	r1, r4
 8004864:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004868:	4621      	mov	r1, r4
 800486a:	008a      	lsls	r2, r1, #2
 800486c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004870:	f7fc f8fc 	bl	8000a6c <__aeabi_uldivmod>
 8004874:	4602      	mov	r2, r0
 8004876:	460b      	mov	r3, r1
 8004878:	4b60      	ldr	r3, [pc, #384]	; (80049fc <UART_SetConfig+0x4e4>)
 800487a:	fba3 2302 	umull	r2, r3, r3, r2
 800487e:	095b      	lsrs	r3, r3, #5
 8004880:	011c      	lsls	r4, r3, #4
 8004882:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004886:	2200      	movs	r2, #0
 8004888:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800488c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004890:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004894:	4642      	mov	r2, r8
 8004896:	464b      	mov	r3, r9
 8004898:	1891      	adds	r1, r2, r2
 800489a:	61b9      	str	r1, [r7, #24]
 800489c:	415b      	adcs	r3, r3
 800489e:	61fb      	str	r3, [r7, #28]
 80048a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048a4:	4641      	mov	r1, r8
 80048a6:	1851      	adds	r1, r2, r1
 80048a8:	6139      	str	r1, [r7, #16]
 80048aa:	4649      	mov	r1, r9
 80048ac:	414b      	adcs	r3, r1
 80048ae:	617b      	str	r3, [r7, #20]
 80048b0:	f04f 0200 	mov.w	r2, #0
 80048b4:	f04f 0300 	mov.w	r3, #0
 80048b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80048bc:	4659      	mov	r1, fp
 80048be:	00cb      	lsls	r3, r1, #3
 80048c0:	4651      	mov	r1, sl
 80048c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048c6:	4651      	mov	r1, sl
 80048c8:	00ca      	lsls	r2, r1, #3
 80048ca:	4610      	mov	r0, r2
 80048cc:	4619      	mov	r1, r3
 80048ce:	4603      	mov	r3, r0
 80048d0:	4642      	mov	r2, r8
 80048d2:	189b      	adds	r3, r3, r2
 80048d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80048d8:	464b      	mov	r3, r9
 80048da:	460a      	mov	r2, r1
 80048dc:	eb42 0303 	adc.w	r3, r2, r3
 80048e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80048e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	67bb      	str	r3, [r7, #120]	; 0x78
 80048ee:	67fa      	str	r2, [r7, #124]	; 0x7c
 80048f0:	f04f 0200 	mov.w	r2, #0
 80048f4:	f04f 0300 	mov.w	r3, #0
 80048f8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80048fc:	4649      	mov	r1, r9
 80048fe:	008b      	lsls	r3, r1, #2
 8004900:	4641      	mov	r1, r8
 8004902:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004906:	4641      	mov	r1, r8
 8004908:	008a      	lsls	r2, r1, #2
 800490a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800490e:	f7fc f8ad 	bl	8000a6c <__aeabi_uldivmod>
 8004912:	4602      	mov	r2, r0
 8004914:	460b      	mov	r3, r1
 8004916:	4b39      	ldr	r3, [pc, #228]	; (80049fc <UART_SetConfig+0x4e4>)
 8004918:	fba3 1302 	umull	r1, r3, r3, r2
 800491c:	095b      	lsrs	r3, r3, #5
 800491e:	2164      	movs	r1, #100	; 0x64
 8004920:	fb01 f303 	mul.w	r3, r1, r3
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	011b      	lsls	r3, r3, #4
 8004928:	3332      	adds	r3, #50	; 0x32
 800492a:	4a34      	ldr	r2, [pc, #208]	; (80049fc <UART_SetConfig+0x4e4>)
 800492c:	fba2 2303 	umull	r2, r3, r2, r3
 8004930:	095b      	lsrs	r3, r3, #5
 8004932:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004936:	441c      	add	r4, r3
 8004938:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800493c:	2200      	movs	r2, #0
 800493e:	673b      	str	r3, [r7, #112]	; 0x70
 8004940:	677a      	str	r2, [r7, #116]	; 0x74
 8004942:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004946:	4642      	mov	r2, r8
 8004948:	464b      	mov	r3, r9
 800494a:	1891      	adds	r1, r2, r2
 800494c:	60b9      	str	r1, [r7, #8]
 800494e:	415b      	adcs	r3, r3
 8004950:	60fb      	str	r3, [r7, #12]
 8004952:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004956:	4641      	mov	r1, r8
 8004958:	1851      	adds	r1, r2, r1
 800495a:	6039      	str	r1, [r7, #0]
 800495c:	4649      	mov	r1, r9
 800495e:	414b      	adcs	r3, r1
 8004960:	607b      	str	r3, [r7, #4]
 8004962:	f04f 0200 	mov.w	r2, #0
 8004966:	f04f 0300 	mov.w	r3, #0
 800496a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800496e:	4659      	mov	r1, fp
 8004970:	00cb      	lsls	r3, r1, #3
 8004972:	4651      	mov	r1, sl
 8004974:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004978:	4651      	mov	r1, sl
 800497a:	00ca      	lsls	r2, r1, #3
 800497c:	4610      	mov	r0, r2
 800497e:	4619      	mov	r1, r3
 8004980:	4603      	mov	r3, r0
 8004982:	4642      	mov	r2, r8
 8004984:	189b      	adds	r3, r3, r2
 8004986:	66bb      	str	r3, [r7, #104]	; 0x68
 8004988:	464b      	mov	r3, r9
 800498a:	460a      	mov	r2, r1
 800498c:	eb42 0303 	adc.w	r3, r2, r3
 8004990:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	663b      	str	r3, [r7, #96]	; 0x60
 800499c:	667a      	str	r2, [r7, #100]	; 0x64
 800499e:	f04f 0200 	mov.w	r2, #0
 80049a2:	f04f 0300 	mov.w	r3, #0
 80049a6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80049aa:	4649      	mov	r1, r9
 80049ac:	008b      	lsls	r3, r1, #2
 80049ae:	4641      	mov	r1, r8
 80049b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049b4:	4641      	mov	r1, r8
 80049b6:	008a      	lsls	r2, r1, #2
 80049b8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80049bc:	f7fc f856 	bl	8000a6c <__aeabi_uldivmod>
 80049c0:	4602      	mov	r2, r0
 80049c2:	460b      	mov	r3, r1
 80049c4:	4b0d      	ldr	r3, [pc, #52]	; (80049fc <UART_SetConfig+0x4e4>)
 80049c6:	fba3 1302 	umull	r1, r3, r3, r2
 80049ca:	095b      	lsrs	r3, r3, #5
 80049cc:	2164      	movs	r1, #100	; 0x64
 80049ce:	fb01 f303 	mul.w	r3, r1, r3
 80049d2:	1ad3      	subs	r3, r2, r3
 80049d4:	011b      	lsls	r3, r3, #4
 80049d6:	3332      	adds	r3, #50	; 0x32
 80049d8:	4a08      	ldr	r2, [pc, #32]	; (80049fc <UART_SetConfig+0x4e4>)
 80049da:	fba2 2303 	umull	r2, r3, r2, r3
 80049de:	095b      	lsrs	r3, r3, #5
 80049e0:	f003 020f 	and.w	r2, r3, #15
 80049e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4422      	add	r2, r4
 80049ec:	609a      	str	r2, [r3, #8]
}
 80049ee:	bf00      	nop
 80049f0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80049f4:	46bd      	mov	sp, r7
 80049f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049fa:	bf00      	nop
 80049fc:	51eb851f 	.word	0x51eb851f

08004a00 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a00:	b084      	sub	sp, #16
 8004a02:	b580      	push	{r7, lr}
 8004a04:	b084      	sub	sp, #16
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
 8004a0a:	f107 001c 	add.w	r0, r7, #28
 8004a0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d122      	bne.n	8004a5e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a1c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004a2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004a40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d105      	bne.n	8004a52 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 faa2 	bl	8004f9c <USB_CoreReset>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	73fb      	strb	r3, [r7, #15]
 8004a5c:	e01a      	b.n	8004a94 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f000 fa96 	bl	8004f9c <USB_CoreReset>
 8004a70:	4603      	mov	r3, r0
 8004a72:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004a74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d106      	bne.n	8004a88 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a7e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	639a      	str	r2, [r3, #56]	; 0x38
 8004a86:	e005      	b.n	8004a94 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a8c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d10b      	bne.n	8004ab2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	f043 0206 	orr.w	r2, r3, #6
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	f043 0220 	orr.w	r2, r3, #32
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3710      	adds	r7, #16
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004abe:	b004      	add	sp, #16
 8004ac0:	4770      	bx	lr

08004ac2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ac2:	b480      	push	{r7}
 8004ac4:	b083      	sub	sp, #12
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	f023 0201 	bic.w	r2, r3, #1
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ad6:	2300      	movs	r3, #0
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	370c      	adds	r7, #12
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	460b      	mov	r3, r1
 8004aee:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004af0:	2300      	movs	r3, #0
 8004af2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004b00:	78fb      	ldrb	r3, [r7, #3]
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d115      	bne.n	8004b32 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004b12:	2001      	movs	r0, #1
 8004b14:	f7fd f818 	bl	8001b48 <HAL_Delay>
      ms++;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	3301      	adds	r3, #1
 8004b1c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f000 fa2e 	bl	8004f80 <USB_GetMode>
 8004b24:	4603      	mov	r3, r0
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d01e      	beq.n	8004b68 <USB_SetCurrentMode+0x84>
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2b31      	cmp	r3, #49	; 0x31
 8004b2e:	d9f0      	bls.n	8004b12 <USB_SetCurrentMode+0x2e>
 8004b30:	e01a      	b.n	8004b68 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004b32:	78fb      	ldrb	r3, [r7, #3]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d115      	bne.n	8004b64 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004b44:	2001      	movs	r0, #1
 8004b46:	f7fc ffff 	bl	8001b48 <HAL_Delay>
      ms++;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	3301      	adds	r3, #1
 8004b4e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f000 fa15 	bl	8004f80 <USB_GetMode>
 8004b56:	4603      	mov	r3, r0
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d005      	beq.n	8004b68 <USB_SetCurrentMode+0x84>
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2b31      	cmp	r3, #49	; 0x31
 8004b60:	d9f0      	bls.n	8004b44 <USB_SetCurrentMode+0x60>
 8004b62:	e001      	b.n	8004b68 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	e005      	b.n	8004b74 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2b32      	cmp	r3, #50	; 0x32
 8004b6c:	d101      	bne.n	8004b72 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e000      	b.n	8004b74 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004b72:	2300      	movs	r3, #0
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3710      	adds	r7, #16
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}

08004b7c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004b7c:	b084      	sub	sp, #16
 8004b7e:	b580      	push	{r7, lr}
 8004b80:	b086      	sub	sp, #24
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	6078      	str	r0, [r7, #4]
 8004b86:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004b8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004b96:	2300      	movs	r3, #0
 8004b98:	613b      	str	r3, [r7, #16]
 8004b9a:	e009      	b.n	8004bb0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	3340      	adds	r3, #64	; 0x40
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	4413      	add	r3, r2
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	3301      	adds	r3, #1
 8004bae:	613b      	str	r3, [r7, #16]
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	2b0e      	cmp	r3, #14
 8004bb4:	d9f2      	bls.n	8004b9c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004bb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d11c      	bne.n	8004bf6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	68fa      	ldr	r2, [r7, #12]
 8004bc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bca:	f043 0302 	orr.w	r3, r3, #2
 8004bce:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bec:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	639a      	str	r2, [r3, #56]	; 0x38
 8004bf4:	e00b      	b.n	8004c0e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bfa:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c06:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004c14:	461a      	mov	r2, r3
 8004c16:	2300      	movs	r3, #0
 8004c18:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c20:	4619      	mov	r1, r3
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c28:	461a      	mov	r2, r3
 8004c2a:	680b      	ldr	r3, [r1, #0]
 8004c2c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d10c      	bne.n	8004c4e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d104      	bne.n	8004c44 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004c3a:	2100      	movs	r1, #0
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f000 f965 	bl	8004f0c <USB_SetDevSpeed>
 8004c42:	e008      	b.n	8004c56 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004c44:	2101      	movs	r1, #1
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 f960 	bl	8004f0c <USB_SetDevSpeed>
 8004c4c:	e003      	b.n	8004c56 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004c4e:	2103      	movs	r1, #3
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f000 f95b 	bl	8004f0c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004c56:	2110      	movs	r1, #16
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f000 f8f3 	bl	8004e44 <USB_FlushTxFifo>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d001      	beq.n	8004c68 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f000 f91f 	bl	8004eac <USB_FlushRxFifo>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d001      	beq.n	8004c78 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c7e:	461a      	mov	r2, r3
 8004c80:	2300      	movs	r3, #0
 8004c82:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c96:	461a      	mov	r2, r3
 8004c98:	2300      	movs	r3, #0
 8004c9a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	613b      	str	r3, [r7, #16]
 8004ca0:	e043      	b.n	8004d2a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	015a      	lsls	r2, r3, #5
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	4413      	add	r3, r2
 8004caa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004cb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004cb8:	d118      	bne.n	8004cec <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d10a      	bne.n	8004cd6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	015a      	lsls	r2, r3, #5
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	4413      	add	r3, r2
 8004cc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ccc:	461a      	mov	r2, r3
 8004cce:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004cd2:	6013      	str	r3, [r2, #0]
 8004cd4:	e013      	b.n	8004cfe <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	015a      	lsls	r2, r3, #5
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	4413      	add	r3, r2
 8004cde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004ce8:	6013      	str	r3, [r2, #0]
 8004cea:	e008      	b.n	8004cfe <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	015a      	lsls	r2, r3, #5
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	4413      	add	r3, r2
 8004cf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	015a      	lsls	r2, r3, #5
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	4413      	add	r3, r2
 8004d06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d0a:	461a      	mov	r2, r3
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	015a      	lsls	r2, r3, #5
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	4413      	add	r3, r2
 8004d18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004d22:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	3301      	adds	r3, #1
 8004d28:	613b      	str	r3, [r7, #16]
 8004d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2c:	693a      	ldr	r2, [r7, #16]
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d3b7      	bcc.n	8004ca2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d32:	2300      	movs	r3, #0
 8004d34:	613b      	str	r3, [r7, #16]
 8004d36:	e043      	b.n	8004dc0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	015a      	lsls	r2, r3, #5
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	4413      	add	r3, r2
 8004d40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d4e:	d118      	bne.n	8004d82 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d10a      	bne.n	8004d6c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	015a      	lsls	r2, r3, #5
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	4413      	add	r3, r2
 8004d5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d62:	461a      	mov	r2, r3
 8004d64:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004d68:	6013      	str	r3, [r2, #0]
 8004d6a:	e013      	b.n	8004d94 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	015a      	lsls	r2, r3, #5
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	4413      	add	r3, r2
 8004d74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d78:	461a      	mov	r2, r3
 8004d7a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004d7e:	6013      	str	r3, [r2, #0]
 8004d80:	e008      	b.n	8004d94 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	015a      	lsls	r2, r3, #5
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	4413      	add	r3, r2
 8004d8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d8e:	461a      	mov	r2, r3
 8004d90:	2300      	movs	r3, #0
 8004d92:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	015a      	lsls	r2, r3, #5
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	4413      	add	r3, r2
 8004d9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004da0:	461a      	mov	r2, r3
 8004da2:	2300      	movs	r3, #0
 8004da4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	015a      	lsls	r2, r3, #5
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	4413      	add	r3, r2
 8004dae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004db2:	461a      	mov	r2, r3
 8004db4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004db8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	3301      	adds	r3, #1
 8004dbe:	613b      	str	r3, [r7, #16]
 8004dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc2:	693a      	ldr	r2, [r7, #16]
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d3b7      	bcc.n	8004d38 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dce:	691b      	ldr	r3, [r3, #16]
 8004dd0:	68fa      	ldr	r2, [r7, #12]
 8004dd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004dd6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004dda:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004de8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d105      	bne.n	8004dfc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	699b      	ldr	r3, [r3, #24]
 8004df4:	f043 0210 	orr.w	r2, r3, #16
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	699a      	ldr	r2, [r3, #24]
 8004e00:	4b0f      	ldr	r3, [pc, #60]	; (8004e40 <USB_DevInit+0x2c4>)
 8004e02:	4313      	orrs	r3, r2
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004e08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d005      	beq.n	8004e1a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	699b      	ldr	r3, [r3, #24]
 8004e12:	f043 0208 	orr.w	r2, r3, #8
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004e1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d107      	bne.n	8004e30 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	699b      	ldr	r3, [r3, #24]
 8004e24:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e28:	f043 0304 	orr.w	r3, r3, #4
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004e30:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3718      	adds	r7, #24
 8004e36:	46bd      	mov	sp, r7
 8004e38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e3c:	b004      	add	sp, #16
 8004e3e:	4770      	bx	lr
 8004e40:	803c3800 	.word	0x803c3800

08004e44 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b085      	sub	sp, #20
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	3301      	adds	r3, #1
 8004e56:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	4a13      	ldr	r2, [pc, #76]	; (8004ea8 <USB_FlushTxFifo+0x64>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d901      	bls.n	8004e64 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004e60:	2303      	movs	r3, #3
 8004e62:	e01b      	b.n	8004e9c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	691b      	ldr	r3, [r3, #16]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	daf2      	bge.n	8004e52 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	019b      	lsls	r3, r3, #6
 8004e74:	f043 0220 	orr.w	r2, r3, #32
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	3301      	adds	r3, #1
 8004e80:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	4a08      	ldr	r2, [pc, #32]	; (8004ea8 <USB_FlushTxFifo+0x64>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d901      	bls.n	8004e8e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	e006      	b.n	8004e9c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	691b      	ldr	r3, [r3, #16]
 8004e92:	f003 0320 	and.w	r3, r3, #32
 8004e96:	2b20      	cmp	r3, #32
 8004e98:	d0f0      	beq.n	8004e7c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004e9a:	2300      	movs	r3, #0
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3714      	adds	r7, #20
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr
 8004ea8:	00030d40 	.word	0x00030d40

08004eac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b085      	sub	sp, #20
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	3301      	adds	r3, #1
 8004ebc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	4a11      	ldr	r2, [pc, #68]	; (8004f08 <USB_FlushRxFifo+0x5c>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d901      	bls.n	8004eca <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e018      	b.n	8004efc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	691b      	ldr	r3, [r3, #16]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	daf2      	bge.n	8004eb8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2210      	movs	r2, #16
 8004eda:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	3301      	adds	r3, #1
 8004ee0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	4a08      	ldr	r2, [pc, #32]	; (8004f08 <USB_FlushRxFifo+0x5c>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d901      	bls.n	8004eee <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	e006      	b.n	8004efc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	f003 0310 	and.w	r3, r3, #16
 8004ef6:	2b10      	cmp	r3, #16
 8004ef8:	d0f0      	beq.n	8004edc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004efa:	2300      	movs	r3, #0
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3714      	adds	r7, #20
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr
 8004f08:	00030d40 	.word	0x00030d40

08004f0c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b085      	sub	sp, #20
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	460b      	mov	r3, r1
 8004f16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	78fb      	ldrb	r3, [r7, #3]
 8004f26:	68f9      	ldr	r1, [r7, #12]
 8004f28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004f30:	2300      	movs	r3, #0
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3714      	adds	r7, #20
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr

08004f3e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004f3e:	b480      	push	{r7}
 8004f40:	b085      	sub	sp, #20
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	68fa      	ldr	r2, [r7, #12]
 8004f54:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004f58:	f023 0303 	bic.w	r3, r3, #3
 8004f5c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	68fa      	ldr	r2, [r7, #12]
 8004f68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f6c:	f043 0302 	orr.w	r3, r3, #2
 8004f70:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004f72:	2300      	movs	r3, #0
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3714      	adds	r7, #20
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	695b      	ldr	r3, [r3, #20]
 8004f8c:	f003 0301 	and.w	r3, r3, #1
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	370c      	adds	r7, #12
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr

08004f9c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b085      	sub	sp, #20
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	3301      	adds	r3, #1
 8004fac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	4a13      	ldr	r2, [pc, #76]	; (8005000 <USB_CoreReset+0x64>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d901      	bls.n	8004fba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	e01b      	b.n	8004ff2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	691b      	ldr	r3, [r3, #16]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	daf2      	bge.n	8004fa8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	f043 0201 	orr.w	r2, r3, #1
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	3301      	adds	r3, #1
 8004fd6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	4a09      	ldr	r2, [pc, #36]	; (8005000 <USB_CoreReset+0x64>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d901      	bls.n	8004fe4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004fe0:	2303      	movs	r3, #3
 8004fe2:	e006      	b.n	8004ff2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	691b      	ldr	r3, [r3, #16]
 8004fe8:	f003 0301 	and.w	r3, r3, #1
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d0f0      	beq.n	8004fd2 <USB_CoreReset+0x36>

  return HAL_OK;
 8004ff0:	2300      	movs	r3, #0
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3714      	adds	r7, #20
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr
 8004ffe:	bf00      	nop
 8005000:	00030d40 	.word	0x00030d40

08005004 <__errno>:
 8005004:	4b01      	ldr	r3, [pc, #4]	; (800500c <__errno+0x8>)
 8005006:	6818      	ldr	r0, [r3, #0]
 8005008:	4770      	bx	lr
 800500a:	bf00      	nop
 800500c:	2000000c 	.word	0x2000000c

08005010 <__libc_init_array>:
 8005010:	b570      	push	{r4, r5, r6, lr}
 8005012:	4d0d      	ldr	r5, [pc, #52]	; (8005048 <__libc_init_array+0x38>)
 8005014:	4c0d      	ldr	r4, [pc, #52]	; (800504c <__libc_init_array+0x3c>)
 8005016:	1b64      	subs	r4, r4, r5
 8005018:	10a4      	asrs	r4, r4, #2
 800501a:	2600      	movs	r6, #0
 800501c:	42a6      	cmp	r6, r4
 800501e:	d109      	bne.n	8005034 <__libc_init_array+0x24>
 8005020:	4d0b      	ldr	r5, [pc, #44]	; (8005050 <__libc_init_array+0x40>)
 8005022:	4c0c      	ldr	r4, [pc, #48]	; (8005054 <__libc_init_array+0x44>)
 8005024:	f001 f824 	bl	8006070 <_init>
 8005028:	1b64      	subs	r4, r4, r5
 800502a:	10a4      	asrs	r4, r4, #2
 800502c:	2600      	movs	r6, #0
 800502e:	42a6      	cmp	r6, r4
 8005030:	d105      	bne.n	800503e <__libc_init_array+0x2e>
 8005032:	bd70      	pop	{r4, r5, r6, pc}
 8005034:	f855 3b04 	ldr.w	r3, [r5], #4
 8005038:	4798      	blx	r3
 800503a:	3601      	adds	r6, #1
 800503c:	e7ee      	b.n	800501c <__libc_init_array+0xc>
 800503e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005042:	4798      	blx	r3
 8005044:	3601      	adds	r6, #1
 8005046:	e7f2      	b.n	800502e <__libc_init_array+0x1e>
 8005048:	08006158 	.word	0x08006158
 800504c:	08006158 	.word	0x08006158
 8005050:	08006158 	.word	0x08006158
 8005054:	0800615c 	.word	0x0800615c

08005058 <memset>:
 8005058:	4402      	add	r2, r0
 800505a:	4603      	mov	r3, r0
 800505c:	4293      	cmp	r3, r2
 800505e:	d100      	bne.n	8005062 <memset+0xa>
 8005060:	4770      	bx	lr
 8005062:	f803 1b01 	strb.w	r1, [r3], #1
 8005066:	e7f9      	b.n	800505c <memset+0x4>

08005068 <iprintf>:
 8005068:	b40f      	push	{r0, r1, r2, r3}
 800506a:	4b0a      	ldr	r3, [pc, #40]	; (8005094 <iprintf+0x2c>)
 800506c:	b513      	push	{r0, r1, r4, lr}
 800506e:	681c      	ldr	r4, [r3, #0]
 8005070:	b124      	cbz	r4, 800507c <iprintf+0x14>
 8005072:	69a3      	ldr	r3, [r4, #24]
 8005074:	b913      	cbnz	r3, 800507c <iprintf+0x14>
 8005076:	4620      	mov	r0, r4
 8005078:	f000 fa5e 	bl	8005538 <__sinit>
 800507c:	ab05      	add	r3, sp, #20
 800507e:	9a04      	ldr	r2, [sp, #16]
 8005080:	68a1      	ldr	r1, [r4, #8]
 8005082:	9301      	str	r3, [sp, #4]
 8005084:	4620      	mov	r0, r4
 8005086:	f000 fc67 	bl	8005958 <_vfiprintf_r>
 800508a:	b002      	add	sp, #8
 800508c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005090:	b004      	add	sp, #16
 8005092:	4770      	bx	lr
 8005094:	2000000c 	.word	0x2000000c

08005098 <_puts_r>:
 8005098:	b570      	push	{r4, r5, r6, lr}
 800509a:	460e      	mov	r6, r1
 800509c:	4605      	mov	r5, r0
 800509e:	b118      	cbz	r0, 80050a8 <_puts_r+0x10>
 80050a0:	6983      	ldr	r3, [r0, #24]
 80050a2:	b90b      	cbnz	r3, 80050a8 <_puts_r+0x10>
 80050a4:	f000 fa48 	bl	8005538 <__sinit>
 80050a8:	69ab      	ldr	r3, [r5, #24]
 80050aa:	68ac      	ldr	r4, [r5, #8]
 80050ac:	b913      	cbnz	r3, 80050b4 <_puts_r+0x1c>
 80050ae:	4628      	mov	r0, r5
 80050b0:	f000 fa42 	bl	8005538 <__sinit>
 80050b4:	4b2c      	ldr	r3, [pc, #176]	; (8005168 <_puts_r+0xd0>)
 80050b6:	429c      	cmp	r4, r3
 80050b8:	d120      	bne.n	80050fc <_puts_r+0x64>
 80050ba:	686c      	ldr	r4, [r5, #4]
 80050bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80050be:	07db      	lsls	r3, r3, #31
 80050c0:	d405      	bmi.n	80050ce <_puts_r+0x36>
 80050c2:	89a3      	ldrh	r3, [r4, #12]
 80050c4:	0598      	lsls	r0, r3, #22
 80050c6:	d402      	bmi.n	80050ce <_puts_r+0x36>
 80050c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80050ca:	f000 fad3 	bl	8005674 <__retarget_lock_acquire_recursive>
 80050ce:	89a3      	ldrh	r3, [r4, #12]
 80050d0:	0719      	lsls	r1, r3, #28
 80050d2:	d51d      	bpl.n	8005110 <_puts_r+0x78>
 80050d4:	6923      	ldr	r3, [r4, #16]
 80050d6:	b1db      	cbz	r3, 8005110 <_puts_r+0x78>
 80050d8:	3e01      	subs	r6, #1
 80050da:	68a3      	ldr	r3, [r4, #8]
 80050dc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80050e0:	3b01      	subs	r3, #1
 80050e2:	60a3      	str	r3, [r4, #8]
 80050e4:	bb39      	cbnz	r1, 8005136 <_puts_r+0x9e>
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	da38      	bge.n	800515c <_puts_r+0xc4>
 80050ea:	4622      	mov	r2, r4
 80050ec:	210a      	movs	r1, #10
 80050ee:	4628      	mov	r0, r5
 80050f0:	f000 f848 	bl	8005184 <__swbuf_r>
 80050f4:	3001      	adds	r0, #1
 80050f6:	d011      	beq.n	800511c <_puts_r+0x84>
 80050f8:	250a      	movs	r5, #10
 80050fa:	e011      	b.n	8005120 <_puts_r+0x88>
 80050fc:	4b1b      	ldr	r3, [pc, #108]	; (800516c <_puts_r+0xd4>)
 80050fe:	429c      	cmp	r4, r3
 8005100:	d101      	bne.n	8005106 <_puts_r+0x6e>
 8005102:	68ac      	ldr	r4, [r5, #8]
 8005104:	e7da      	b.n	80050bc <_puts_r+0x24>
 8005106:	4b1a      	ldr	r3, [pc, #104]	; (8005170 <_puts_r+0xd8>)
 8005108:	429c      	cmp	r4, r3
 800510a:	bf08      	it	eq
 800510c:	68ec      	ldreq	r4, [r5, #12]
 800510e:	e7d5      	b.n	80050bc <_puts_r+0x24>
 8005110:	4621      	mov	r1, r4
 8005112:	4628      	mov	r0, r5
 8005114:	f000 f888 	bl	8005228 <__swsetup_r>
 8005118:	2800      	cmp	r0, #0
 800511a:	d0dd      	beq.n	80050d8 <_puts_r+0x40>
 800511c:	f04f 35ff 	mov.w	r5, #4294967295
 8005120:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005122:	07da      	lsls	r2, r3, #31
 8005124:	d405      	bmi.n	8005132 <_puts_r+0x9a>
 8005126:	89a3      	ldrh	r3, [r4, #12]
 8005128:	059b      	lsls	r3, r3, #22
 800512a:	d402      	bmi.n	8005132 <_puts_r+0x9a>
 800512c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800512e:	f000 faa2 	bl	8005676 <__retarget_lock_release_recursive>
 8005132:	4628      	mov	r0, r5
 8005134:	bd70      	pop	{r4, r5, r6, pc}
 8005136:	2b00      	cmp	r3, #0
 8005138:	da04      	bge.n	8005144 <_puts_r+0xac>
 800513a:	69a2      	ldr	r2, [r4, #24]
 800513c:	429a      	cmp	r2, r3
 800513e:	dc06      	bgt.n	800514e <_puts_r+0xb6>
 8005140:	290a      	cmp	r1, #10
 8005142:	d004      	beq.n	800514e <_puts_r+0xb6>
 8005144:	6823      	ldr	r3, [r4, #0]
 8005146:	1c5a      	adds	r2, r3, #1
 8005148:	6022      	str	r2, [r4, #0]
 800514a:	7019      	strb	r1, [r3, #0]
 800514c:	e7c5      	b.n	80050da <_puts_r+0x42>
 800514e:	4622      	mov	r2, r4
 8005150:	4628      	mov	r0, r5
 8005152:	f000 f817 	bl	8005184 <__swbuf_r>
 8005156:	3001      	adds	r0, #1
 8005158:	d1bf      	bne.n	80050da <_puts_r+0x42>
 800515a:	e7df      	b.n	800511c <_puts_r+0x84>
 800515c:	6823      	ldr	r3, [r4, #0]
 800515e:	250a      	movs	r5, #10
 8005160:	1c5a      	adds	r2, r3, #1
 8005162:	6022      	str	r2, [r4, #0]
 8005164:	701d      	strb	r5, [r3, #0]
 8005166:	e7db      	b.n	8005120 <_puts_r+0x88>
 8005168:	080060dc 	.word	0x080060dc
 800516c:	080060fc 	.word	0x080060fc
 8005170:	080060bc 	.word	0x080060bc

08005174 <puts>:
 8005174:	4b02      	ldr	r3, [pc, #8]	; (8005180 <puts+0xc>)
 8005176:	4601      	mov	r1, r0
 8005178:	6818      	ldr	r0, [r3, #0]
 800517a:	f7ff bf8d 	b.w	8005098 <_puts_r>
 800517e:	bf00      	nop
 8005180:	2000000c 	.word	0x2000000c

08005184 <__swbuf_r>:
 8005184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005186:	460e      	mov	r6, r1
 8005188:	4614      	mov	r4, r2
 800518a:	4605      	mov	r5, r0
 800518c:	b118      	cbz	r0, 8005196 <__swbuf_r+0x12>
 800518e:	6983      	ldr	r3, [r0, #24]
 8005190:	b90b      	cbnz	r3, 8005196 <__swbuf_r+0x12>
 8005192:	f000 f9d1 	bl	8005538 <__sinit>
 8005196:	4b21      	ldr	r3, [pc, #132]	; (800521c <__swbuf_r+0x98>)
 8005198:	429c      	cmp	r4, r3
 800519a:	d12b      	bne.n	80051f4 <__swbuf_r+0x70>
 800519c:	686c      	ldr	r4, [r5, #4]
 800519e:	69a3      	ldr	r3, [r4, #24]
 80051a0:	60a3      	str	r3, [r4, #8]
 80051a2:	89a3      	ldrh	r3, [r4, #12]
 80051a4:	071a      	lsls	r2, r3, #28
 80051a6:	d52f      	bpl.n	8005208 <__swbuf_r+0x84>
 80051a8:	6923      	ldr	r3, [r4, #16]
 80051aa:	b36b      	cbz	r3, 8005208 <__swbuf_r+0x84>
 80051ac:	6923      	ldr	r3, [r4, #16]
 80051ae:	6820      	ldr	r0, [r4, #0]
 80051b0:	1ac0      	subs	r0, r0, r3
 80051b2:	6963      	ldr	r3, [r4, #20]
 80051b4:	b2f6      	uxtb	r6, r6
 80051b6:	4283      	cmp	r3, r0
 80051b8:	4637      	mov	r7, r6
 80051ba:	dc04      	bgt.n	80051c6 <__swbuf_r+0x42>
 80051bc:	4621      	mov	r1, r4
 80051be:	4628      	mov	r0, r5
 80051c0:	f000 f926 	bl	8005410 <_fflush_r>
 80051c4:	bb30      	cbnz	r0, 8005214 <__swbuf_r+0x90>
 80051c6:	68a3      	ldr	r3, [r4, #8]
 80051c8:	3b01      	subs	r3, #1
 80051ca:	60a3      	str	r3, [r4, #8]
 80051cc:	6823      	ldr	r3, [r4, #0]
 80051ce:	1c5a      	adds	r2, r3, #1
 80051d0:	6022      	str	r2, [r4, #0]
 80051d2:	701e      	strb	r6, [r3, #0]
 80051d4:	6963      	ldr	r3, [r4, #20]
 80051d6:	3001      	adds	r0, #1
 80051d8:	4283      	cmp	r3, r0
 80051da:	d004      	beq.n	80051e6 <__swbuf_r+0x62>
 80051dc:	89a3      	ldrh	r3, [r4, #12]
 80051de:	07db      	lsls	r3, r3, #31
 80051e0:	d506      	bpl.n	80051f0 <__swbuf_r+0x6c>
 80051e2:	2e0a      	cmp	r6, #10
 80051e4:	d104      	bne.n	80051f0 <__swbuf_r+0x6c>
 80051e6:	4621      	mov	r1, r4
 80051e8:	4628      	mov	r0, r5
 80051ea:	f000 f911 	bl	8005410 <_fflush_r>
 80051ee:	b988      	cbnz	r0, 8005214 <__swbuf_r+0x90>
 80051f0:	4638      	mov	r0, r7
 80051f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051f4:	4b0a      	ldr	r3, [pc, #40]	; (8005220 <__swbuf_r+0x9c>)
 80051f6:	429c      	cmp	r4, r3
 80051f8:	d101      	bne.n	80051fe <__swbuf_r+0x7a>
 80051fa:	68ac      	ldr	r4, [r5, #8]
 80051fc:	e7cf      	b.n	800519e <__swbuf_r+0x1a>
 80051fe:	4b09      	ldr	r3, [pc, #36]	; (8005224 <__swbuf_r+0xa0>)
 8005200:	429c      	cmp	r4, r3
 8005202:	bf08      	it	eq
 8005204:	68ec      	ldreq	r4, [r5, #12]
 8005206:	e7ca      	b.n	800519e <__swbuf_r+0x1a>
 8005208:	4621      	mov	r1, r4
 800520a:	4628      	mov	r0, r5
 800520c:	f000 f80c 	bl	8005228 <__swsetup_r>
 8005210:	2800      	cmp	r0, #0
 8005212:	d0cb      	beq.n	80051ac <__swbuf_r+0x28>
 8005214:	f04f 37ff 	mov.w	r7, #4294967295
 8005218:	e7ea      	b.n	80051f0 <__swbuf_r+0x6c>
 800521a:	bf00      	nop
 800521c:	080060dc 	.word	0x080060dc
 8005220:	080060fc 	.word	0x080060fc
 8005224:	080060bc 	.word	0x080060bc

08005228 <__swsetup_r>:
 8005228:	4b32      	ldr	r3, [pc, #200]	; (80052f4 <__swsetup_r+0xcc>)
 800522a:	b570      	push	{r4, r5, r6, lr}
 800522c:	681d      	ldr	r5, [r3, #0]
 800522e:	4606      	mov	r6, r0
 8005230:	460c      	mov	r4, r1
 8005232:	b125      	cbz	r5, 800523e <__swsetup_r+0x16>
 8005234:	69ab      	ldr	r3, [r5, #24]
 8005236:	b913      	cbnz	r3, 800523e <__swsetup_r+0x16>
 8005238:	4628      	mov	r0, r5
 800523a:	f000 f97d 	bl	8005538 <__sinit>
 800523e:	4b2e      	ldr	r3, [pc, #184]	; (80052f8 <__swsetup_r+0xd0>)
 8005240:	429c      	cmp	r4, r3
 8005242:	d10f      	bne.n	8005264 <__swsetup_r+0x3c>
 8005244:	686c      	ldr	r4, [r5, #4]
 8005246:	89a3      	ldrh	r3, [r4, #12]
 8005248:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800524c:	0719      	lsls	r1, r3, #28
 800524e:	d42c      	bmi.n	80052aa <__swsetup_r+0x82>
 8005250:	06dd      	lsls	r5, r3, #27
 8005252:	d411      	bmi.n	8005278 <__swsetup_r+0x50>
 8005254:	2309      	movs	r3, #9
 8005256:	6033      	str	r3, [r6, #0]
 8005258:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800525c:	81a3      	strh	r3, [r4, #12]
 800525e:	f04f 30ff 	mov.w	r0, #4294967295
 8005262:	e03e      	b.n	80052e2 <__swsetup_r+0xba>
 8005264:	4b25      	ldr	r3, [pc, #148]	; (80052fc <__swsetup_r+0xd4>)
 8005266:	429c      	cmp	r4, r3
 8005268:	d101      	bne.n	800526e <__swsetup_r+0x46>
 800526a:	68ac      	ldr	r4, [r5, #8]
 800526c:	e7eb      	b.n	8005246 <__swsetup_r+0x1e>
 800526e:	4b24      	ldr	r3, [pc, #144]	; (8005300 <__swsetup_r+0xd8>)
 8005270:	429c      	cmp	r4, r3
 8005272:	bf08      	it	eq
 8005274:	68ec      	ldreq	r4, [r5, #12]
 8005276:	e7e6      	b.n	8005246 <__swsetup_r+0x1e>
 8005278:	0758      	lsls	r0, r3, #29
 800527a:	d512      	bpl.n	80052a2 <__swsetup_r+0x7a>
 800527c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800527e:	b141      	cbz	r1, 8005292 <__swsetup_r+0x6a>
 8005280:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005284:	4299      	cmp	r1, r3
 8005286:	d002      	beq.n	800528e <__swsetup_r+0x66>
 8005288:	4630      	mov	r0, r6
 800528a:	f000 fa5b 	bl	8005744 <_free_r>
 800528e:	2300      	movs	r3, #0
 8005290:	6363      	str	r3, [r4, #52]	; 0x34
 8005292:	89a3      	ldrh	r3, [r4, #12]
 8005294:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005298:	81a3      	strh	r3, [r4, #12]
 800529a:	2300      	movs	r3, #0
 800529c:	6063      	str	r3, [r4, #4]
 800529e:	6923      	ldr	r3, [r4, #16]
 80052a0:	6023      	str	r3, [r4, #0]
 80052a2:	89a3      	ldrh	r3, [r4, #12]
 80052a4:	f043 0308 	orr.w	r3, r3, #8
 80052a8:	81a3      	strh	r3, [r4, #12]
 80052aa:	6923      	ldr	r3, [r4, #16]
 80052ac:	b94b      	cbnz	r3, 80052c2 <__swsetup_r+0x9a>
 80052ae:	89a3      	ldrh	r3, [r4, #12]
 80052b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80052b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052b8:	d003      	beq.n	80052c2 <__swsetup_r+0x9a>
 80052ba:	4621      	mov	r1, r4
 80052bc:	4630      	mov	r0, r6
 80052be:	f000 fa01 	bl	80056c4 <__smakebuf_r>
 80052c2:	89a0      	ldrh	r0, [r4, #12]
 80052c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80052c8:	f010 0301 	ands.w	r3, r0, #1
 80052cc:	d00a      	beq.n	80052e4 <__swsetup_r+0xbc>
 80052ce:	2300      	movs	r3, #0
 80052d0:	60a3      	str	r3, [r4, #8]
 80052d2:	6963      	ldr	r3, [r4, #20]
 80052d4:	425b      	negs	r3, r3
 80052d6:	61a3      	str	r3, [r4, #24]
 80052d8:	6923      	ldr	r3, [r4, #16]
 80052da:	b943      	cbnz	r3, 80052ee <__swsetup_r+0xc6>
 80052dc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80052e0:	d1ba      	bne.n	8005258 <__swsetup_r+0x30>
 80052e2:	bd70      	pop	{r4, r5, r6, pc}
 80052e4:	0781      	lsls	r1, r0, #30
 80052e6:	bf58      	it	pl
 80052e8:	6963      	ldrpl	r3, [r4, #20]
 80052ea:	60a3      	str	r3, [r4, #8]
 80052ec:	e7f4      	b.n	80052d8 <__swsetup_r+0xb0>
 80052ee:	2000      	movs	r0, #0
 80052f0:	e7f7      	b.n	80052e2 <__swsetup_r+0xba>
 80052f2:	bf00      	nop
 80052f4:	2000000c 	.word	0x2000000c
 80052f8:	080060dc 	.word	0x080060dc
 80052fc:	080060fc 	.word	0x080060fc
 8005300:	080060bc 	.word	0x080060bc

08005304 <__sflush_r>:
 8005304:	898a      	ldrh	r2, [r1, #12]
 8005306:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800530a:	4605      	mov	r5, r0
 800530c:	0710      	lsls	r0, r2, #28
 800530e:	460c      	mov	r4, r1
 8005310:	d458      	bmi.n	80053c4 <__sflush_r+0xc0>
 8005312:	684b      	ldr	r3, [r1, #4]
 8005314:	2b00      	cmp	r3, #0
 8005316:	dc05      	bgt.n	8005324 <__sflush_r+0x20>
 8005318:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800531a:	2b00      	cmp	r3, #0
 800531c:	dc02      	bgt.n	8005324 <__sflush_r+0x20>
 800531e:	2000      	movs	r0, #0
 8005320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005324:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005326:	2e00      	cmp	r6, #0
 8005328:	d0f9      	beq.n	800531e <__sflush_r+0x1a>
 800532a:	2300      	movs	r3, #0
 800532c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005330:	682f      	ldr	r7, [r5, #0]
 8005332:	602b      	str	r3, [r5, #0]
 8005334:	d032      	beq.n	800539c <__sflush_r+0x98>
 8005336:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005338:	89a3      	ldrh	r3, [r4, #12]
 800533a:	075a      	lsls	r2, r3, #29
 800533c:	d505      	bpl.n	800534a <__sflush_r+0x46>
 800533e:	6863      	ldr	r3, [r4, #4]
 8005340:	1ac0      	subs	r0, r0, r3
 8005342:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005344:	b10b      	cbz	r3, 800534a <__sflush_r+0x46>
 8005346:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005348:	1ac0      	subs	r0, r0, r3
 800534a:	2300      	movs	r3, #0
 800534c:	4602      	mov	r2, r0
 800534e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005350:	6a21      	ldr	r1, [r4, #32]
 8005352:	4628      	mov	r0, r5
 8005354:	47b0      	blx	r6
 8005356:	1c43      	adds	r3, r0, #1
 8005358:	89a3      	ldrh	r3, [r4, #12]
 800535a:	d106      	bne.n	800536a <__sflush_r+0x66>
 800535c:	6829      	ldr	r1, [r5, #0]
 800535e:	291d      	cmp	r1, #29
 8005360:	d82c      	bhi.n	80053bc <__sflush_r+0xb8>
 8005362:	4a2a      	ldr	r2, [pc, #168]	; (800540c <__sflush_r+0x108>)
 8005364:	40ca      	lsrs	r2, r1
 8005366:	07d6      	lsls	r6, r2, #31
 8005368:	d528      	bpl.n	80053bc <__sflush_r+0xb8>
 800536a:	2200      	movs	r2, #0
 800536c:	6062      	str	r2, [r4, #4]
 800536e:	04d9      	lsls	r1, r3, #19
 8005370:	6922      	ldr	r2, [r4, #16]
 8005372:	6022      	str	r2, [r4, #0]
 8005374:	d504      	bpl.n	8005380 <__sflush_r+0x7c>
 8005376:	1c42      	adds	r2, r0, #1
 8005378:	d101      	bne.n	800537e <__sflush_r+0x7a>
 800537a:	682b      	ldr	r3, [r5, #0]
 800537c:	b903      	cbnz	r3, 8005380 <__sflush_r+0x7c>
 800537e:	6560      	str	r0, [r4, #84]	; 0x54
 8005380:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005382:	602f      	str	r7, [r5, #0]
 8005384:	2900      	cmp	r1, #0
 8005386:	d0ca      	beq.n	800531e <__sflush_r+0x1a>
 8005388:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800538c:	4299      	cmp	r1, r3
 800538e:	d002      	beq.n	8005396 <__sflush_r+0x92>
 8005390:	4628      	mov	r0, r5
 8005392:	f000 f9d7 	bl	8005744 <_free_r>
 8005396:	2000      	movs	r0, #0
 8005398:	6360      	str	r0, [r4, #52]	; 0x34
 800539a:	e7c1      	b.n	8005320 <__sflush_r+0x1c>
 800539c:	6a21      	ldr	r1, [r4, #32]
 800539e:	2301      	movs	r3, #1
 80053a0:	4628      	mov	r0, r5
 80053a2:	47b0      	blx	r6
 80053a4:	1c41      	adds	r1, r0, #1
 80053a6:	d1c7      	bne.n	8005338 <__sflush_r+0x34>
 80053a8:	682b      	ldr	r3, [r5, #0]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d0c4      	beq.n	8005338 <__sflush_r+0x34>
 80053ae:	2b1d      	cmp	r3, #29
 80053b0:	d001      	beq.n	80053b6 <__sflush_r+0xb2>
 80053b2:	2b16      	cmp	r3, #22
 80053b4:	d101      	bne.n	80053ba <__sflush_r+0xb6>
 80053b6:	602f      	str	r7, [r5, #0]
 80053b8:	e7b1      	b.n	800531e <__sflush_r+0x1a>
 80053ba:	89a3      	ldrh	r3, [r4, #12]
 80053bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053c0:	81a3      	strh	r3, [r4, #12]
 80053c2:	e7ad      	b.n	8005320 <__sflush_r+0x1c>
 80053c4:	690f      	ldr	r7, [r1, #16]
 80053c6:	2f00      	cmp	r7, #0
 80053c8:	d0a9      	beq.n	800531e <__sflush_r+0x1a>
 80053ca:	0793      	lsls	r3, r2, #30
 80053cc:	680e      	ldr	r6, [r1, #0]
 80053ce:	bf08      	it	eq
 80053d0:	694b      	ldreq	r3, [r1, #20]
 80053d2:	600f      	str	r7, [r1, #0]
 80053d4:	bf18      	it	ne
 80053d6:	2300      	movne	r3, #0
 80053d8:	eba6 0807 	sub.w	r8, r6, r7
 80053dc:	608b      	str	r3, [r1, #8]
 80053de:	f1b8 0f00 	cmp.w	r8, #0
 80053e2:	dd9c      	ble.n	800531e <__sflush_r+0x1a>
 80053e4:	6a21      	ldr	r1, [r4, #32]
 80053e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80053e8:	4643      	mov	r3, r8
 80053ea:	463a      	mov	r2, r7
 80053ec:	4628      	mov	r0, r5
 80053ee:	47b0      	blx	r6
 80053f0:	2800      	cmp	r0, #0
 80053f2:	dc06      	bgt.n	8005402 <__sflush_r+0xfe>
 80053f4:	89a3      	ldrh	r3, [r4, #12]
 80053f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053fa:	81a3      	strh	r3, [r4, #12]
 80053fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005400:	e78e      	b.n	8005320 <__sflush_r+0x1c>
 8005402:	4407      	add	r7, r0
 8005404:	eba8 0800 	sub.w	r8, r8, r0
 8005408:	e7e9      	b.n	80053de <__sflush_r+0xda>
 800540a:	bf00      	nop
 800540c:	20400001 	.word	0x20400001

08005410 <_fflush_r>:
 8005410:	b538      	push	{r3, r4, r5, lr}
 8005412:	690b      	ldr	r3, [r1, #16]
 8005414:	4605      	mov	r5, r0
 8005416:	460c      	mov	r4, r1
 8005418:	b913      	cbnz	r3, 8005420 <_fflush_r+0x10>
 800541a:	2500      	movs	r5, #0
 800541c:	4628      	mov	r0, r5
 800541e:	bd38      	pop	{r3, r4, r5, pc}
 8005420:	b118      	cbz	r0, 800542a <_fflush_r+0x1a>
 8005422:	6983      	ldr	r3, [r0, #24]
 8005424:	b90b      	cbnz	r3, 800542a <_fflush_r+0x1a>
 8005426:	f000 f887 	bl	8005538 <__sinit>
 800542a:	4b14      	ldr	r3, [pc, #80]	; (800547c <_fflush_r+0x6c>)
 800542c:	429c      	cmp	r4, r3
 800542e:	d11b      	bne.n	8005468 <_fflush_r+0x58>
 8005430:	686c      	ldr	r4, [r5, #4]
 8005432:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d0ef      	beq.n	800541a <_fflush_r+0xa>
 800543a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800543c:	07d0      	lsls	r0, r2, #31
 800543e:	d404      	bmi.n	800544a <_fflush_r+0x3a>
 8005440:	0599      	lsls	r1, r3, #22
 8005442:	d402      	bmi.n	800544a <_fflush_r+0x3a>
 8005444:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005446:	f000 f915 	bl	8005674 <__retarget_lock_acquire_recursive>
 800544a:	4628      	mov	r0, r5
 800544c:	4621      	mov	r1, r4
 800544e:	f7ff ff59 	bl	8005304 <__sflush_r>
 8005452:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005454:	07da      	lsls	r2, r3, #31
 8005456:	4605      	mov	r5, r0
 8005458:	d4e0      	bmi.n	800541c <_fflush_r+0xc>
 800545a:	89a3      	ldrh	r3, [r4, #12]
 800545c:	059b      	lsls	r3, r3, #22
 800545e:	d4dd      	bmi.n	800541c <_fflush_r+0xc>
 8005460:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005462:	f000 f908 	bl	8005676 <__retarget_lock_release_recursive>
 8005466:	e7d9      	b.n	800541c <_fflush_r+0xc>
 8005468:	4b05      	ldr	r3, [pc, #20]	; (8005480 <_fflush_r+0x70>)
 800546a:	429c      	cmp	r4, r3
 800546c:	d101      	bne.n	8005472 <_fflush_r+0x62>
 800546e:	68ac      	ldr	r4, [r5, #8]
 8005470:	e7df      	b.n	8005432 <_fflush_r+0x22>
 8005472:	4b04      	ldr	r3, [pc, #16]	; (8005484 <_fflush_r+0x74>)
 8005474:	429c      	cmp	r4, r3
 8005476:	bf08      	it	eq
 8005478:	68ec      	ldreq	r4, [r5, #12]
 800547a:	e7da      	b.n	8005432 <_fflush_r+0x22>
 800547c:	080060dc 	.word	0x080060dc
 8005480:	080060fc 	.word	0x080060fc
 8005484:	080060bc 	.word	0x080060bc

08005488 <std>:
 8005488:	2300      	movs	r3, #0
 800548a:	b510      	push	{r4, lr}
 800548c:	4604      	mov	r4, r0
 800548e:	e9c0 3300 	strd	r3, r3, [r0]
 8005492:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005496:	6083      	str	r3, [r0, #8]
 8005498:	8181      	strh	r1, [r0, #12]
 800549a:	6643      	str	r3, [r0, #100]	; 0x64
 800549c:	81c2      	strh	r2, [r0, #14]
 800549e:	6183      	str	r3, [r0, #24]
 80054a0:	4619      	mov	r1, r3
 80054a2:	2208      	movs	r2, #8
 80054a4:	305c      	adds	r0, #92	; 0x5c
 80054a6:	f7ff fdd7 	bl	8005058 <memset>
 80054aa:	4b05      	ldr	r3, [pc, #20]	; (80054c0 <std+0x38>)
 80054ac:	6263      	str	r3, [r4, #36]	; 0x24
 80054ae:	4b05      	ldr	r3, [pc, #20]	; (80054c4 <std+0x3c>)
 80054b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80054b2:	4b05      	ldr	r3, [pc, #20]	; (80054c8 <std+0x40>)
 80054b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80054b6:	4b05      	ldr	r3, [pc, #20]	; (80054cc <std+0x44>)
 80054b8:	6224      	str	r4, [r4, #32]
 80054ba:	6323      	str	r3, [r4, #48]	; 0x30
 80054bc:	bd10      	pop	{r4, pc}
 80054be:	bf00      	nop
 80054c0:	08005f01 	.word	0x08005f01
 80054c4:	08005f23 	.word	0x08005f23
 80054c8:	08005f5b 	.word	0x08005f5b
 80054cc:	08005f7f 	.word	0x08005f7f

080054d0 <_cleanup_r>:
 80054d0:	4901      	ldr	r1, [pc, #4]	; (80054d8 <_cleanup_r+0x8>)
 80054d2:	f000 b8af 	b.w	8005634 <_fwalk_reent>
 80054d6:	bf00      	nop
 80054d8:	08005411 	.word	0x08005411

080054dc <__sfmoreglue>:
 80054dc:	b570      	push	{r4, r5, r6, lr}
 80054de:	2268      	movs	r2, #104	; 0x68
 80054e0:	1e4d      	subs	r5, r1, #1
 80054e2:	4355      	muls	r5, r2
 80054e4:	460e      	mov	r6, r1
 80054e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80054ea:	f000 f997 	bl	800581c <_malloc_r>
 80054ee:	4604      	mov	r4, r0
 80054f0:	b140      	cbz	r0, 8005504 <__sfmoreglue+0x28>
 80054f2:	2100      	movs	r1, #0
 80054f4:	e9c0 1600 	strd	r1, r6, [r0]
 80054f8:	300c      	adds	r0, #12
 80054fa:	60a0      	str	r0, [r4, #8]
 80054fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005500:	f7ff fdaa 	bl	8005058 <memset>
 8005504:	4620      	mov	r0, r4
 8005506:	bd70      	pop	{r4, r5, r6, pc}

08005508 <__sfp_lock_acquire>:
 8005508:	4801      	ldr	r0, [pc, #4]	; (8005510 <__sfp_lock_acquire+0x8>)
 800550a:	f000 b8b3 	b.w	8005674 <__retarget_lock_acquire_recursive>
 800550e:	bf00      	nop
 8005510:	2000086d 	.word	0x2000086d

08005514 <__sfp_lock_release>:
 8005514:	4801      	ldr	r0, [pc, #4]	; (800551c <__sfp_lock_release+0x8>)
 8005516:	f000 b8ae 	b.w	8005676 <__retarget_lock_release_recursive>
 800551a:	bf00      	nop
 800551c:	2000086d 	.word	0x2000086d

08005520 <__sinit_lock_acquire>:
 8005520:	4801      	ldr	r0, [pc, #4]	; (8005528 <__sinit_lock_acquire+0x8>)
 8005522:	f000 b8a7 	b.w	8005674 <__retarget_lock_acquire_recursive>
 8005526:	bf00      	nop
 8005528:	2000086e 	.word	0x2000086e

0800552c <__sinit_lock_release>:
 800552c:	4801      	ldr	r0, [pc, #4]	; (8005534 <__sinit_lock_release+0x8>)
 800552e:	f000 b8a2 	b.w	8005676 <__retarget_lock_release_recursive>
 8005532:	bf00      	nop
 8005534:	2000086e 	.word	0x2000086e

08005538 <__sinit>:
 8005538:	b510      	push	{r4, lr}
 800553a:	4604      	mov	r4, r0
 800553c:	f7ff fff0 	bl	8005520 <__sinit_lock_acquire>
 8005540:	69a3      	ldr	r3, [r4, #24]
 8005542:	b11b      	cbz	r3, 800554c <__sinit+0x14>
 8005544:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005548:	f7ff bff0 	b.w	800552c <__sinit_lock_release>
 800554c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005550:	6523      	str	r3, [r4, #80]	; 0x50
 8005552:	4b13      	ldr	r3, [pc, #76]	; (80055a0 <__sinit+0x68>)
 8005554:	4a13      	ldr	r2, [pc, #76]	; (80055a4 <__sinit+0x6c>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	62a2      	str	r2, [r4, #40]	; 0x28
 800555a:	42a3      	cmp	r3, r4
 800555c:	bf04      	itt	eq
 800555e:	2301      	moveq	r3, #1
 8005560:	61a3      	streq	r3, [r4, #24]
 8005562:	4620      	mov	r0, r4
 8005564:	f000 f820 	bl	80055a8 <__sfp>
 8005568:	6060      	str	r0, [r4, #4]
 800556a:	4620      	mov	r0, r4
 800556c:	f000 f81c 	bl	80055a8 <__sfp>
 8005570:	60a0      	str	r0, [r4, #8]
 8005572:	4620      	mov	r0, r4
 8005574:	f000 f818 	bl	80055a8 <__sfp>
 8005578:	2200      	movs	r2, #0
 800557a:	60e0      	str	r0, [r4, #12]
 800557c:	2104      	movs	r1, #4
 800557e:	6860      	ldr	r0, [r4, #4]
 8005580:	f7ff ff82 	bl	8005488 <std>
 8005584:	68a0      	ldr	r0, [r4, #8]
 8005586:	2201      	movs	r2, #1
 8005588:	2109      	movs	r1, #9
 800558a:	f7ff ff7d 	bl	8005488 <std>
 800558e:	68e0      	ldr	r0, [r4, #12]
 8005590:	2202      	movs	r2, #2
 8005592:	2112      	movs	r1, #18
 8005594:	f7ff ff78 	bl	8005488 <std>
 8005598:	2301      	movs	r3, #1
 800559a:	61a3      	str	r3, [r4, #24]
 800559c:	e7d2      	b.n	8005544 <__sinit+0xc>
 800559e:	bf00      	nop
 80055a0:	080060b8 	.word	0x080060b8
 80055a4:	080054d1 	.word	0x080054d1

080055a8 <__sfp>:
 80055a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055aa:	4607      	mov	r7, r0
 80055ac:	f7ff ffac 	bl	8005508 <__sfp_lock_acquire>
 80055b0:	4b1e      	ldr	r3, [pc, #120]	; (800562c <__sfp+0x84>)
 80055b2:	681e      	ldr	r6, [r3, #0]
 80055b4:	69b3      	ldr	r3, [r6, #24]
 80055b6:	b913      	cbnz	r3, 80055be <__sfp+0x16>
 80055b8:	4630      	mov	r0, r6
 80055ba:	f7ff ffbd 	bl	8005538 <__sinit>
 80055be:	3648      	adds	r6, #72	; 0x48
 80055c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80055c4:	3b01      	subs	r3, #1
 80055c6:	d503      	bpl.n	80055d0 <__sfp+0x28>
 80055c8:	6833      	ldr	r3, [r6, #0]
 80055ca:	b30b      	cbz	r3, 8005610 <__sfp+0x68>
 80055cc:	6836      	ldr	r6, [r6, #0]
 80055ce:	e7f7      	b.n	80055c0 <__sfp+0x18>
 80055d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80055d4:	b9d5      	cbnz	r5, 800560c <__sfp+0x64>
 80055d6:	4b16      	ldr	r3, [pc, #88]	; (8005630 <__sfp+0x88>)
 80055d8:	60e3      	str	r3, [r4, #12]
 80055da:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80055de:	6665      	str	r5, [r4, #100]	; 0x64
 80055e0:	f000 f847 	bl	8005672 <__retarget_lock_init_recursive>
 80055e4:	f7ff ff96 	bl	8005514 <__sfp_lock_release>
 80055e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80055ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80055f0:	6025      	str	r5, [r4, #0]
 80055f2:	61a5      	str	r5, [r4, #24]
 80055f4:	2208      	movs	r2, #8
 80055f6:	4629      	mov	r1, r5
 80055f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80055fc:	f7ff fd2c 	bl	8005058 <memset>
 8005600:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005604:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005608:	4620      	mov	r0, r4
 800560a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800560c:	3468      	adds	r4, #104	; 0x68
 800560e:	e7d9      	b.n	80055c4 <__sfp+0x1c>
 8005610:	2104      	movs	r1, #4
 8005612:	4638      	mov	r0, r7
 8005614:	f7ff ff62 	bl	80054dc <__sfmoreglue>
 8005618:	4604      	mov	r4, r0
 800561a:	6030      	str	r0, [r6, #0]
 800561c:	2800      	cmp	r0, #0
 800561e:	d1d5      	bne.n	80055cc <__sfp+0x24>
 8005620:	f7ff ff78 	bl	8005514 <__sfp_lock_release>
 8005624:	230c      	movs	r3, #12
 8005626:	603b      	str	r3, [r7, #0]
 8005628:	e7ee      	b.n	8005608 <__sfp+0x60>
 800562a:	bf00      	nop
 800562c:	080060b8 	.word	0x080060b8
 8005630:	ffff0001 	.word	0xffff0001

08005634 <_fwalk_reent>:
 8005634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005638:	4606      	mov	r6, r0
 800563a:	4688      	mov	r8, r1
 800563c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005640:	2700      	movs	r7, #0
 8005642:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005646:	f1b9 0901 	subs.w	r9, r9, #1
 800564a:	d505      	bpl.n	8005658 <_fwalk_reent+0x24>
 800564c:	6824      	ldr	r4, [r4, #0]
 800564e:	2c00      	cmp	r4, #0
 8005650:	d1f7      	bne.n	8005642 <_fwalk_reent+0xe>
 8005652:	4638      	mov	r0, r7
 8005654:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005658:	89ab      	ldrh	r3, [r5, #12]
 800565a:	2b01      	cmp	r3, #1
 800565c:	d907      	bls.n	800566e <_fwalk_reent+0x3a>
 800565e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005662:	3301      	adds	r3, #1
 8005664:	d003      	beq.n	800566e <_fwalk_reent+0x3a>
 8005666:	4629      	mov	r1, r5
 8005668:	4630      	mov	r0, r6
 800566a:	47c0      	blx	r8
 800566c:	4307      	orrs	r7, r0
 800566e:	3568      	adds	r5, #104	; 0x68
 8005670:	e7e9      	b.n	8005646 <_fwalk_reent+0x12>

08005672 <__retarget_lock_init_recursive>:
 8005672:	4770      	bx	lr

08005674 <__retarget_lock_acquire_recursive>:
 8005674:	4770      	bx	lr

08005676 <__retarget_lock_release_recursive>:
 8005676:	4770      	bx	lr

08005678 <__swhatbuf_r>:
 8005678:	b570      	push	{r4, r5, r6, lr}
 800567a:	460e      	mov	r6, r1
 800567c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005680:	2900      	cmp	r1, #0
 8005682:	b096      	sub	sp, #88	; 0x58
 8005684:	4614      	mov	r4, r2
 8005686:	461d      	mov	r5, r3
 8005688:	da08      	bge.n	800569c <__swhatbuf_r+0x24>
 800568a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800568e:	2200      	movs	r2, #0
 8005690:	602a      	str	r2, [r5, #0]
 8005692:	061a      	lsls	r2, r3, #24
 8005694:	d410      	bmi.n	80056b8 <__swhatbuf_r+0x40>
 8005696:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800569a:	e00e      	b.n	80056ba <__swhatbuf_r+0x42>
 800569c:	466a      	mov	r2, sp
 800569e:	f000 fc95 	bl	8005fcc <_fstat_r>
 80056a2:	2800      	cmp	r0, #0
 80056a4:	dbf1      	blt.n	800568a <__swhatbuf_r+0x12>
 80056a6:	9a01      	ldr	r2, [sp, #4]
 80056a8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80056ac:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80056b0:	425a      	negs	r2, r3
 80056b2:	415a      	adcs	r2, r3
 80056b4:	602a      	str	r2, [r5, #0]
 80056b6:	e7ee      	b.n	8005696 <__swhatbuf_r+0x1e>
 80056b8:	2340      	movs	r3, #64	; 0x40
 80056ba:	2000      	movs	r0, #0
 80056bc:	6023      	str	r3, [r4, #0]
 80056be:	b016      	add	sp, #88	; 0x58
 80056c0:	bd70      	pop	{r4, r5, r6, pc}
	...

080056c4 <__smakebuf_r>:
 80056c4:	898b      	ldrh	r3, [r1, #12]
 80056c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80056c8:	079d      	lsls	r5, r3, #30
 80056ca:	4606      	mov	r6, r0
 80056cc:	460c      	mov	r4, r1
 80056ce:	d507      	bpl.n	80056e0 <__smakebuf_r+0x1c>
 80056d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80056d4:	6023      	str	r3, [r4, #0]
 80056d6:	6123      	str	r3, [r4, #16]
 80056d8:	2301      	movs	r3, #1
 80056da:	6163      	str	r3, [r4, #20]
 80056dc:	b002      	add	sp, #8
 80056de:	bd70      	pop	{r4, r5, r6, pc}
 80056e0:	ab01      	add	r3, sp, #4
 80056e2:	466a      	mov	r2, sp
 80056e4:	f7ff ffc8 	bl	8005678 <__swhatbuf_r>
 80056e8:	9900      	ldr	r1, [sp, #0]
 80056ea:	4605      	mov	r5, r0
 80056ec:	4630      	mov	r0, r6
 80056ee:	f000 f895 	bl	800581c <_malloc_r>
 80056f2:	b948      	cbnz	r0, 8005708 <__smakebuf_r+0x44>
 80056f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056f8:	059a      	lsls	r2, r3, #22
 80056fa:	d4ef      	bmi.n	80056dc <__smakebuf_r+0x18>
 80056fc:	f023 0303 	bic.w	r3, r3, #3
 8005700:	f043 0302 	orr.w	r3, r3, #2
 8005704:	81a3      	strh	r3, [r4, #12]
 8005706:	e7e3      	b.n	80056d0 <__smakebuf_r+0xc>
 8005708:	4b0d      	ldr	r3, [pc, #52]	; (8005740 <__smakebuf_r+0x7c>)
 800570a:	62b3      	str	r3, [r6, #40]	; 0x28
 800570c:	89a3      	ldrh	r3, [r4, #12]
 800570e:	6020      	str	r0, [r4, #0]
 8005710:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005714:	81a3      	strh	r3, [r4, #12]
 8005716:	9b00      	ldr	r3, [sp, #0]
 8005718:	6163      	str	r3, [r4, #20]
 800571a:	9b01      	ldr	r3, [sp, #4]
 800571c:	6120      	str	r0, [r4, #16]
 800571e:	b15b      	cbz	r3, 8005738 <__smakebuf_r+0x74>
 8005720:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005724:	4630      	mov	r0, r6
 8005726:	f000 fc63 	bl	8005ff0 <_isatty_r>
 800572a:	b128      	cbz	r0, 8005738 <__smakebuf_r+0x74>
 800572c:	89a3      	ldrh	r3, [r4, #12]
 800572e:	f023 0303 	bic.w	r3, r3, #3
 8005732:	f043 0301 	orr.w	r3, r3, #1
 8005736:	81a3      	strh	r3, [r4, #12]
 8005738:	89a0      	ldrh	r0, [r4, #12]
 800573a:	4305      	orrs	r5, r0
 800573c:	81a5      	strh	r5, [r4, #12]
 800573e:	e7cd      	b.n	80056dc <__smakebuf_r+0x18>
 8005740:	080054d1 	.word	0x080054d1

08005744 <_free_r>:
 8005744:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005746:	2900      	cmp	r1, #0
 8005748:	d044      	beq.n	80057d4 <_free_r+0x90>
 800574a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800574e:	9001      	str	r0, [sp, #4]
 8005750:	2b00      	cmp	r3, #0
 8005752:	f1a1 0404 	sub.w	r4, r1, #4
 8005756:	bfb8      	it	lt
 8005758:	18e4      	addlt	r4, r4, r3
 800575a:	f000 fc6b 	bl	8006034 <__malloc_lock>
 800575e:	4a1e      	ldr	r2, [pc, #120]	; (80057d8 <_free_r+0x94>)
 8005760:	9801      	ldr	r0, [sp, #4]
 8005762:	6813      	ldr	r3, [r2, #0]
 8005764:	b933      	cbnz	r3, 8005774 <_free_r+0x30>
 8005766:	6063      	str	r3, [r4, #4]
 8005768:	6014      	str	r4, [r2, #0]
 800576a:	b003      	add	sp, #12
 800576c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005770:	f000 bc66 	b.w	8006040 <__malloc_unlock>
 8005774:	42a3      	cmp	r3, r4
 8005776:	d908      	bls.n	800578a <_free_r+0x46>
 8005778:	6825      	ldr	r5, [r4, #0]
 800577a:	1961      	adds	r1, r4, r5
 800577c:	428b      	cmp	r3, r1
 800577e:	bf01      	itttt	eq
 8005780:	6819      	ldreq	r1, [r3, #0]
 8005782:	685b      	ldreq	r3, [r3, #4]
 8005784:	1949      	addeq	r1, r1, r5
 8005786:	6021      	streq	r1, [r4, #0]
 8005788:	e7ed      	b.n	8005766 <_free_r+0x22>
 800578a:	461a      	mov	r2, r3
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	b10b      	cbz	r3, 8005794 <_free_r+0x50>
 8005790:	42a3      	cmp	r3, r4
 8005792:	d9fa      	bls.n	800578a <_free_r+0x46>
 8005794:	6811      	ldr	r1, [r2, #0]
 8005796:	1855      	adds	r5, r2, r1
 8005798:	42a5      	cmp	r5, r4
 800579a:	d10b      	bne.n	80057b4 <_free_r+0x70>
 800579c:	6824      	ldr	r4, [r4, #0]
 800579e:	4421      	add	r1, r4
 80057a0:	1854      	adds	r4, r2, r1
 80057a2:	42a3      	cmp	r3, r4
 80057a4:	6011      	str	r1, [r2, #0]
 80057a6:	d1e0      	bne.n	800576a <_free_r+0x26>
 80057a8:	681c      	ldr	r4, [r3, #0]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	6053      	str	r3, [r2, #4]
 80057ae:	4421      	add	r1, r4
 80057b0:	6011      	str	r1, [r2, #0]
 80057b2:	e7da      	b.n	800576a <_free_r+0x26>
 80057b4:	d902      	bls.n	80057bc <_free_r+0x78>
 80057b6:	230c      	movs	r3, #12
 80057b8:	6003      	str	r3, [r0, #0]
 80057ba:	e7d6      	b.n	800576a <_free_r+0x26>
 80057bc:	6825      	ldr	r5, [r4, #0]
 80057be:	1961      	adds	r1, r4, r5
 80057c0:	428b      	cmp	r3, r1
 80057c2:	bf04      	itt	eq
 80057c4:	6819      	ldreq	r1, [r3, #0]
 80057c6:	685b      	ldreq	r3, [r3, #4]
 80057c8:	6063      	str	r3, [r4, #4]
 80057ca:	bf04      	itt	eq
 80057cc:	1949      	addeq	r1, r1, r5
 80057ce:	6021      	streq	r1, [r4, #0]
 80057d0:	6054      	str	r4, [r2, #4]
 80057d2:	e7ca      	b.n	800576a <_free_r+0x26>
 80057d4:	b003      	add	sp, #12
 80057d6:	bd30      	pop	{r4, r5, pc}
 80057d8:	20000870 	.word	0x20000870

080057dc <sbrk_aligned>:
 80057dc:	b570      	push	{r4, r5, r6, lr}
 80057de:	4e0e      	ldr	r6, [pc, #56]	; (8005818 <sbrk_aligned+0x3c>)
 80057e0:	460c      	mov	r4, r1
 80057e2:	6831      	ldr	r1, [r6, #0]
 80057e4:	4605      	mov	r5, r0
 80057e6:	b911      	cbnz	r1, 80057ee <sbrk_aligned+0x12>
 80057e8:	f000 fb7a 	bl	8005ee0 <_sbrk_r>
 80057ec:	6030      	str	r0, [r6, #0]
 80057ee:	4621      	mov	r1, r4
 80057f0:	4628      	mov	r0, r5
 80057f2:	f000 fb75 	bl	8005ee0 <_sbrk_r>
 80057f6:	1c43      	adds	r3, r0, #1
 80057f8:	d00a      	beq.n	8005810 <sbrk_aligned+0x34>
 80057fa:	1cc4      	adds	r4, r0, #3
 80057fc:	f024 0403 	bic.w	r4, r4, #3
 8005800:	42a0      	cmp	r0, r4
 8005802:	d007      	beq.n	8005814 <sbrk_aligned+0x38>
 8005804:	1a21      	subs	r1, r4, r0
 8005806:	4628      	mov	r0, r5
 8005808:	f000 fb6a 	bl	8005ee0 <_sbrk_r>
 800580c:	3001      	adds	r0, #1
 800580e:	d101      	bne.n	8005814 <sbrk_aligned+0x38>
 8005810:	f04f 34ff 	mov.w	r4, #4294967295
 8005814:	4620      	mov	r0, r4
 8005816:	bd70      	pop	{r4, r5, r6, pc}
 8005818:	20000874 	.word	0x20000874

0800581c <_malloc_r>:
 800581c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005820:	1ccd      	adds	r5, r1, #3
 8005822:	f025 0503 	bic.w	r5, r5, #3
 8005826:	3508      	adds	r5, #8
 8005828:	2d0c      	cmp	r5, #12
 800582a:	bf38      	it	cc
 800582c:	250c      	movcc	r5, #12
 800582e:	2d00      	cmp	r5, #0
 8005830:	4607      	mov	r7, r0
 8005832:	db01      	blt.n	8005838 <_malloc_r+0x1c>
 8005834:	42a9      	cmp	r1, r5
 8005836:	d905      	bls.n	8005844 <_malloc_r+0x28>
 8005838:	230c      	movs	r3, #12
 800583a:	603b      	str	r3, [r7, #0]
 800583c:	2600      	movs	r6, #0
 800583e:	4630      	mov	r0, r6
 8005840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005844:	4e2e      	ldr	r6, [pc, #184]	; (8005900 <_malloc_r+0xe4>)
 8005846:	f000 fbf5 	bl	8006034 <__malloc_lock>
 800584a:	6833      	ldr	r3, [r6, #0]
 800584c:	461c      	mov	r4, r3
 800584e:	bb34      	cbnz	r4, 800589e <_malloc_r+0x82>
 8005850:	4629      	mov	r1, r5
 8005852:	4638      	mov	r0, r7
 8005854:	f7ff ffc2 	bl	80057dc <sbrk_aligned>
 8005858:	1c43      	adds	r3, r0, #1
 800585a:	4604      	mov	r4, r0
 800585c:	d14d      	bne.n	80058fa <_malloc_r+0xde>
 800585e:	6834      	ldr	r4, [r6, #0]
 8005860:	4626      	mov	r6, r4
 8005862:	2e00      	cmp	r6, #0
 8005864:	d140      	bne.n	80058e8 <_malloc_r+0xcc>
 8005866:	6823      	ldr	r3, [r4, #0]
 8005868:	4631      	mov	r1, r6
 800586a:	4638      	mov	r0, r7
 800586c:	eb04 0803 	add.w	r8, r4, r3
 8005870:	f000 fb36 	bl	8005ee0 <_sbrk_r>
 8005874:	4580      	cmp	r8, r0
 8005876:	d13a      	bne.n	80058ee <_malloc_r+0xd2>
 8005878:	6821      	ldr	r1, [r4, #0]
 800587a:	3503      	adds	r5, #3
 800587c:	1a6d      	subs	r5, r5, r1
 800587e:	f025 0503 	bic.w	r5, r5, #3
 8005882:	3508      	adds	r5, #8
 8005884:	2d0c      	cmp	r5, #12
 8005886:	bf38      	it	cc
 8005888:	250c      	movcc	r5, #12
 800588a:	4629      	mov	r1, r5
 800588c:	4638      	mov	r0, r7
 800588e:	f7ff ffa5 	bl	80057dc <sbrk_aligned>
 8005892:	3001      	adds	r0, #1
 8005894:	d02b      	beq.n	80058ee <_malloc_r+0xd2>
 8005896:	6823      	ldr	r3, [r4, #0]
 8005898:	442b      	add	r3, r5
 800589a:	6023      	str	r3, [r4, #0]
 800589c:	e00e      	b.n	80058bc <_malloc_r+0xa0>
 800589e:	6822      	ldr	r2, [r4, #0]
 80058a0:	1b52      	subs	r2, r2, r5
 80058a2:	d41e      	bmi.n	80058e2 <_malloc_r+0xc6>
 80058a4:	2a0b      	cmp	r2, #11
 80058a6:	d916      	bls.n	80058d6 <_malloc_r+0xba>
 80058a8:	1961      	adds	r1, r4, r5
 80058aa:	42a3      	cmp	r3, r4
 80058ac:	6025      	str	r5, [r4, #0]
 80058ae:	bf18      	it	ne
 80058b0:	6059      	strne	r1, [r3, #4]
 80058b2:	6863      	ldr	r3, [r4, #4]
 80058b4:	bf08      	it	eq
 80058b6:	6031      	streq	r1, [r6, #0]
 80058b8:	5162      	str	r2, [r4, r5]
 80058ba:	604b      	str	r3, [r1, #4]
 80058bc:	4638      	mov	r0, r7
 80058be:	f104 060b 	add.w	r6, r4, #11
 80058c2:	f000 fbbd 	bl	8006040 <__malloc_unlock>
 80058c6:	f026 0607 	bic.w	r6, r6, #7
 80058ca:	1d23      	adds	r3, r4, #4
 80058cc:	1af2      	subs	r2, r6, r3
 80058ce:	d0b6      	beq.n	800583e <_malloc_r+0x22>
 80058d0:	1b9b      	subs	r3, r3, r6
 80058d2:	50a3      	str	r3, [r4, r2]
 80058d4:	e7b3      	b.n	800583e <_malloc_r+0x22>
 80058d6:	6862      	ldr	r2, [r4, #4]
 80058d8:	42a3      	cmp	r3, r4
 80058da:	bf0c      	ite	eq
 80058dc:	6032      	streq	r2, [r6, #0]
 80058de:	605a      	strne	r2, [r3, #4]
 80058e0:	e7ec      	b.n	80058bc <_malloc_r+0xa0>
 80058e2:	4623      	mov	r3, r4
 80058e4:	6864      	ldr	r4, [r4, #4]
 80058e6:	e7b2      	b.n	800584e <_malloc_r+0x32>
 80058e8:	4634      	mov	r4, r6
 80058ea:	6876      	ldr	r6, [r6, #4]
 80058ec:	e7b9      	b.n	8005862 <_malloc_r+0x46>
 80058ee:	230c      	movs	r3, #12
 80058f0:	603b      	str	r3, [r7, #0]
 80058f2:	4638      	mov	r0, r7
 80058f4:	f000 fba4 	bl	8006040 <__malloc_unlock>
 80058f8:	e7a1      	b.n	800583e <_malloc_r+0x22>
 80058fa:	6025      	str	r5, [r4, #0]
 80058fc:	e7de      	b.n	80058bc <_malloc_r+0xa0>
 80058fe:	bf00      	nop
 8005900:	20000870 	.word	0x20000870

08005904 <__sfputc_r>:
 8005904:	6893      	ldr	r3, [r2, #8]
 8005906:	3b01      	subs	r3, #1
 8005908:	2b00      	cmp	r3, #0
 800590a:	b410      	push	{r4}
 800590c:	6093      	str	r3, [r2, #8]
 800590e:	da08      	bge.n	8005922 <__sfputc_r+0x1e>
 8005910:	6994      	ldr	r4, [r2, #24]
 8005912:	42a3      	cmp	r3, r4
 8005914:	db01      	blt.n	800591a <__sfputc_r+0x16>
 8005916:	290a      	cmp	r1, #10
 8005918:	d103      	bne.n	8005922 <__sfputc_r+0x1e>
 800591a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800591e:	f7ff bc31 	b.w	8005184 <__swbuf_r>
 8005922:	6813      	ldr	r3, [r2, #0]
 8005924:	1c58      	adds	r0, r3, #1
 8005926:	6010      	str	r0, [r2, #0]
 8005928:	7019      	strb	r1, [r3, #0]
 800592a:	4608      	mov	r0, r1
 800592c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005930:	4770      	bx	lr

08005932 <__sfputs_r>:
 8005932:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005934:	4606      	mov	r6, r0
 8005936:	460f      	mov	r7, r1
 8005938:	4614      	mov	r4, r2
 800593a:	18d5      	adds	r5, r2, r3
 800593c:	42ac      	cmp	r4, r5
 800593e:	d101      	bne.n	8005944 <__sfputs_r+0x12>
 8005940:	2000      	movs	r0, #0
 8005942:	e007      	b.n	8005954 <__sfputs_r+0x22>
 8005944:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005948:	463a      	mov	r2, r7
 800594a:	4630      	mov	r0, r6
 800594c:	f7ff ffda 	bl	8005904 <__sfputc_r>
 8005950:	1c43      	adds	r3, r0, #1
 8005952:	d1f3      	bne.n	800593c <__sfputs_r+0xa>
 8005954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005958 <_vfiprintf_r>:
 8005958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800595c:	460d      	mov	r5, r1
 800595e:	b09d      	sub	sp, #116	; 0x74
 8005960:	4614      	mov	r4, r2
 8005962:	4698      	mov	r8, r3
 8005964:	4606      	mov	r6, r0
 8005966:	b118      	cbz	r0, 8005970 <_vfiprintf_r+0x18>
 8005968:	6983      	ldr	r3, [r0, #24]
 800596a:	b90b      	cbnz	r3, 8005970 <_vfiprintf_r+0x18>
 800596c:	f7ff fde4 	bl	8005538 <__sinit>
 8005970:	4b89      	ldr	r3, [pc, #548]	; (8005b98 <_vfiprintf_r+0x240>)
 8005972:	429d      	cmp	r5, r3
 8005974:	d11b      	bne.n	80059ae <_vfiprintf_r+0x56>
 8005976:	6875      	ldr	r5, [r6, #4]
 8005978:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800597a:	07d9      	lsls	r1, r3, #31
 800597c:	d405      	bmi.n	800598a <_vfiprintf_r+0x32>
 800597e:	89ab      	ldrh	r3, [r5, #12]
 8005980:	059a      	lsls	r2, r3, #22
 8005982:	d402      	bmi.n	800598a <_vfiprintf_r+0x32>
 8005984:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005986:	f7ff fe75 	bl	8005674 <__retarget_lock_acquire_recursive>
 800598a:	89ab      	ldrh	r3, [r5, #12]
 800598c:	071b      	lsls	r3, r3, #28
 800598e:	d501      	bpl.n	8005994 <_vfiprintf_r+0x3c>
 8005990:	692b      	ldr	r3, [r5, #16]
 8005992:	b9eb      	cbnz	r3, 80059d0 <_vfiprintf_r+0x78>
 8005994:	4629      	mov	r1, r5
 8005996:	4630      	mov	r0, r6
 8005998:	f7ff fc46 	bl	8005228 <__swsetup_r>
 800599c:	b1c0      	cbz	r0, 80059d0 <_vfiprintf_r+0x78>
 800599e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80059a0:	07dc      	lsls	r4, r3, #31
 80059a2:	d50e      	bpl.n	80059c2 <_vfiprintf_r+0x6a>
 80059a4:	f04f 30ff 	mov.w	r0, #4294967295
 80059a8:	b01d      	add	sp, #116	; 0x74
 80059aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059ae:	4b7b      	ldr	r3, [pc, #492]	; (8005b9c <_vfiprintf_r+0x244>)
 80059b0:	429d      	cmp	r5, r3
 80059b2:	d101      	bne.n	80059b8 <_vfiprintf_r+0x60>
 80059b4:	68b5      	ldr	r5, [r6, #8]
 80059b6:	e7df      	b.n	8005978 <_vfiprintf_r+0x20>
 80059b8:	4b79      	ldr	r3, [pc, #484]	; (8005ba0 <_vfiprintf_r+0x248>)
 80059ba:	429d      	cmp	r5, r3
 80059bc:	bf08      	it	eq
 80059be:	68f5      	ldreq	r5, [r6, #12]
 80059c0:	e7da      	b.n	8005978 <_vfiprintf_r+0x20>
 80059c2:	89ab      	ldrh	r3, [r5, #12]
 80059c4:	0598      	lsls	r0, r3, #22
 80059c6:	d4ed      	bmi.n	80059a4 <_vfiprintf_r+0x4c>
 80059c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80059ca:	f7ff fe54 	bl	8005676 <__retarget_lock_release_recursive>
 80059ce:	e7e9      	b.n	80059a4 <_vfiprintf_r+0x4c>
 80059d0:	2300      	movs	r3, #0
 80059d2:	9309      	str	r3, [sp, #36]	; 0x24
 80059d4:	2320      	movs	r3, #32
 80059d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80059da:	f8cd 800c 	str.w	r8, [sp, #12]
 80059de:	2330      	movs	r3, #48	; 0x30
 80059e0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005ba4 <_vfiprintf_r+0x24c>
 80059e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80059e8:	f04f 0901 	mov.w	r9, #1
 80059ec:	4623      	mov	r3, r4
 80059ee:	469a      	mov	sl, r3
 80059f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80059f4:	b10a      	cbz	r2, 80059fa <_vfiprintf_r+0xa2>
 80059f6:	2a25      	cmp	r2, #37	; 0x25
 80059f8:	d1f9      	bne.n	80059ee <_vfiprintf_r+0x96>
 80059fa:	ebba 0b04 	subs.w	fp, sl, r4
 80059fe:	d00b      	beq.n	8005a18 <_vfiprintf_r+0xc0>
 8005a00:	465b      	mov	r3, fp
 8005a02:	4622      	mov	r2, r4
 8005a04:	4629      	mov	r1, r5
 8005a06:	4630      	mov	r0, r6
 8005a08:	f7ff ff93 	bl	8005932 <__sfputs_r>
 8005a0c:	3001      	adds	r0, #1
 8005a0e:	f000 80aa 	beq.w	8005b66 <_vfiprintf_r+0x20e>
 8005a12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a14:	445a      	add	r2, fp
 8005a16:	9209      	str	r2, [sp, #36]	; 0x24
 8005a18:	f89a 3000 	ldrb.w	r3, [sl]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	f000 80a2 	beq.w	8005b66 <_vfiprintf_r+0x20e>
 8005a22:	2300      	movs	r3, #0
 8005a24:	f04f 32ff 	mov.w	r2, #4294967295
 8005a28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a2c:	f10a 0a01 	add.w	sl, sl, #1
 8005a30:	9304      	str	r3, [sp, #16]
 8005a32:	9307      	str	r3, [sp, #28]
 8005a34:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a38:	931a      	str	r3, [sp, #104]	; 0x68
 8005a3a:	4654      	mov	r4, sl
 8005a3c:	2205      	movs	r2, #5
 8005a3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a42:	4858      	ldr	r0, [pc, #352]	; (8005ba4 <_vfiprintf_r+0x24c>)
 8005a44:	f7fa fbd4 	bl	80001f0 <memchr>
 8005a48:	9a04      	ldr	r2, [sp, #16]
 8005a4a:	b9d8      	cbnz	r0, 8005a84 <_vfiprintf_r+0x12c>
 8005a4c:	06d1      	lsls	r1, r2, #27
 8005a4e:	bf44      	itt	mi
 8005a50:	2320      	movmi	r3, #32
 8005a52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a56:	0713      	lsls	r3, r2, #28
 8005a58:	bf44      	itt	mi
 8005a5a:	232b      	movmi	r3, #43	; 0x2b
 8005a5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a60:	f89a 3000 	ldrb.w	r3, [sl]
 8005a64:	2b2a      	cmp	r3, #42	; 0x2a
 8005a66:	d015      	beq.n	8005a94 <_vfiprintf_r+0x13c>
 8005a68:	9a07      	ldr	r2, [sp, #28]
 8005a6a:	4654      	mov	r4, sl
 8005a6c:	2000      	movs	r0, #0
 8005a6e:	f04f 0c0a 	mov.w	ip, #10
 8005a72:	4621      	mov	r1, r4
 8005a74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a78:	3b30      	subs	r3, #48	; 0x30
 8005a7a:	2b09      	cmp	r3, #9
 8005a7c:	d94e      	bls.n	8005b1c <_vfiprintf_r+0x1c4>
 8005a7e:	b1b0      	cbz	r0, 8005aae <_vfiprintf_r+0x156>
 8005a80:	9207      	str	r2, [sp, #28]
 8005a82:	e014      	b.n	8005aae <_vfiprintf_r+0x156>
 8005a84:	eba0 0308 	sub.w	r3, r0, r8
 8005a88:	fa09 f303 	lsl.w	r3, r9, r3
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	9304      	str	r3, [sp, #16]
 8005a90:	46a2      	mov	sl, r4
 8005a92:	e7d2      	b.n	8005a3a <_vfiprintf_r+0xe2>
 8005a94:	9b03      	ldr	r3, [sp, #12]
 8005a96:	1d19      	adds	r1, r3, #4
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	9103      	str	r1, [sp, #12]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	bfbb      	ittet	lt
 8005aa0:	425b      	neglt	r3, r3
 8005aa2:	f042 0202 	orrlt.w	r2, r2, #2
 8005aa6:	9307      	strge	r3, [sp, #28]
 8005aa8:	9307      	strlt	r3, [sp, #28]
 8005aaa:	bfb8      	it	lt
 8005aac:	9204      	strlt	r2, [sp, #16]
 8005aae:	7823      	ldrb	r3, [r4, #0]
 8005ab0:	2b2e      	cmp	r3, #46	; 0x2e
 8005ab2:	d10c      	bne.n	8005ace <_vfiprintf_r+0x176>
 8005ab4:	7863      	ldrb	r3, [r4, #1]
 8005ab6:	2b2a      	cmp	r3, #42	; 0x2a
 8005ab8:	d135      	bne.n	8005b26 <_vfiprintf_r+0x1ce>
 8005aba:	9b03      	ldr	r3, [sp, #12]
 8005abc:	1d1a      	adds	r2, r3, #4
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	9203      	str	r2, [sp, #12]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	bfb8      	it	lt
 8005ac6:	f04f 33ff 	movlt.w	r3, #4294967295
 8005aca:	3402      	adds	r4, #2
 8005acc:	9305      	str	r3, [sp, #20]
 8005ace:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005bb4 <_vfiprintf_r+0x25c>
 8005ad2:	7821      	ldrb	r1, [r4, #0]
 8005ad4:	2203      	movs	r2, #3
 8005ad6:	4650      	mov	r0, sl
 8005ad8:	f7fa fb8a 	bl	80001f0 <memchr>
 8005adc:	b140      	cbz	r0, 8005af0 <_vfiprintf_r+0x198>
 8005ade:	2340      	movs	r3, #64	; 0x40
 8005ae0:	eba0 000a 	sub.w	r0, r0, sl
 8005ae4:	fa03 f000 	lsl.w	r0, r3, r0
 8005ae8:	9b04      	ldr	r3, [sp, #16]
 8005aea:	4303      	orrs	r3, r0
 8005aec:	3401      	adds	r4, #1
 8005aee:	9304      	str	r3, [sp, #16]
 8005af0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005af4:	482c      	ldr	r0, [pc, #176]	; (8005ba8 <_vfiprintf_r+0x250>)
 8005af6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005afa:	2206      	movs	r2, #6
 8005afc:	f7fa fb78 	bl	80001f0 <memchr>
 8005b00:	2800      	cmp	r0, #0
 8005b02:	d03f      	beq.n	8005b84 <_vfiprintf_r+0x22c>
 8005b04:	4b29      	ldr	r3, [pc, #164]	; (8005bac <_vfiprintf_r+0x254>)
 8005b06:	bb1b      	cbnz	r3, 8005b50 <_vfiprintf_r+0x1f8>
 8005b08:	9b03      	ldr	r3, [sp, #12]
 8005b0a:	3307      	adds	r3, #7
 8005b0c:	f023 0307 	bic.w	r3, r3, #7
 8005b10:	3308      	adds	r3, #8
 8005b12:	9303      	str	r3, [sp, #12]
 8005b14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b16:	443b      	add	r3, r7
 8005b18:	9309      	str	r3, [sp, #36]	; 0x24
 8005b1a:	e767      	b.n	80059ec <_vfiprintf_r+0x94>
 8005b1c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b20:	460c      	mov	r4, r1
 8005b22:	2001      	movs	r0, #1
 8005b24:	e7a5      	b.n	8005a72 <_vfiprintf_r+0x11a>
 8005b26:	2300      	movs	r3, #0
 8005b28:	3401      	adds	r4, #1
 8005b2a:	9305      	str	r3, [sp, #20]
 8005b2c:	4619      	mov	r1, r3
 8005b2e:	f04f 0c0a 	mov.w	ip, #10
 8005b32:	4620      	mov	r0, r4
 8005b34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b38:	3a30      	subs	r2, #48	; 0x30
 8005b3a:	2a09      	cmp	r2, #9
 8005b3c:	d903      	bls.n	8005b46 <_vfiprintf_r+0x1ee>
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d0c5      	beq.n	8005ace <_vfiprintf_r+0x176>
 8005b42:	9105      	str	r1, [sp, #20]
 8005b44:	e7c3      	b.n	8005ace <_vfiprintf_r+0x176>
 8005b46:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b4a:	4604      	mov	r4, r0
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e7f0      	b.n	8005b32 <_vfiprintf_r+0x1da>
 8005b50:	ab03      	add	r3, sp, #12
 8005b52:	9300      	str	r3, [sp, #0]
 8005b54:	462a      	mov	r2, r5
 8005b56:	4b16      	ldr	r3, [pc, #88]	; (8005bb0 <_vfiprintf_r+0x258>)
 8005b58:	a904      	add	r1, sp, #16
 8005b5a:	4630      	mov	r0, r6
 8005b5c:	f3af 8000 	nop.w
 8005b60:	4607      	mov	r7, r0
 8005b62:	1c78      	adds	r0, r7, #1
 8005b64:	d1d6      	bne.n	8005b14 <_vfiprintf_r+0x1bc>
 8005b66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b68:	07d9      	lsls	r1, r3, #31
 8005b6a:	d405      	bmi.n	8005b78 <_vfiprintf_r+0x220>
 8005b6c:	89ab      	ldrh	r3, [r5, #12]
 8005b6e:	059a      	lsls	r2, r3, #22
 8005b70:	d402      	bmi.n	8005b78 <_vfiprintf_r+0x220>
 8005b72:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b74:	f7ff fd7f 	bl	8005676 <__retarget_lock_release_recursive>
 8005b78:	89ab      	ldrh	r3, [r5, #12]
 8005b7a:	065b      	lsls	r3, r3, #25
 8005b7c:	f53f af12 	bmi.w	80059a4 <_vfiprintf_r+0x4c>
 8005b80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b82:	e711      	b.n	80059a8 <_vfiprintf_r+0x50>
 8005b84:	ab03      	add	r3, sp, #12
 8005b86:	9300      	str	r3, [sp, #0]
 8005b88:	462a      	mov	r2, r5
 8005b8a:	4b09      	ldr	r3, [pc, #36]	; (8005bb0 <_vfiprintf_r+0x258>)
 8005b8c:	a904      	add	r1, sp, #16
 8005b8e:	4630      	mov	r0, r6
 8005b90:	f000 f880 	bl	8005c94 <_printf_i>
 8005b94:	e7e4      	b.n	8005b60 <_vfiprintf_r+0x208>
 8005b96:	bf00      	nop
 8005b98:	080060dc 	.word	0x080060dc
 8005b9c:	080060fc 	.word	0x080060fc
 8005ba0:	080060bc 	.word	0x080060bc
 8005ba4:	0800611c 	.word	0x0800611c
 8005ba8:	08006126 	.word	0x08006126
 8005bac:	00000000 	.word	0x00000000
 8005bb0:	08005933 	.word	0x08005933
 8005bb4:	08006122 	.word	0x08006122

08005bb8 <_printf_common>:
 8005bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bbc:	4616      	mov	r6, r2
 8005bbe:	4699      	mov	r9, r3
 8005bc0:	688a      	ldr	r2, [r1, #8]
 8005bc2:	690b      	ldr	r3, [r1, #16]
 8005bc4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	bfb8      	it	lt
 8005bcc:	4613      	movlt	r3, r2
 8005bce:	6033      	str	r3, [r6, #0]
 8005bd0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005bd4:	4607      	mov	r7, r0
 8005bd6:	460c      	mov	r4, r1
 8005bd8:	b10a      	cbz	r2, 8005bde <_printf_common+0x26>
 8005bda:	3301      	adds	r3, #1
 8005bdc:	6033      	str	r3, [r6, #0]
 8005bde:	6823      	ldr	r3, [r4, #0]
 8005be0:	0699      	lsls	r1, r3, #26
 8005be2:	bf42      	ittt	mi
 8005be4:	6833      	ldrmi	r3, [r6, #0]
 8005be6:	3302      	addmi	r3, #2
 8005be8:	6033      	strmi	r3, [r6, #0]
 8005bea:	6825      	ldr	r5, [r4, #0]
 8005bec:	f015 0506 	ands.w	r5, r5, #6
 8005bf0:	d106      	bne.n	8005c00 <_printf_common+0x48>
 8005bf2:	f104 0a19 	add.w	sl, r4, #25
 8005bf6:	68e3      	ldr	r3, [r4, #12]
 8005bf8:	6832      	ldr	r2, [r6, #0]
 8005bfa:	1a9b      	subs	r3, r3, r2
 8005bfc:	42ab      	cmp	r3, r5
 8005bfe:	dc26      	bgt.n	8005c4e <_printf_common+0x96>
 8005c00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005c04:	1e13      	subs	r3, r2, #0
 8005c06:	6822      	ldr	r2, [r4, #0]
 8005c08:	bf18      	it	ne
 8005c0a:	2301      	movne	r3, #1
 8005c0c:	0692      	lsls	r2, r2, #26
 8005c0e:	d42b      	bmi.n	8005c68 <_printf_common+0xb0>
 8005c10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c14:	4649      	mov	r1, r9
 8005c16:	4638      	mov	r0, r7
 8005c18:	47c0      	blx	r8
 8005c1a:	3001      	adds	r0, #1
 8005c1c:	d01e      	beq.n	8005c5c <_printf_common+0xa4>
 8005c1e:	6823      	ldr	r3, [r4, #0]
 8005c20:	68e5      	ldr	r5, [r4, #12]
 8005c22:	6832      	ldr	r2, [r6, #0]
 8005c24:	f003 0306 	and.w	r3, r3, #6
 8005c28:	2b04      	cmp	r3, #4
 8005c2a:	bf08      	it	eq
 8005c2c:	1aad      	subeq	r5, r5, r2
 8005c2e:	68a3      	ldr	r3, [r4, #8]
 8005c30:	6922      	ldr	r2, [r4, #16]
 8005c32:	bf0c      	ite	eq
 8005c34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c38:	2500      	movne	r5, #0
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	bfc4      	itt	gt
 8005c3e:	1a9b      	subgt	r3, r3, r2
 8005c40:	18ed      	addgt	r5, r5, r3
 8005c42:	2600      	movs	r6, #0
 8005c44:	341a      	adds	r4, #26
 8005c46:	42b5      	cmp	r5, r6
 8005c48:	d11a      	bne.n	8005c80 <_printf_common+0xc8>
 8005c4a:	2000      	movs	r0, #0
 8005c4c:	e008      	b.n	8005c60 <_printf_common+0xa8>
 8005c4e:	2301      	movs	r3, #1
 8005c50:	4652      	mov	r2, sl
 8005c52:	4649      	mov	r1, r9
 8005c54:	4638      	mov	r0, r7
 8005c56:	47c0      	blx	r8
 8005c58:	3001      	adds	r0, #1
 8005c5a:	d103      	bne.n	8005c64 <_printf_common+0xac>
 8005c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c64:	3501      	adds	r5, #1
 8005c66:	e7c6      	b.n	8005bf6 <_printf_common+0x3e>
 8005c68:	18e1      	adds	r1, r4, r3
 8005c6a:	1c5a      	adds	r2, r3, #1
 8005c6c:	2030      	movs	r0, #48	; 0x30
 8005c6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c72:	4422      	add	r2, r4
 8005c74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c7c:	3302      	adds	r3, #2
 8005c7e:	e7c7      	b.n	8005c10 <_printf_common+0x58>
 8005c80:	2301      	movs	r3, #1
 8005c82:	4622      	mov	r2, r4
 8005c84:	4649      	mov	r1, r9
 8005c86:	4638      	mov	r0, r7
 8005c88:	47c0      	blx	r8
 8005c8a:	3001      	adds	r0, #1
 8005c8c:	d0e6      	beq.n	8005c5c <_printf_common+0xa4>
 8005c8e:	3601      	adds	r6, #1
 8005c90:	e7d9      	b.n	8005c46 <_printf_common+0x8e>
	...

08005c94 <_printf_i>:
 8005c94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c98:	7e0f      	ldrb	r7, [r1, #24]
 8005c9a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005c9c:	2f78      	cmp	r7, #120	; 0x78
 8005c9e:	4691      	mov	r9, r2
 8005ca0:	4680      	mov	r8, r0
 8005ca2:	460c      	mov	r4, r1
 8005ca4:	469a      	mov	sl, r3
 8005ca6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005caa:	d807      	bhi.n	8005cbc <_printf_i+0x28>
 8005cac:	2f62      	cmp	r7, #98	; 0x62
 8005cae:	d80a      	bhi.n	8005cc6 <_printf_i+0x32>
 8005cb0:	2f00      	cmp	r7, #0
 8005cb2:	f000 80d8 	beq.w	8005e66 <_printf_i+0x1d2>
 8005cb6:	2f58      	cmp	r7, #88	; 0x58
 8005cb8:	f000 80a3 	beq.w	8005e02 <_printf_i+0x16e>
 8005cbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005cc0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005cc4:	e03a      	b.n	8005d3c <_printf_i+0xa8>
 8005cc6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005cca:	2b15      	cmp	r3, #21
 8005ccc:	d8f6      	bhi.n	8005cbc <_printf_i+0x28>
 8005cce:	a101      	add	r1, pc, #4	; (adr r1, 8005cd4 <_printf_i+0x40>)
 8005cd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005cd4:	08005d2d 	.word	0x08005d2d
 8005cd8:	08005d41 	.word	0x08005d41
 8005cdc:	08005cbd 	.word	0x08005cbd
 8005ce0:	08005cbd 	.word	0x08005cbd
 8005ce4:	08005cbd 	.word	0x08005cbd
 8005ce8:	08005cbd 	.word	0x08005cbd
 8005cec:	08005d41 	.word	0x08005d41
 8005cf0:	08005cbd 	.word	0x08005cbd
 8005cf4:	08005cbd 	.word	0x08005cbd
 8005cf8:	08005cbd 	.word	0x08005cbd
 8005cfc:	08005cbd 	.word	0x08005cbd
 8005d00:	08005e4d 	.word	0x08005e4d
 8005d04:	08005d71 	.word	0x08005d71
 8005d08:	08005e2f 	.word	0x08005e2f
 8005d0c:	08005cbd 	.word	0x08005cbd
 8005d10:	08005cbd 	.word	0x08005cbd
 8005d14:	08005e6f 	.word	0x08005e6f
 8005d18:	08005cbd 	.word	0x08005cbd
 8005d1c:	08005d71 	.word	0x08005d71
 8005d20:	08005cbd 	.word	0x08005cbd
 8005d24:	08005cbd 	.word	0x08005cbd
 8005d28:	08005e37 	.word	0x08005e37
 8005d2c:	682b      	ldr	r3, [r5, #0]
 8005d2e:	1d1a      	adds	r2, r3, #4
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	602a      	str	r2, [r5, #0]
 8005d34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	e0a3      	b.n	8005e88 <_printf_i+0x1f4>
 8005d40:	6820      	ldr	r0, [r4, #0]
 8005d42:	6829      	ldr	r1, [r5, #0]
 8005d44:	0606      	lsls	r6, r0, #24
 8005d46:	f101 0304 	add.w	r3, r1, #4
 8005d4a:	d50a      	bpl.n	8005d62 <_printf_i+0xce>
 8005d4c:	680e      	ldr	r6, [r1, #0]
 8005d4e:	602b      	str	r3, [r5, #0]
 8005d50:	2e00      	cmp	r6, #0
 8005d52:	da03      	bge.n	8005d5c <_printf_i+0xc8>
 8005d54:	232d      	movs	r3, #45	; 0x2d
 8005d56:	4276      	negs	r6, r6
 8005d58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d5c:	485e      	ldr	r0, [pc, #376]	; (8005ed8 <_printf_i+0x244>)
 8005d5e:	230a      	movs	r3, #10
 8005d60:	e019      	b.n	8005d96 <_printf_i+0x102>
 8005d62:	680e      	ldr	r6, [r1, #0]
 8005d64:	602b      	str	r3, [r5, #0]
 8005d66:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005d6a:	bf18      	it	ne
 8005d6c:	b236      	sxthne	r6, r6
 8005d6e:	e7ef      	b.n	8005d50 <_printf_i+0xbc>
 8005d70:	682b      	ldr	r3, [r5, #0]
 8005d72:	6820      	ldr	r0, [r4, #0]
 8005d74:	1d19      	adds	r1, r3, #4
 8005d76:	6029      	str	r1, [r5, #0]
 8005d78:	0601      	lsls	r1, r0, #24
 8005d7a:	d501      	bpl.n	8005d80 <_printf_i+0xec>
 8005d7c:	681e      	ldr	r6, [r3, #0]
 8005d7e:	e002      	b.n	8005d86 <_printf_i+0xf2>
 8005d80:	0646      	lsls	r6, r0, #25
 8005d82:	d5fb      	bpl.n	8005d7c <_printf_i+0xe8>
 8005d84:	881e      	ldrh	r6, [r3, #0]
 8005d86:	4854      	ldr	r0, [pc, #336]	; (8005ed8 <_printf_i+0x244>)
 8005d88:	2f6f      	cmp	r7, #111	; 0x6f
 8005d8a:	bf0c      	ite	eq
 8005d8c:	2308      	moveq	r3, #8
 8005d8e:	230a      	movne	r3, #10
 8005d90:	2100      	movs	r1, #0
 8005d92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d96:	6865      	ldr	r5, [r4, #4]
 8005d98:	60a5      	str	r5, [r4, #8]
 8005d9a:	2d00      	cmp	r5, #0
 8005d9c:	bfa2      	ittt	ge
 8005d9e:	6821      	ldrge	r1, [r4, #0]
 8005da0:	f021 0104 	bicge.w	r1, r1, #4
 8005da4:	6021      	strge	r1, [r4, #0]
 8005da6:	b90e      	cbnz	r6, 8005dac <_printf_i+0x118>
 8005da8:	2d00      	cmp	r5, #0
 8005daa:	d04d      	beq.n	8005e48 <_printf_i+0x1b4>
 8005dac:	4615      	mov	r5, r2
 8005dae:	fbb6 f1f3 	udiv	r1, r6, r3
 8005db2:	fb03 6711 	mls	r7, r3, r1, r6
 8005db6:	5dc7      	ldrb	r7, [r0, r7]
 8005db8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005dbc:	4637      	mov	r7, r6
 8005dbe:	42bb      	cmp	r3, r7
 8005dc0:	460e      	mov	r6, r1
 8005dc2:	d9f4      	bls.n	8005dae <_printf_i+0x11a>
 8005dc4:	2b08      	cmp	r3, #8
 8005dc6:	d10b      	bne.n	8005de0 <_printf_i+0x14c>
 8005dc8:	6823      	ldr	r3, [r4, #0]
 8005dca:	07de      	lsls	r6, r3, #31
 8005dcc:	d508      	bpl.n	8005de0 <_printf_i+0x14c>
 8005dce:	6923      	ldr	r3, [r4, #16]
 8005dd0:	6861      	ldr	r1, [r4, #4]
 8005dd2:	4299      	cmp	r1, r3
 8005dd4:	bfde      	ittt	le
 8005dd6:	2330      	movle	r3, #48	; 0x30
 8005dd8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005ddc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005de0:	1b52      	subs	r2, r2, r5
 8005de2:	6122      	str	r2, [r4, #16]
 8005de4:	f8cd a000 	str.w	sl, [sp]
 8005de8:	464b      	mov	r3, r9
 8005dea:	aa03      	add	r2, sp, #12
 8005dec:	4621      	mov	r1, r4
 8005dee:	4640      	mov	r0, r8
 8005df0:	f7ff fee2 	bl	8005bb8 <_printf_common>
 8005df4:	3001      	adds	r0, #1
 8005df6:	d14c      	bne.n	8005e92 <_printf_i+0x1fe>
 8005df8:	f04f 30ff 	mov.w	r0, #4294967295
 8005dfc:	b004      	add	sp, #16
 8005dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e02:	4835      	ldr	r0, [pc, #212]	; (8005ed8 <_printf_i+0x244>)
 8005e04:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005e08:	6829      	ldr	r1, [r5, #0]
 8005e0a:	6823      	ldr	r3, [r4, #0]
 8005e0c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005e10:	6029      	str	r1, [r5, #0]
 8005e12:	061d      	lsls	r5, r3, #24
 8005e14:	d514      	bpl.n	8005e40 <_printf_i+0x1ac>
 8005e16:	07df      	lsls	r7, r3, #31
 8005e18:	bf44      	itt	mi
 8005e1a:	f043 0320 	orrmi.w	r3, r3, #32
 8005e1e:	6023      	strmi	r3, [r4, #0]
 8005e20:	b91e      	cbnz	r6, 8005e2a <_printf_i+0x196>
 8005e22:	6823      	ldr	r3, [r4, #0]
 8005e24:	f023 0320 	bic.w	r3, r3, #32
 8005e28:	6023      	str	r3, [r4, #0]
 8005e2a:	2310      	movs	r3, #16
 8005e2c:	e7b0      	b.n	8005d90 <_printf_i+0xfc>
 8005e2e:	6823      	ldr	r3, [r4, #0]
 8005e30:	f043 0320 	orr.w	r3, r3, #32
 8005e34:	6023      	str	r3, [r4, #0]
 8005e36:	2378      	movs	r3, #120	; 0x78
 8005e38:	4828      	ldr	r0, [pc, #160]	; (8005edc <_printf_i+0x248>)
 8005e3a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005e3e:	e7e3      	b.n	8005e08 <_printf_i+0x174>
 8005e40:	0659      	lsls	r1, r3, #25
 8005e42:	bf48      	it	mi
 8005e44:	b2b6      	uxthmi	r6, r6
 8005e46:	e7e6      	b.n	8005e16 <_printf_i+0x182>
 8005e48:	4615      	mov	r5, r2
 8005e4a:	e7bb      	b.n	8005dc4 <_printf_i+0x130>
 8005e4c:	682b      	ldr	r3, [r5, #0]
 8005e4e:	6826      	ldr	r6, [r4, #0]
 8005e50:	6961      	ldr	r1, [r4, #20]
 8005e52:	1d18      	adds	r0, r3, #4
 8005e54:	6028      	str	r0, [r5, #0]
 8005e56:	0635      	lsls	r5, r6, #24
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	d501      	bpl.n	8005e60 <_printf_i+0x1cc>
 8005e5c:	6019      	str	r1, [r3, #0]
 8005e5e:	e002      	b.n	8005e66 <_printf_i+0x1d2>
 8005e60:	0670      	lsls	r0, r6, #25
 8005e62:	d5fb      	bpl.n	8005e5c <_printf_i+0x1c8>
 8005e64:	8019      	strh	r1, [r3, #0]
 8005e66:	2300      	movs	r3, #0
 8005e68:	6123      	str	r3, [r4, #16]
 8005e6a:	4615      	mov	r5, r2
 8005e6c:	e7ba      	b.n	8005de4 <_printf_i+0x150>
 8005e6e:	682b      	ldr	r3, [r5, #0]
 8005e70:	1d1a      	adds	r2, r3, #4
 8005e72:	602a      	str	r2, [r5, #0]
 8005e74:	681d      	ldr	r5, [r3, #0]
 8005e76:	6862      	ldr	r2, [r4, #4]
 8005e78:	2100      	movs	r1, #0
 8005e7a:	4628      	mov	r0, r5
 8005e7c:	f7fa f9b8 	bl	80001f0 <memchr>
 8005e80:	b108      	cbz	r0, 8005e86 <_printf_i+0x1f2>
 8005e82:	1b40      	subs	r0, r0, r5
 8005e84:	6060      	str	r0, [r4, #4]
 8005e86:	6863      	ldr	r3, [r4, #4]
 8005e88:	6123      	str	r3, [r4, #16]
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e90:	e7a8      	b.n	8005de4 <_printf_i+0x150>
 8005e92:	6923      	ldr	r3, [r4, #16]
 8005e94:	462a      	mov	r2, r5
 8005e96:	4649      	mov	r1, r9
 8005e98:	4640      	mov	r0, r8
 8005e9a:	47d0      	blx	sl
 8005e9c:	3001      	adds	r0, #1
 8005e9e:	d0ab      	beq.n	8005df8 <_printf_i+0x164>
 8005ea0:	6823      	ldr	r3, [r4, #0]
 8005ea2:	079b      	lsls	r3, r3, #30
 8005ea4:	d413      	bmi.n	8005ece <_printf_i+0x23a>
 8005ea6:	68e0      	ldr	r0, [r4, #12]
 8005ea8:	9b03      	ldr	r3, [sp, #12]
 8005eaa:	4298      	cmp	r0, r3
 8005eac:	bfb8      	it	lt
 8005eae:	4618      	movlt	r0, r3
 8005eb0:	e7a4      	b.n	8005dfc <_printf_i+0x168>
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	4632      	mov	r2, r6
 8005eb6:	4649      	mov	r1, r9
 8005eb8:	4640      	mov	r0, r8
 8005eba:	47d0      	blx	sl
 8005ebc:	3001      	adds	r0, #1
 8005ebe:	d09b      	beq.n	8005df8 <_printf_i+0x164>
 8005ec0:	3501      	adds	r5, #1
 8005ec2:	68e3      	ldr	r3, [r4, #12]
 8005ec4:	9903      	ldr	r1, [sp, #12]
 8005ec6:	1a5b      	subs	r3, r3, r1
 8005ec8:	42ab      	cmp	r3, r5
 8005eca:	dcf2      	bgt.n	8005eb2 <_printf_i+0x21e>
 8005ecc:	e7eb      	b.n	8005ea6 <_printf_i+0x212>
 8005ece:	2500      	movs	r5, #0
 8005ed0:	f104 0619 	add.w	r6, r4, #25
 8005ed4:	e7f5      	b.n	8005ec2 <_printf_i+0x22e>
 8005ed6:	bf00      	nop
 8005ed8:	0800612d 	.word	0x0800612d
 8005edc:	0800613e 	.word	0x0800613e

08005ee0 <_sbrk_r>:
 8005ee0:	b538      	push	{r3, r4, r5, lr}
 8005ee2:	4d06      	ldr	r5, [pc, #24]	; (8005efc <_sbrk_r+0x1c>)
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	4604      	mov	r4, r0
 8005ee8:	4608      	mov	r0, r1
 8005eea:	602b      	str	r3, [r5, #0]
 8005eec:	f7fb fd48 	bl	8001980 <_sbrk>
 8005ef0:	1c43      	adds	r3, r0, #1
 8005ef2:	d102      	bne.n	8005efa <_sbrk_r+0x1a>
 8005ef4:	682b      	ldr	r3, [r5, #0]
 8005ef6:	b103      	cbz	r3, 8005efa <_sbrk_r+0x1a>
 8005ef8:	6023      	str	r3, [r4, #0]
 8005efa:	bd38      	pop	{r3, r4, r5, pc}
 8005efc:	20000878 	.word	0x20000878

08005f00 <__sread>:
 8005f00:	b510      	push	{r4, lr}
 8005f02:	460c      	mov	r4, r1
 8005f04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f08:	f000 f8a0 	bl	800604c <_read_r>
 8005f0c:	2800      	cmp	r0, #0
 8005f0e:	bfab      	itete	ge
 8005f10:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005f12:	89a3      	ldrhlt	r3, [r4, #12]
 8005f14:	181b      	addge	r3, r3, r0
 8005f16:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005f1a:	bfac      	ite	ge
 8005f1c:	6563      	strge	r3, [r4, #84]	; 0x54
 8005f1e:	81a3      	strhlt	r3, [r4, #12]
 8005f20:	bd10      	pop	{r4, pc}

08005f22 <__swrite>:
 8005f22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f26:	461f      	mov	r7, r3
 8005f28:	898b      	ldrh	r3, [r1, #12]
 8005f2a:	05db      	lsls	r3, r3, #23
 8005f2c:	4605      	mov	r5, r0
 8005f2e:	460c      	mov	r4, r1
 8005f30:	4616      	mov	r6, r2
 8005f32:	d505      	bpl.n	8005f40 <__swrite+0x1e>
 8005f34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f38:	2302      	movs	r3, #2
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f000 f868 	bl	8006010 <_lseek_r>
 8005f40:	89a3      	ldrh	r3, [r4, #12]
 8005f42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f4a:	81a3      	strh	r3, [r4, #12]
 8005f4c:	4632      	mov	r2, r6
 8005f4e:	463b      	mov	r3, r7
 8005f50:	4628      	mov	r0, r5
 8005f52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f56:	f000 b817 	b.w	8005f88 <_write_r>

08005f5a <__sseek>:
 8005f5a:	b510      	push	{r4, lr}
 8005f5c:	460c      	mov	r4, r1
 8005f5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f62:	f000 f855 	bl	8006010 <_lseek_r>
 8005f66:	1c43      	adds	r3, r0, #1
 8005f68:	89a3      	ldrh	r3, [r4, #12]
 8005f6a:	bf15      	itete	ne
 8005f6c:	6560      	strne	r0, [r4, #84]	; 0x54
 8005f6e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005f72:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005f76:	81a3      	strheq	r3, [r4, #12]
 8005f78:	bf18      	it	ne
 8005f7a:	81a3      	strhne	r3, [r4, #12]
 8005f7c:	bd10      	pop	{r4, pc}

08005f7e <__sclose>:
 8005f7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f82:	f000 b813 	b.w	8005fac <_close_r>
	...

08005f88 <_write_r>:
 8005f88:	b538      	push	{r3, r4, r5, lr}
 8005f8a:	4d07      	ldr	r5, [pc, #28]	; (8005fa8 <_write_r+0x20>)
 8005f8c:	4604      	mov	r4, r0
 8005f8e:	4608      	mov	r0, r1
 8005f90:	4611      	mov	r1, r2
 8005f92:	2200      	movs	r2, #0
 8005f94:	602a      	str	r2, [r5, #0]
 8005f96:	461a      	mov	r2, r3
 8005f98:	f7fb fa6a 	bl	8001470 <_write>
 8005f9c:	1c43      	adds	r3, r0, #1
 8005f9e:	d102      	bne.n	8005fa6 <_write_r+0x1e>
 8005fa0:	682b      	ldr	r3, [r5, #0]
 8005fa2:	b103      	cbz	r3, 8005fa6 <_write_r+0x1e>
 8005fa4:	6023      	str	r3, [r4, #0]
 8005fa6:	bd38      	pop	{r3, r4, r5, pc}
 8005fa8:	20000878 	.word	0x20000878

08005fac <_close_r>:
 8005fac:	b538      	push	{r3, r4, r5, lr}
 8005fae:	4d06      	ldr	r5, [pc, #24]	; (8005fc8 <_close_r+0x1c>)
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	4604      	mov	r4, r0
 8005fb4:	4608      	mov	r0, r1
 8005fb6:	602b      	str	r3, [r5, #0]
 8005fb8:	f7fb fcad 	bl	8001916 <_close>
 8005fbc:	1c43      	adds	r3, r0, #1
 8005fbe:	d102      	bne.n	8005fc6 <_close_r+0x1a>
 8005fc0:	682b      	ldr	r3, [r5, #0]
 8005fc2:	b103      	cbz	r3, 8005fc6 <_close_r+0x1a>
 8005fc4:	6023      	str	r3, [r4, #0]
 8005fc6:	bd38      	pop	{r3, r4, r5, pc}
 8005fc8:	20000878 	.word	0x20000878

08005fcc <_fstat_r>:
 8005fcc:	b538      	push	{r3, r4, r5, lr}
 8005fce:	4d07      	ldr	r5, [pc, #28]	; (8005fec <_fstat_r+0x20>)
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	4604      	mov	r4, r0
 8005fd4:	4608      	mov	r0, r1
 8005fd6:	4611      	mov	r1, r2
 8005fd8:	602b      	str	r3, [r5, #0]
 8005fda:	f7fb fca8 	bl	800192e <_fstat>
 8005fde:	1c43      	adds	r3, r0, #1
 8005fe0:	d102      	bne.n	8005fe8 <_fstat_r+0x1c>
 8005fe2:	682b      	ldr	r3, [r5, #0]
 8005fe4:	b103      	cbz	r3, 8005fe8 <_fstat_r+0x1c>
 8005fe6:	6023      	str	r3, [r4, #0]
 8005fe8:	bd38      	pop	{r3, r4, r5, pc}
 8005fea:	bf00      	nop
 8005fec:	20000878 	.word	0x20000878

08005ff0 <_isatty_r>:
 8005ff0:	b538      	push	{r3, r4, r5, lr}
 8005ff2:	4d06      	ldr	r5, [pc, #24]	; (800600c <_isatty_r+0x1c>)
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	4604      	mov	r4, r0
 8005ff8:	4608      	mov	r0, r1
 8005ffa:	602b      	str	r3, [r5, #0]
 8005ffc:	f7fb fca7 	bl	800194e <_isatty>
 8006000:	1c43      	adds	r3, r0, #1
 8006002:	d102      	bne.n	800600a <_isatty_r+0x1a>
 8006004:	682b      	ldr	r3, [r5, #0]
 8006006:	b103      	cbz	r3, 800600a <_isatty_r+0x1a>
 8006008:	6023      	str	r3, [r4, #0]
 800600a:	bd38      	pop	{r3, r4, r5, pc}
 800600c:	20000878 	.word	0x20000878

08006010 <_lseek_r>:
 8006010:	b538      	push	{r3, r4, r5, lr}
 8006012:	4d07      	ldr	r5, [pc, #28]	; (8006030 <_lseek_r+0x20>)
 8006014:	4604      	mov	r4, r0
 8006016:	4608      	mov	r0, r1
 8006018:	4611      	mov	r1, r2
 800601a:	2200      	movs	r2, #0
 800601c:	602a      	str	r2, [r5, #0]
 800601e:	461a      	mov	r2, r3
 8006020:	f7fb fca0 	bl	8001964 <_lseek>
 8006024:	1c43      	adds	r3, r0, #1
 8006026:	d102      	bne.n	800602e <_lseek_r+0x1e>
 8006028:	682b      	ldr	r3, [r5, #0]
 800602a:	b103      	cbz	r3, 800602e <_lseek_r+0x1e>
 800602c:	6023      	str	r3, [r4, #0]
 800602e:	bd38      	pop	{r3, r4, r5, pc}
 8006030:	20000878 	.word	0x20000878

08006034 <__malloc_lock>:
 8006034:	4801      	ldr	r0, [pc, #4]	; (800603c <__malloc_lock+0x8>)
 8006036:	f7ff bb1d 	b.w	8005674 <__retarget_lock_acquire_recursive>
 800603a:	bf00      	nop
 800603c:	2000086c 	.word	0x2000086c

08006040 <__malloc_unlock>:
 8006040:	4801      	ldr	r0, [pc, #4]	; (8006048 <__malloc_unlock+0x8>)
 8006042:	f7ff bb18 	b.w	8005676 <__retarget_lock_release_recursive>
 8006046:	bf00      	nop
 8006048:	2000086c 	.word	0x2000086c

0800604c <_read_r>:
 800604c:	b538      	push	{r3, r4, r5, lr}
 800604e:	4d07      	ldr	r5, [pc, #28]	; (800606c <_read_r+0x20>)
 8006050:	4604      	mov	r4, r0
 8006052:	4608      	mov	r0, r1
 8006054:	4611      	mov	r1, r2
 8006056:	2200      	movs	r2, #0
 8006058:	602a      	str	r2, [r5, #0]
 800605a:	461a      	mov	r2, r3
 800605c:	f7fb fc3e 	bl	80018dc <_read>
 8006060:	1c43      	adds	r3, r0, #1
 8006062:	d102      	bne.n	800606a <_read_r+0x1e>
 8006064:	682b      	ldr	r3, [r5, #0]
 8006066:	b103      	cbz	r3, 800606a <_read_r+0x1e>
 8006068:	6023      	str	r3, [r4, #0]
 800606a:	bd38      	pop	{r3, r4, r5, pc}
 800606c:	20000878 	.word	0x20000878

08006070 <_init>:
 8006070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006072:	bf00      	nop
 8006074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006076:	bc08      	pop	{r3}
 8006078:	469e      	mov	lr, r3
 800607a:	4770      	bx	lr

0800607c <_fini>:
 800607c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800607e:	bf00      	nop
 8006080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006082:	bc08      	pop	{r3}
 8006084:	469e      	mov	lr, r3
 8006086:	4770      	bx	lr
