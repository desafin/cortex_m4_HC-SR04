
TEST_sonic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c74  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f4  08009e28  08009e28  00019e28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a31c  0800a31c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a31c  0800a31c  0001a31c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a324  0800a324  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a324  0800a324  0001a324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a328  0800a328  0001a328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a32c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          00000848  200001e0  200001e0  000201e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000a28  20000a28  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000146f4  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002448  00000000  00000000  00034904  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001158  00000000  00000000  00036d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001080  00000000  00000000  00037ea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025b42  00000000  00000000  00038f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001270d  00000000  00000000  0005ea6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e4101  00000000  00000000  00071177  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00155278  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000615c  00000000  00000000  001552c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009e0c 	.word	0x08009e0c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	08009e0c 	.word	0x08009e0c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9aa 	b.w	8001014 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468e      	mov	lr, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d14d      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d52:	428a      	cmp	r2, r1
 8000d54:	4694      	mov	ip, r2
 8000d56:	d969      	bls.n	8000e2c <__udivmoddi4+0xe8>
 8000d58:	fab2 f282 	clz	r2, r2
 8000d5c:	b152      	cbz	r2, 8000d74 <__udivmoddi4+0x30>
 8000d5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d62:	f1c2 0120 	rsb	r1, r2, #32
 8000d66:	fa20 f101 	lsr.w	r1, r0, r1
 8000d6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d72:	4094      	lsls	r4, r2
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	0c21      	lsrs	r1, r4, #16
 8000d7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d7e:	fa1f f78c 	uxth.w	r7, ip
 8000d82:	fb08 e316 	mls	r3, r8, r6, lr
 8000d86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d8a:	fb06 f107 	mul.w	r1, r6, r7
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d9a:	f080 811f 	bcs.w	8000fdc <__udivmoddi4+0x298>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 811c 	bls.w	8000fdc <__udivmoddi4+0x298>
 8000da4:	3e02      	subs	r6, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb00 f707 	mul.w	r7, r0, r7
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x92>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc8:	f080 810a 	bcs.w	8000fe0 <__udivmoddi4+0x29c>
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	f240 8107 	bls.w	8000fe0 <__udivmoddi4+0x29c>
 8000dd2:	4464      	add	r4, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dda:	1be4      	subs	r4, r4, r7
 8000ddc:	2600      	movs	r6, #0
 8000dde:	b11d      	cbz	r5, 8000de8 <__udivmoddi4+0xa4>
 8000de0:	40d4      	lsrs	r4, r2
 8000de2:	2300      	movs	r3, #0
 8000de4:	e9c5 4300 	strd	r4, r3, [r5]
 8000de8:	4631      	mov	r1, r6
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0xc2>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80ef 	beq.w	8000fd6 <__udivmoddi4+0x292>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x160>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0xd4>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80f9 	bhi.w	800100a <__udivmoddi4+0x2c6>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	469e      	mov	lr, r3
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0e0      	beq.n	8000de8 <__udivmoddi4+0xa4>
 8000e26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e2a:	e7dd      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000e2c:	b902      	cbnz	r2, 8000e30 <__udivmoddi4+0xec>
 8000e2e:	deff      	udf	#255	; 0xff
 8000e30:	fab2 f282 	clz	r2, r2
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	f040 8092 	bne.w	8000f5e <__udivmoddi4+0x21a>
 8000e3a:	eba1 010c 	sub.w	r1, r1, ip
 8000e3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	2601      	movs	r6, #1
 8000e48:	0c20      	lsrs	r0, r4, #16
 8000e4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e56:	fb0e f003 	mul.w	r0, lr, r3
 8000e5a:	4288      	cmp	r0, r1
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x12c>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x12a>
 8000e68:	4288      	cmp	r0, r1
 8000e6a:	f200 80cb 	bhi.w	8001004 <__udivmoddi4+0x2c0>
 8000e6e:	4643      	mov	r3, r8
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1110 	mls	r1, r7, r0, r1
 8000e7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e80:	fb0e fe00 	mul.w	lr, lr, r0
 8000e84:	45a6      	cmp	lr, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x156>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e90:	d202      	bcs.n	8000e98 <__udivmoddi4+0x154>
 8000e92:	45a6      	cmp	lr, r4
 8000e94:	f200 80bb 	bhi.w	800100e <__udivmoddi4+0x2ca>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ea2:	e79c      	b.n	8000dde <__udivmoddi4+0x9a>
 8000ea4:	f1c6 0720 	rsb	r7, r6, #32
 8000ea8:	40b3      	lsls	r3, r6
 8000eaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	431c      	orrs	r4, r3
 8000ebc:	40f9      	lsrs	r1, r7
 8000ebe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eca:	0c20      	lsrs	r0, r4, #16
 8000ecc:	fa1f fe8c 	uxth.w	lr, ip
 8000ed0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ed4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed8:	fb08 f00e 	mul.w	r0, r8, lr
 8000edc:	4288      	cmp	r0, r1
 8000ede:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee2:	d90b      	bls.n	8000efc <__udivmoddi4+0x1b8>
 8000ee4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000eec:	f080 8088 	bcs.w	8001000 <__udivmoddi4+0x2bc>
 8000ef0:	4288      	cmp	r0, r1
 8000ef2:	f240 8085 	bls.w	8001000 <__udivmoddi4+0x2bc>
 8000ef6:	f1a8 0802 	sub.w	r8, r8, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	1a09      	subs	r1, r1, r0
 8000efe:	b2a4      	uxth	r4, r4
 8000f00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f04:	fb09 1110 	mls	r1, r9, r0, r1
 8000f08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f10:	458e      	cmp	lr, r1
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x1e2>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f1c:	d26c      	bcs.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f1e:	458e      	cmp	lr, r1
 8000f20:	d96a      	bls.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4461      	add	r1, ip
 8000f26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f2e:	eba1 010e 	sub.w	r1, r1, lr
 8000f32:	42a1      	cmp	r1, r4
 8000f34:	46c8      	mov	r8, r9
 8000f36:	46a6      	mov	lr, r4
 8000f38:	d356      	bcc.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f3a:	d053      	beq.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f3c:	b15d      	cbz	r5, 8000f56 <__udivmoddi4+0x212>
 8000f3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f42:	eb61 010e 	sbc.w	r1, r1, lr
 8000f46:	fa01 f707 	lsl.w	r7, r1, r7
 8000f4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f4e:	40f1      	lsrs	r1, r6
 8000f50:	431f      	orrs	r7, r3
 8000f52:	e9c5 7100 	strd	r7, r1, [r5]
 8000f56:	2600      	movs	r6, #0
 8000f58:	4631      	mov	r1, r6
 8000f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5e:	f1c2 0320 	rsb	r3, r2, #32
 8000f62:	40d8      	lsrs	r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	fa21 f303 	lsr.w	r3, r1, r3
 8000f6c:	4091      	lsls	r1, r2
 8000f6e:	4301      	orrs	r1, r0
 8000f70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f74:	fa1f fe8c 	uxth.w	lr, ip
 8000f78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f80:	0c0b      	lsrs	r3, r1, #16
 8000f82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f86:	fb00 f60e 	mul.w	r6, r0, lr
 8000f8a:	429e      	cmp	r6, r3
 8000f8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x260>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f9a:	d22f      	bcs.n	8000ffc <__udivmoddi4+0x2b8>
 8000f9c:	429e      	cmp	r6, r3
 8000f9e:	d92d      	bls.n	8000ffc <__udivmoddi4+0x2b8>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1b9b      	subs	r3, r3, r6
 8000fa6:	b289      	uxth	r1, r1
 8000fa8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fac:	fb07 3316 	mls	r3, r7, r6, r3
 8000fb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fb8:	428b      	cmp	r3, r1
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x28a>
 8000fbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fc4:	d216      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d914      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fca:	3e02      	subs	r6, #2
 8000fcc:	4461      	add	r1, ip
 8000fce:	1ac9      	subs	r1, r1, r3
 8000fd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fd4:	e738      	b.n	8000e48 <__udivmoddi4+0x104>
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e705      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e3      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6f8      	b.n	8000dd6 <__udivmoddi4+0x92>
 8000fe4:	454b      	cmp	r3, r9
 8000fe6:	d2a9      	bcs.n	8000f3c <__udivmoddi4+0x1f8>
 8000fe8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7a3      	b.n	8000f3c <__udivmoddi4+0x1f8>
 8000ff4:	4646      	mov	r6, r8
 8000ff6:	e7ea      	b.n	8000fce <__udivmoddi4+0x28a>
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	e794      	b.n	8000f26 <__udivmoddi4+0x1e2>
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	e7d1      	b.n	8000fa4 <__udivmoddi4+0x260>
 8001000:	46d0      	mov	r8, sl
 8001002:	e77b      	b.n	8000efc <__udivmoddi4+0x1b8>
 8001004:	3b02      	subs	r3, #2
 8001006:	4461      	add	r1, ip
 8001008:	e732      	b.n	8000e70 <__udivmoddi4+0x12c>
 800100a:	4630      	mov	r0, r6
 800100c:	e709      	b.n	8000e22 <__udivmoddi4+0xde>
 800100e:	4464      	add	r4, ip
 8001010:	3802      	subs	r0, #2
 8001012:	e742      	b.n	8000e9a <__udivmoddi4+0x156>

08001014 <__aeabi_idiv0>:
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <delay>:
static void MX_USART3_UART_Init(void);
static void MX_USB_OTG_FS_PCD_Init(void);
static void MX_TIM3_Init(void);
/* USER CODE BEGIN PFP */
void delay (uint16_t time)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8001022:	4b09      	ldr	r3, [pc, #36]	; (8001048 <delay+0x30>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	2200      	movs	r2, #0
 8001028:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER (&htim3) < time);
 800102a:	bf00      	nop
 800102c:	4b06      	ldr	r3, [pc, #24]	; (8001048 <delay+0x30>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001032:	88fb      	ldrh	r3, [r7, #6]
 8001034:	429a      	cmp	r2, r3
 8001036:	d3f9      	bcc.n	800102c <delay+0x14>
}
 8001038:	bf00      	nop
 800103a:	bf00      	nop
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	20000424 	.word	0x20000424
 800104c:	00000000 	.word	0x00000000

08001050 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	7f1b      	ldrb	r3, [r3, #28]
 800105c:	2b01      	cmp	r3, #1
 800105e:	f040 8082 	bne.w	8001166 <HAL_TIM_IC_CaptureCallback+0x116>
	{
		if (Flag==0) // if the first value is not captured
 8001062:	4b45      	ldr	r3, [pc, #276]	; (8001178 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d11a      	bne.n	80010a0 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 800106a:	2100      	movs	r1, #0
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f002 ff53 	bl	8003f18 <HAL_TIM_ReadCapturedValue>
 8001072:	4603      	mov	r3, r0
 8001074:	4a41      	ldr	r2, [pc, #260]	; (800117c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001076:	6013      	str	r3, [r2, #0]
			Flag = 1;  // set the first captured as true
 8001078:	4b3f      	ldr	r3, [pc, #252]	; (8001178 <HAL_TIM_IC_CaptureCallback+0x128>)
 800107a:	2201      	movs	r2, #1
 800107c:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	6a1a      	ldr	r2, [r3, #32]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f022 020a 	bic.w	r2, r2, #10
 800108c:	621a      	str	r2, [r3, #32]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	6a1a      	ldr	r2, [r3, #32]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f042 0202 	orr.w	r2, r2, #2
 800109c:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC1);
		}
	}
}
 800109e:	e062      	b.n	8001166 <HAL_TIM_IC_CaptureCallback+0x116>
		else if (Flag==1)   // if the first is already captured
 80010a0:	4b35      	ldr	r3, [pc, #212]	; (8001178 <HAL_TIM_IC_CaptureCallback+0x128>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d15e      	bne.n	8001166 <HAL_TIM_IC_CaptureCallback+0x116>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 80010a8:	2100      	movs	r1, #0
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f002 ff34 	bl	8003f18 <HAL_TIM_ReadCapturedValue>
 80010b0:	4603      	mov	r3, r0
 80010b2:	4a33      	ldr	r2, [pc, #204]	; (8001180 <HAL_TIM_IC_CaptureCallback+0x130>)
 80010b4:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	2200      	movs	r2, #0
 80010bc:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1)
 80010be:	4b30      	ldr	r3, [pc, #192]	; (8001180 <HAL_TIM_IC_CaptureCallback+0x130>)
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	4b2e      	ldr	r3, [pc, #184]	; (800117c <HAL_TIM_IC_CaptureCallback+0x12c>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	429a      	cmp	r2, r3
 80010c8:	d907      	bls.n	80010da <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = IC_Val2-IC_Val1;
 80010ca:	4b2d      	ldr	r3, [pc, #180]	; (8001180 <HAL_TIM_IC_CaptureCallback+0x130>)
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	4b2b      	ldr	r3, [pc, #172]	; (800117c <HAL_TIM_IC_CaptureCallback+0x12c>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	1ad3      	subs	r3, r2, r3
 80010d4:	4a2b      	ldr	r2, [pc, #172]	; (8001184 <HAL_TIM_IC_CaptureCallback+0x134>)
 80010d6:	6013      	str	r3, [r2, #0]
 80010d8:	e00f      	b.n	80010fa <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (IC_Val1 > IC_Val2)
 80010da:	4b28      	ldr	r3, [pc, #160]	; (800117c <HAL_TIM_IC_CaptureCallback+0x12c>)
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	4b28      	ldr	r3, [pc, #160]	; (8001180 <HAL_TIM_IC_CaptureCallback+0x130>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	429a      	cmp	r2, r3
 80010e4:	d909      	bls.n	80010fa <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 80010e6:	4b26      	ldr	r3, [pc, #152]	; (8001180 <HAL_TIM_IC_CaptureCallback+0x130>)
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	4b24      	ldr	r3, [pc, #144]	; (800117c <HAL_TIM_IC_CaptureCallback+0x12c>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	1ad3      	subs	r3, r2, r3
 80010f0:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80010f4:	33ff      	adds	r3, #255	; 0xff
 80010f6:	4a23      	ldr	r2, [pc, #140]	; (8001184 <HAL_TIM_IC_CaptureCallback+0x134>)
 80010f8:	6013      	str	r3, [r2, #0]
			Distance = Difference * .034/2;
 80010fa:	4b22      	ldr	r3, [pc, #136]	; (8001184 <HAL_TIM_IC_CaptureCallback+0x134>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff fa10 	bl	8000524 <__aeabi_ui2d>
 8001104:	a31a      	add	r3, pc, #104	; (adr r3, 8001170 <HAL_TIM_IC_CaptureCallback+0x120>)
 8001106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800110a:	f7ff fa85 	bl	8000618 <__aeabi_dmul>
 800110e:	4602      	mov	r2, r0
 8001110:	460b      	mov	r3, r1
 8001112:	4610      	mov	r0, r2
 8001114:	4619      	mov	r1, r3
 8001116:	f04f 0200 	mov.w	r2, #0
 800111a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800111e:	f7ff fba5 	bl	800086c <__aeabi_ddiv>
 8001122:	4602      	mov	r2, r0
 8001124:	460b      	mov	r3, r1
 8001126:	4610      	mov	r0, r2
 8001128:	4619      	mov	r1, r3
 800112a:	f7ff fd6d 	bl	8000c08 <__aeabi_d2f>
 800112e:	4603      	mov	r3, r0
 8001130:	4a15      	ldr	r2, [pc, #84]	; (8001188 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001132:	6013      	str	r3, [r2, #0]
			Flag = 0; // set it back to false
 8001134:	4b10      	ldr	r3, [pc, #64]	; (8001178 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001136:	2200      	movs	r2, #0
 8001138:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	6a1a      	ldr	r2, [r3, #32]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f022 020a 	bic.w	r2, r2, #10
 8001148:	621a      	str	r2, [r3, #32]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	6a12      	ldr	r2, [r2, #32]
 8001154:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC1);
 8001156:	4b0d      	ldr	r3, [pc, #52]	; (800118c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	68da      	ldr	r2, [r3, #12]
 800115c:	4b0b      	ldr	r3, [pc, #44]	; (800118c <HAL_TIM_IC_CaptureCallback+0x13c>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f022 0202 	bic.w	r2, r2, #2
 8001164:	60da      	str	r2, [r3, #12]
}
 8001166:	bf00      	nop
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	b020c49c 	.word	0xb020c49c
 8001174:	3fa16872 	.word	0x3fa16872
 8001178:	200009c8 	.word	0x200009c8
 800117c:	200009bc 	.word	0x200009bc
 8001180:	200009c0 	.word	0x200009c0
 8001184:	200009c4 	.word	0x200009c4
 8001188:	200009cc 	.word	0x200009cc
 800118c:	20000424 	.word	0x20000424

08001190 <HCSR04_Read>:

void HCSR04_Read (void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8001194:	2201      	movs	r2, #1
 8001196:	2120      	movs	r1, #32
 8001198:	480a      	ldr	r0, [pc, #40]	; (80011c4 <HCSR04_Read+0x34>)
 800119a:	f001 fcb3 	bl	8002b04 <HAL_GPIO_WritePin>
	delay(10);  // wait for 10 us
 800119e:	200a      	movs	r0, #10
 80011a0:	f7ff ff3a 	bl	8001018 <delay>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 80011a4:	2200      	movs	r2, #0
 80011a6:	2120      	movs	r1, #32
 80011a8:	4806      	ldr	r0, [pc, #24]	; (80011c4 <HCSR04_Read+0x34>)
 80011aa:	f001 fcab 	bl	8002b04 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_CC1);
 80011ae:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <HCSR04_Read+0x38>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	68da      	ldr	r2, [r3, #12]
 80011b4:	4b04      	ldr	r3, [pc, #16]	; (80011c8 <HCSR04_Read+0x38>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f042 0202 	orr.w	r2, r2, #2
 80011bc:	60da      	str	r2, [r3, #12]
}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40020000 	.word	0x40020000
 80011c8:	20000424 	.word	0x20000424

080011cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011d0:	f000 fe1c 	bl	8001e0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011d4:	f000 f884 	bl	80012e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011d8:	f000 fa02 	bl	80015e0 <MX_GPIO_Init>
  MX_ETH_Init();
 80011dc:	f000 f8ea 	bl	80013b4 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80011e0:	f000 f9a6 	bl	8001530 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80011e4:	f000 f9ce 	bl	8001584 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 80011e8:	f000 f932 	bl	8001450 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 80011ec:	2100      	movs	r1, #0
 80011ee:	4832      	ldr	r0, [pc, #200]	; (80012b8 <main+0xec>)
 80011f0:	f002 fafe 	bl	80037f0 <HAL_TIM_IC_Start_IT>
  printf("Open Project\r\n");
 80011f4:	4831      	ldr	r0, [pc, #196]	; (80012bc <main+0xf0>)
 80011f6:	f005 f80b 	bl	8006210 <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HCSR04_Read();
 80011fa:	f7ff ffc9 	bl	8001190 <HCSR04_Read>


	  // subtract the last reading:
	  total = total - readings[idx];
 80011fe:	4b30      	ldr	r3, [pc, #192]	; (80012c0 <main+0xf4>)
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	4b30      	ldr	r3, [pc, #192]	; (80012c4 <main+0xf8>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4930      	ldr	r1, [pc, #192]	; (80012c8 <main+0xfc>)
 8001208:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	4a2c      	ldr	r2, [pc, #176]	; (80012c0 <main+0xf4>)
 8001210:	6013      	str	r3, [r2, #0]
	  // read from the sensor:
	  readings[idx] = Distance;
 8001212:	4b2e      	ldr	r3, [pc, #184]	; (80012cc <main+0x100>)
 8001214:	edd3 7a00 	vldr	s15, [r3]
 8001218:	4b2a      	ldr	r3, [pc, #168]	; (80012c4 <main+0xf8>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001220:	ee17 1a90 	vmov	r1, s15
 8001224:	4a28      	ldr	r2, [pc, #160]	; (80012c8 <main+0xfc>)
 8001226:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  // add the reading to the total:
	  total = total + readings[idx];
 800122a:	4b26      	ldr	r3, [pc, #152]	; (80012c4 <main+0xf8>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a26      	ldr	r2, [pc, #152]	; (80012c8 <main+0xfc>)
 8001230:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001234:	4b22      	ldr	r3, [pc, #136]	; (80012c0 <main+0xf4>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4413      	add	r3, r2
 800123a:	4a21      	ldr	r2, [pc, #132]	; (80012c0 <main+0xf4>)
 800123c:	6013      	str	r3, [r2, #0]
	  // advance to the next position in the array:
	  idx = idx + 1;
 800123e:	4b21      	ldr	r3, [pc, #132]	; (80012c4 <main+0xf8>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	3301      	adds	r3, #1
 8001244:	4a1f      	ldr	r2, [pc, #124]	; (80012c4 <main+0xf8>)
 8001246:	6013      	str	r3, [r2, #0]

	  // if we're at the end of the array...
	  if (idx >= ARRAYNUM) {
 8001248:	4b1e      	ldr	r3, [pc, #120]	; (80012c4 <main+0xf8>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2b09      	cmp	r3, #9
 800124e:	dd02      	ble.n	8001256 <main+0x8a>
	  // ...wrap around to the beginning:
	  idx = 0;
 8001250:	4b1c      	ldr	r3, [pc, #112]	; (80012c4 <main+0xf8>)
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
	  }
	  // calculate the average:
	  average = (float)total / ARRAYNUM;
 8001256:	4b1a      	ldr	r3, [pc, #104]	; (80012c0 <main+0xf4>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	ee07 3a90 	vmov	s15, r3
 800125e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001262:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001266:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800126a:	4b19      	ldr	r3, [pc, #100]	; (80012d0 <main+0x104>)
 800126c:	edc3 7a00 	vstr	s15, [r3]
	  // send it to the computer as ASCII digits

	  if(count==5){
 8001270:	4b18      	ldr	r3, [pc, #96]	; (80012d4 <main+0x108>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2b05      	cmp	r3, #5
 8001276:	d116      	bne.n	80012a6 <main+0xda>

		  printf("%.2f cm\r\n",Distance);
 8001278:	4b14      	ldr	r3, [pc, #80]	; (80012cc <main+0x100>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff f973 	bl	8000568 <__aeabi_f2d>
 8001282:	4602      	mov	r2, r0
 8001284:	460b      	mov	r3, r1
 8001286:	4814      	ldr	r0, [pc, #80]	; (80012d8 <main+0x10c>)
 8001288:	f004 ff3c 	bl	8006104 <iprintf>
		  printf("Filter%.2f cm\r\n",average);
 800128c:	4b10      	ldr	r3, [pc, #64]	; (80012d0 <main+0x104>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff f969 	bl	8000568 <__aeabi_f2d>
 8001296:	4602      	mov	r2, r0
 8001298:	460b      	mov	r3, r1
 800129a:	4810      	ldr	r0, [pc, #64]	; (80012dc <main+0x110>)
 800129c:	f004 ff32 	bl	8006104 <iprintf>
		  count=0;
 80012a0:	4b0c      	ldr	r3, [pc, #48]	; (80012d4 <main+0x108>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
	  }
	  HAL_Delay(70);
 80012a6:	2046      	movs	r0, #70	; 0x46
 80012a8:	f000 fe22 	bl	8001ef0 <HAL_Delay>
	  count++;
 80012ac:	4b09      	ldr	r3, [pc, #36]	; (80012d4 <main+0x108>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	3301      	adds	r3, #1
 80012b2:	4a08      	ldr	r2, [pc, #32]	; (80012d4 <main+0x108>)
 80012b4:	6013      	str	r3, [r2, #0]
	  HCSR04_Read();
 80012b6:	e7a0      	b.n	80011fa <main+0x2e>
 80012b8:	20000424 	.word	0x20000424
 80012bc:	08009e28 	.word	0x08009e28
 80012c0:	200009fc 	.word	0x200009fc
 80012c4:	200009f8 	.word	0x200009f8
 80012c8:	200009d0 	.word	0x200009d0
 80012cc:	200009cc 	.word	0x200009cc
 80012d0:	20000a00 	.word	0x20000a00
 80012d4:	20000a04 	.word	0x20000a04
 80012d8:	08009e38 	.word	0x08009e38
 80012dc:	08009e44 	.word	0x08009e44

080012e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b094      	sub	sp, #80	; 0x50
 80012e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012e6:	f107 0320 	add.w	r3, r7, #32
 80012ea:	2230      	movs	r2, #48	; 0x30
 80012ec:	2100      	movs	r1, #0
 80012ee:	4618      	mov	r0, r3
 80012f0:	f004 f886 	bl	8005400 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012f4:	f107 030c 	add.w	r3, r7, #12
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	60da      	str	r2, [r3, #12]
 8001302:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001304:	2300      	movs	r3, #0
 8001306:	60bb      	str	r3, [r7, #8]
 8001308:	4b28      	ldr	r3, [pc, #160]	; (80013ac <SystemClock_Config+0xcc>)
 800130a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130c:	4a27      	ldr	r2, [pc, #156]	; (80013ac <SystemClock_Config+0xcc>)
 800130e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001312:	6413      	str	r3, [r2, #64]	; 0x40
 8001314:	4b25      	ldr	r3, [pc, #148]	; (80013ac <SystemClock_Config+0xcc>)
 8001316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001318:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800131c:	60bb      	str	r3, [r7, #8]
 800131e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001320:	2300      	movs	r3, #0
 8001322:	607b      	str	r3, [r7, #4]
 8001324:	4b22      	ldr	r3, [pc, #136]	; (80013b0 <SystemClock_Config+0xd0>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a21      	ldr	r2, [pc, #132]	; (80013b0 <SystemClock_Config+0xd0>)
 800132a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800132e:	6013      	str	r3, [r2, #0]
 8001330:	4b1f      	ldr	r3, [pc, #124]	; (80013b0 <SystemClock_Config+0xd0>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001338:	607b      	str	r3, [r7, #4]
 800133a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800133c:	2301      	movs	r3, #1
 800133e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001340:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001344:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001346:	2302      	movs	r3, #2
 8001348:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800134a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800134e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001350:	2304      	movs	r3, #4
 8001352:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001354:	23a8      	movs	r3, #168	; 0xa8
 8001356:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001358:	2302      	movs	r3, #2
 800135a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800135c:	2307      	movs	r3, #7
 800135e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001360:	f107 0320 	add.w	r3, r7, #32
 8001364:	4618      	mov	r0, r3
 8001366:	f001 fd03 	bl	8002d70 <HAL_RCC_OscConfig>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001370:	f000 fa4c 	bl	800180c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001374:	230f      	movs	r3, #15
 8001376:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001378:	2302      	movs	r3, #2
 800137a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800137c:	2300      	movs	r3, #0
 800137e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001380:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001384:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001386:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800138a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800138c:	f107 030c 	add.w	r3, r7, #12
 8001390:	2105      	movs	r1, #5
 8001392:	4618      	mov	r0, r3
 8001394:	f001 ff64 	bl	8003260 <HAL_RCC_ClockConfig>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800139e:	f000 fa35 	bl	800180c <Error_Handler>
  }
}
 80013a2:	bf00      	nop
 80013a4:	3750      	adds	r7, #80	; 0x50
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	40023800 	.word	0x40023800
 80013b0:	40007000 	.word	0x40007000

080013b4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80013b8:	4b1f      	ldr	r3, [pc, #124]	; (8001438 <MX_ETH_Init+0x84>)
 80013ba:	4a20      	ldr	r2, [pc, #128]	; (800143c <MX_ETH_Init+0x88>)
 80013bc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80013be:	4b20      	ldr	r3, [pc, #128]	; (8001440 <MX_ETH_Init+0x8c>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80013c4:	4b1e      	ldr	r3, [pc, #120]	; (8001440 <MX_ETH_Init+0x8c>)
 80013c6:	2280      	movs	r2, #128	; 0x80
 80013c8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80013ca:	4b1d      	ldr	r3, [pc, #116]	; (8001440 <MX_ETH_Init+0x8c>)
 80013cc:	22e1      	movs	r2, #225	; 0xe1
 80013ce:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80013d0:	4b1b      	ldr	r3, [pc, #108]	; (8001440 <MX_ETH_Init+0x8c>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80013d6:	4b1a      	ldr	r3, [pc, #104]	; (8001440 <MX_ETH_Init+0x8c>)
 80013d8:	2200      	movs	r2, #0
 80013da:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80013dc:	4b18      	ldr	r3, [pc, #96]	; (8001440 <MX_ETH_Init+0x8c>)
 80013de:	2200      	movs	r2, #0
 80013e0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80013e2:	4b15      	ldr	r3, [pc, #84]	; (8001438 <MX_ETH_Init+0x84>)
 80013e4:	4a16      	ldr	r2, [pc, #88]	; (8001440 <MX_ETH_Init+0x8c>)
 80013e6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80013e8:	4b13      	ldr	r3, [pc, #76]	; (8001438 <MX_ETH_Init+0x84>)
 80013ea:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80013ee:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80013f0:	4b11      	ldr	r3, [pc, #68]	; (8001438 <MX_ETH_Init+0x84>)
 80013f2:	4a14      	ldr	r2, [pc, #80]	; (8001444 <MX_ETH_Init+0x90>)
 80013f4:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80013f6:	4b10      	ldr	r3, [pc, #64]	; (8001438 <MX_ETH_Init+0x84>)
 80013f8:	4a13      	ldr	r2, [pc, #76]	; (8001448 <MX_ETH_Init+0x94>)
 80013fa:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80013fc:	4b0e      	ldr	r3, [pc, #56]	; (8001438 <MX_ETH_Init+0x84>)
 80013fe:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001402:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001404:	480c      	ldr	r0, [pc, #48]	; (8001438 <MX_ETH_Init+0x84>)
 8001406:	f000 fea9 	bl	800215c <HAL_ETH_Init>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001410:	f000 f9fc 	bl	800180c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001414:	2238      	movs	r2, #56	; 0x38
 8001416:	2100      	movs	r1, #0
 8001418:	480c      	ldr	r0, [pc, #48]	; (800144c <MX_ETH_Init+0x98>)
 800141a:	f003 fff1 	bl	8005400 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800141e:	4b0b      	ldr	r3, [pc, #44]	; (800144c <MX_ETH_Init+0x98>)
 8001420:	2221      	movs	r2, #33	; 0x21
 8001422:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001424:	4b09      	ldr	r3, [pc, #36]	; (800144c <MX_ETH_Init+0x98>)
 8001426:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800142a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800142c:	4b07      	ldr	r3, [pc, #28]	; (800144c <MX_ETH_Init+0x98>)
 800142e:	2200      	movs	r2, #0
 8001430:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001432:	bf00      	nop
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	20000374 	.word	0x20000374
 800143c:	40028000 	.word	0x40028000
 8001440:	20000a08 	.word	0x20000a08
 8001444:	200002d4 	.word	0x200002d4
 8001448:	20000234 	.word	0x20000234
 800144c:	200001fc 	.word	0x200001fc

08001450 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b08a      	sub	sp, #40	; 0x28
 8001454:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001456:	f107 0318 	add.w	r3, r7, #24
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	605a      	str	r2, [r3, #4]
 8001460:	609a      	str	r2, [r3, #8]
 8001462:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001464:	f107 0310 	add.w	r3, r7, #16
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800146e:	463b      	mov	r3, r7
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	609a      	str	r2, [r3, #8]
 8001478:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800147a:	4b2b      	ldr	r3, [pc, #172]	; (8001528 <MX_TIM3_Init+0xd8>)
 800147c:	4a2b      	ldr	r2, [pc, #172]	; (800152c <MX_TIM3_Init+0xdc>)
 800147e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8001480:	4b29      	ldr	r3, [pc, #164]	; (8001528 <MX_TIM3_Init+0xd8>)
 8001482:	2253      	movs	r2, #83	; 0x53
 8001484:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001486:	4b28      	ldr	r3, [pc, #160]	; (8001528 <MX_TIM3_Init+0xd8>)
 8001488:	2200      	movs	r2, #0
 800148a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800148c:	4b26      	ldr	r3, [pc, #152]	; (8001528 <MX_TIM3_Init+0xd8>)
 800148e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001492:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001494:	4b24      	ldr	r3, [pc, #144]	; (8001528 <MX_TIM3_Init+0xd8>)
 8001496:	2200      	movs	r2, #0
 8001498:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800149a:	4b23      	ldr	r3, [pc, #140]	; (8001528 <MX_TIM3_Init+0xd8>)
 800149c:	2280      	movs	r2, #128	; 0x80
 800149e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80014a0:	4821      	ldr	r0, [pc, #132]	; (8001528 <MX_TIM3_Init+0xd8>)
 80014a2:	f002 f8fd 	bl	80036a0 <HAL_TIM_Base_Init>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 80014ac:	f000 f9ae 	bl	800180c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014b4:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80014b6:	f107 0318 	add.w	r3, r7, #24
 80014ba:	4619      	mov	r1, r3
 80014bc:	481a      	ldr	r0, [pc, #104]	; (8001528 <MX_TIM3_Init+0xd8>)
 80014be:	f002 fc63 	bl	8003d88 <HAL_TIM_ConfigClockSource>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80014c8:	f000 f9a0 	bl	800180c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80014cc:	4816      	ldr	r0, [pc, #88]	; (8001528 <MX_TIM3_Init+0xd8>)
 80014ce:	f002 f936 	bl	800373e <HAL_TIM_IC_Init>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80014d8:	f000 f998 	bl	800180c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014dc:	2300      	movs	r3, #0
 80014de:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014e0:	2300      	movs	r3, #0
 80014e2:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014e4:	f107 0310 	add.w	r3, r7, #16
 80014e8:	4619      	mov	r1, r3
 80014ea:	480f      	ldr	r0, [pc, #60]	; (8001528 <MX_TIM3_Init+0xd8>)
 80014ec:	f003 f80a 	bl	8004504 <HAL_TIMEx_MasterConfigSynchronization>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 80014f6:	f000 f989 	bl	800180c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80014fa:	2300      	movs	r3, #0
 80014fc:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80014fe:	2301      	movs	r3, #1
 8001500:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001502:	2300      	movs	r3, #0
 8001504:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 4;
 8001506:	2304      	movs	r3, #4
 8001508:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800150a:	463b      	mov	r3, r7
 800150c:	2200      	movs	r2, #0
 800150e:	4619      	mov	r1, r3
 8001510:	4805      	ldr	r0, [pc, #20]	; (8001528 <MX_TIM3_Init+0xd8>)
 8001512:	f002 fb9d 	bl	8003c50 <HAL_TIM_IC_ConfigChannel>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 800151c:	f000 f976 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001520:	bf00      	nop
 8001522:	3728      	adds	r7, #40	; 0x28
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	20000424 	.word	0x20000424
 800152c:	40000400 	.word	0x40000400

08001530 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001534:	4b11      	ldr	r3, [pc, #68]	; (800157c <MX_USART3_UART_Init+0x4c>)
 8001536:	4a12      	ldr	r2, [pc, #72]	; (8001580 <MX_USART3_UART_Init+0x50>)
 8001538:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800153a:	4b10      	ldr	r3, [pc, #64]	; (800157c <MX_USART3_UART_Init+0x4c>)
 800153c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001540:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001542:	4b0e      	ldr	r3, [pc, #56]	; (800157c <MX_USART3_UART_Init+0x4c>)
 8001544:	2200      	movs	r2, #0
 8001546:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001548:	4b0c      	ldr	r3, [pc, #48]	; (800157c <MX_USART3_UART_Init+0x4c>)
 800154a:	2200      	movs	r2, #0
 800154c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800154e:	4b0b      	ldr	r3, [pc, #44]	; (800157c <MX_USART3_UART_Init+0x4c>)
 8001550:	2200      	movs	r2, #0
 8001552:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001554:	4b09      	ldr	r3, [pc, #36]	; (800157c <MX_USART3_UART_Init+0x4c>)
 8001556:	220c      	movs	r2, #12
 8001558:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800155a:	4b08      	ldr	r3, [pc, #32]	; (800157c <MX_USART3_UART_Init+0x4c>)
 800155c:	2200      	movs	r2, #0
 800155e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001560:	4b06      	ldr	r3, [pc, #24]	; (800157c <MX_USART3_UART_Init+0x4c>)
 8001562:	2200      	movs	r2, #0
 8001564:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001566:	4805      	ldr	r0, [pc, #20]	; (800157c <MX_USART3_UART_Init+0x4c>)
 8001568:	f003 f85c 	bl	8004624 <HAL_UART_Init>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001572:	f000 f94b 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	2000046c 	.word	0x2000046c
 8001580:	40004800 	.word	0x40004800

08001584 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001588:	4b14      	ldr	r3, [pc, #80]	; (80015dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800158a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800158e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001590:	4b12      	ldr	r3, [pc, #72]	; (80015dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001592:	2204      	movs	r2, #4
 8001594:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001596:	4b11      	ldr	r3, [pc, #68]	; (80015dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001598:	2202      	movs	r2, #2
 800159a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800159c:	4b0f      	ldr	r3, [pc, #60]	; (80015dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800159e:	2200      	movs	r2, #0
 80015a0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80015a2:	4b0e      	ldr	r3, [pc, #56]	; (80015dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015a4:	2202      	movs	r2, #2
 80015a6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80015a8:	4b0c      	ldr	r3, [pc, #48]	; (80015dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015aa:	2201      	movs	r2, #1
 80015ac:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80015ae:	4b0b      	ldr	r3, [pc, #44]	; (80015dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80015b4:	4b09      	ldr	r3, [pc, #36]	; (80015dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80015ba:	4b08      	ldr	r3, [pc, #32]	; (80015dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015bc:	2201      	movs	r2, #1
 80015be:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80015c0:	4b06      	ldr	r3, [pc, #24]	; (80015dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80015c6:	4805      	ldr	r0, [pc, #20]	; (80015dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015c8:	f001 fab5 	bl	8002b36 <HAL_PCD_Init>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80015d2:	f000 f91b 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	200004b0 	.word	0x200004b0

080015e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b08c      	sub	sp, #48	; 0x30
 80015e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e6:	f107 031c 	add.w	r3, r7, #28
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]
 80015ee:	605a      	str	r2, [r3, #4]
 80015f0:	609a      	str	r2, [r3, #8]
 80015f2:	60da      	str	r2, [r3, #12]
 80015f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	61bb      	str	r3, [r7, #24]
 80015fa:	4b67      	ldr	r3, [pc, #412]	; (8001798 <MX_GPIO_Init+0x1b8>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	4a66      	ldr	r2, [pc, #408]	; (8001798 <MX_GPIO_Init+0x1b8>)
 8001600:	f043 0304 	orr.w	r3, r3, #4
 8001604:	6313      	str	r3, [r2, #48]	; 0x30
 8001606:	4b64      	ldr	r3, [pc, #400]	; (8001798 <MX_GPIO_Init+0x1b8>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	f003 0304 	and.w	r3, r3, #4
 800160e:	61bb      	str	r3, [r7, #24]
 8001610:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	617b      	str	r3, [r7, #20]
 8001616:	4b60      	ldr	r3, [pc, #384]	; (8001798 <MX_GPIO_Init+0x1b8>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	4a5f      	ldr	r2, [pc, #380]	; (8001798 <MX_GPIO_Init+0x1b8>)
 800161c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001620:	6313      	str	r3, [r2, #48]	; 0x30
 8001622:	4b5d      	ldr	r3, [pc, #372]	; (8001798 <MX_GPIO_Init+0x1b8>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800162a:	617b      	str	r3, [r7, #20]
 800162c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	613b      	str	r3, [r7, #16]
 8001632:	4b59      	ldr	r3, [pc, #356]	; (8001798 <MX_GPIO_Init+0x1b8>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	4a58      	ldr	r2, [pc, #352]	; (8001798 <MX_GPIO_Init+0x1b8>)
 8001638:	f043 0301 	orr.w	r3, r3, #1
 800163c:	6313      	str	r3, [r2, #48]	; 0x30
 800163e:	4b56      	ldr	r3, [pc, #344]	; (8001798 <MX_GPIO_Init+0x1b8>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	613b      	str	r3, [r7, #16]
 8001648:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800164a:	2300      	movs	r3, #0
 800164c:	60fb      	str	r3, [r7, #12]
 800164e:	4b52      	ldr	r3, [pc, #328]	; (8001798 <MX_GPIO_Init+0x1b8>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	4a51      	ldr	r2, [pc, #324]	; (8001798 <MX_GPIO_Init+0x1b8>)
 8001654:	f043 0302 	orr.w	r3, r3, #2
 8001658:	6313      	str	r3, [r2, #48]	; 0x30
 800165a:	4b4f      	ldr	r3, [pc, #316]	; (8001798 <MX_GPIO_Init+0x1b8>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165e:	f003 0302 	and.w	r3, r3, #2
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001666:	2300      	movs	r3, #0
 8001668:	60bb      	str	r3, [r7, #8]
 800166a:	4b4b      	ldr	r3, [pc, #300]	; (8001798 <MX_GPIO_Init+0x1b8>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	4a4a      	ldr	r2, [pc, #296]	; (8001798 <MX_GPIO_Init+0x1b8>)
 8001670:	f043 0310 	orr.w	r3, r3, #16
 8001674:	6313      	str	r3, [r2, #48]	; 0x30
 8001676:	4b48      	ldr	r3, [pc, #288]	; (8001798 <MX_GPIO_Init+0x1b8>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	f003 0310 	and.w	r3, r3, #16
 800167e:	60bb      	str	r3, [r7, #8]
 8001680:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	607b      	str	r3, [r7, #4]
 8001686:	4b44      	ldr	r3, [pc, #272]	; (8001798 <MX_GPIO_Init+0x1b8>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	4a43      	ldr	r2, [pc, #268]	; (8001798 <MX_GPIO_Init+0x1b8>)
 800168c:	f043 0308 	orr.w	r3, r3, #8
 8001690:	6313      	str	r3, [r2, #48]	; 0x30
 8001692:	4b41      	ldr	r3, [pc, #260]	; (8001798 <MX_GPIO_Init+0x1b8>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	f003 0308 	and.w	r3, r3, #8
 800169a:	607b      	str	r3, [r7, #4]
 800169c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	603b      	str	r3, [r7, #0]
 80016a2:	4b3d      	ldr	r3, [pc, #244]	; (8001798 <MX_GPIO_Init+0x1b8>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	4a3c      	ldr	r2, [pc, #240]	; (8001798 <MX_GPIO_Init+0x1b8>)
 80016a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016ac:	6313      	str	r3, [r2, #48]	; 0x30
 80016ae:	4b3a      	ldr	r3, [pc, #232]	; (8001798 <MX_GPIO_Init+0x1b8>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016b6:	603b      	str	r3, [r7, #0]
 80016b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80016ba:	2200      	movs	r2, #0
 80016bc:	2120      	movs	r1, #32
 80016be:	4837      	ldr	r0, [pc, #220]	; (800179c <MX_GPIO_Init+0x1bc>)
 80016c0:	f001 fa20 	bl	8002b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80016c4:	2200      	movs	r2, #0
 80016c6:	f244 0181 	movw	r1, #16513	; 0x4081
 80016ca:	4835      	ldr	r0, [pc, #212]	; (80017a0 <MX_GPIO_Init+0x1c0>)
 80016cc:	f001 fa1a 	bl	8002b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 80016d0:	2200      	movs	r2, #0
 80016d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016d6:	4833      	ldr	r0, [pc, #204]	; (80017a4 <MX_GPIO_Init+0x1c4>)
 80016d8:	f001 fa14 	bl	8002b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80016dc:	2200      	movs	r2, #0
 80016de:	2140      	movs	r1, #64	; 0x40
 80016e0:	4831      	ldr	r0, [pc, #196]	; (80017a8 <MX_GPIO_Init+0x1c8>)
 80016e2:	f001 fa0f 	bl	8002b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80016e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016ec:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80016f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f2:	2300      	movs	r3, #0
 80016f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80016f6:	f107 031c 	add.w	r3, r7, #28
 80016fa:	4619      	mov	r1, r3
 80016fc:	482b      	ldr	r0, [pc, #172]	; (80017ac <MX_GPIO_Init+0x1cc>)
 80016fe:	f001 f855 	bl	80027ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001702:	2320      	movs	r3, #32
 8001704:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001706:	2301      	movs	r3, #1
 8001708:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170a:	2300      	movs	r3, #0
 800170c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170e:	2300      	movs	r3, #0
 8001710:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001712:	f107 031c 	add.w	r3, r7, #28
 8001716:	4619      	mov	r1, r3
 8001718:	4820      	ldr	r0, [pc, #128]	; (800179c <MX_GPIO_Init+0x1bc>)
 800171a:	f001 f847 	bl	80027ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800171e:	f244 0381 	movw	r3, #16513	; 0x4081
 8001722:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001724:	2301      	movs	r3, #1
 8001726:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001728:	2300      	movs	r3, #0
 800172a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172c:	2300      	movs	r3, #0
 800172e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001730:	f107 031c 	add.w	r3, r7, #28
 8001734:	4619      	mov	r1, r3
 8001736:	481a      	ldr	r0, [pc, #104]	; (80017a0 <MX_GPIO_Init+0x1c0>)
 8001738:	f001 f838 	bl	80027ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PE8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800173c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001740:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001742:	2301      	movs	r3, #1
 8001744:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001746:	2300      	movs	r3, #0
 8001748:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174a:	2300      	movs	r3, #0
 800174c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800174e:	f107 031c 	add.w	r3, r7, #28
 8001752:	4619      	mov	r1, r3
 8001754:	4813      	ldr	r0, [pc, #76]	; (80017a4 <MX_GPIO_Init+0x1c4>)
 8001756:	f001 f829 	bl	80027ac <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800175a:	2340      	movs	r3, #64	; 0x40
 800175c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800175e:	2301      	movs	r3, #1
 8001760:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001762:	2300      	movs	r3, #0
 8001764:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001766:	2300      	movs	r3, #0
 8001768:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800176a:	f107 031c 	add.w	r3, r7, #28
 800176e:	4619      	mov	r1, r3
 8001770:	480d      	ldr	r0, [pc, #52]	; (80017a8 <MX_GPIO_Init+0x1c8>)
 8001772:	f001 f81b 	bl	80027ac <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001776:	2380      	movs	r3, #128	; 0x80
 8001778:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800177a:	2300      	movs	r3, #0
 800177c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177e:	2300      	movs	r3, #0
 8001780:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001782:	f107 031c 	add.w	r3, r7, #28
 8001786:	4619      	mov	r1, r3
 8001788:	4807      	ldr	r0, [pc, #28]	; (80017a8 <MX_GPIO_Init+0x1c8>)
 800178a:	f001 f80f 	bl	80027ac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800178e:	bf00      	nop
 8001790:	3730      	adds	r7, #48	; 0x30
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	40023800 	.word	0x40023800
 800179c:	40020000 	.word	0x40020000
 80017a0:	40020400 	.word	0x40020400
 80017a4:	40021000 	.word	0x40021000
 80017a8:	40021800 	.word	0x40021800
 80017ac:	40020800 	.word	0x40020800

080017b0 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch)
{    //UART_HandleTypeDef huart1;
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 80017b8:	1d39      	adds	r1, r7, #4
 80017ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017be:	2201      	movs	r2, #1
 80017c0:	4803      	ldr	r0, [pc, #12]	; (80017d0 <__io_putchar+0x20>)
 80017c2:	f002 ff7c 	bl	80046be <HAL_UART_Transmit>
  return ch;
 80017c6:	687b      	ldr	r3, [r7, #4]
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3708      	adds	r7, #8
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	2000046c 	.word	0x2000046c

080017d4 <_write>:
int _write(int file, char *ptr, int len)
{      int DataIdx;
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b086      	sub	sp, #24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	60f8      	str	r0, [r7, #12]
 80017dc:	60b9      	str	r1, [r7, #8]
 80017de:	607a      	str	r2, [r7, #4]
    for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017e0:	2300      	movs	r3, #0
 80017e2:	617b      	str	r3, [r7, #20]
 80017e4:	e009      	b.n	80017fa <_write+0x26>
    {
      __io_putchar(*ptr++);  //
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	1c5a      	adds	r2, r3, #1
 80017ea:	60ba      	str	r2, [r7, #8]
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7ff ffde 	bl	80017b0 <__io_putchar>
    for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	3301      	adds	r3, #1
 80017f8:	617b      	str	r3, [r7, #20]
 80017fa:	697a      	ldr	r2, [r7, #20]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	429a      	cmp	r2, r3
 8001800:	dbf1      	blt.n	80017e6 <_write+0x12>
    }
    return len;
 8001802:	687b      	ldr	r3, [r7, #4]
}
 8001804:	4618      	mov	r0, r3
 8001806:	3718      	adds	r7, #24
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}

0800180c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001810:	b672      	cpsid	i
}
 8001812:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001814:	e7fe      	b.n	8001814 <Error_Handler+0x8>
	...

08001818 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800181e:	2300      	movs	r3, #0
 8001820:	607b      	str	r3, [r7, #4]
 8001822:	4b10      	ldr	r3, [pc, #64]	; (8001864 <HAL_MspInit+0x4c>)
 8001824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001826:	4a0f      	ldr	r2, [pc, #60]	; (8001864 <HAL_MspInit+0x4c>)
 8001828:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800182c:	6453      	str	r3, [r2, #68]	; 0x44
 800182e:	4b0d      	ldr	r3, [pc, #52]	; (8001864 <HAL_MspInit+0x4c>)
 8001830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001832:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001836:	607b      	str	r3, [r7, #4]
 8001838:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800183a:	2300      	movs	r3, #0
 800183c:	603b      	str	r3, [r7, #0]
 800183e:	4b09      	ldr	r3, [pc, #36]	; (8001864 <HAL_MspInit+0x4c>)
 8001840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001842:	4a08      	ldr	r2, [pc, #32]	; (8001864 <HAL_MspInit+0x4c>)
 8001844:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001848:	6413      	str	r3, [r2, #64]	; 0x40
 800184a:	4b06      	ldr	r3, [pc, #24]	; (8001864 <HAL_MspInit+0x4c>)
 800184c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001852:	603b      	str	r3, [r7, #0]
 8001854:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001856:	bf00      	nop
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	40023800 	.word	0x40023800

08001868 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b08e      	sub	sp, #56	; 0x38
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001870:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	605a      	str	r2, [r3, #4]
 800187a:	609a      	str	r2, [r3, #8]
 800187c:	60da      	str	r2, [r3, #12]
 800187e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a55      	ldr	r2, [pc, #340]	; (80019dc <HAL_ETH_MspInit+0x174>)
 8001886:	4293      	cmp	r3, r2
 8001888:	f040 80a4 	bne.w	80019d4 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 800188c:	2300      	movs	r3, #0
 800188e:	623b      	str	r3, [r7, #32]
 8001890:	4b53      	ldr	r3, [pc, #332]	; (80019e0 <HAL_ETH_MspInit+0x178>)
 8001892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001894:	4a52      	ldr	r2, [pc, #328]	; (80019e0 <HAL_ETH_MspInit+0x178>)
 8001896:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800189a:	6313      	str	r3, [r2, #48]	; 0x30
 800189c:	4b50      	ldr	r3, [pc, #320]	; (80019e0 <HAL_ETH_MspInit+0x178>)
 800189e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018a4:	623b      	str	r3, [r7, #32]
 80018a6:	6a3b      	ldr	r3, [r7, #32]
 80018a8:	2300      	movs	r3, #0
 80018aa:	61fb      	str	r3, [r7, #28]
 80018ac:	4b4c      	ldr	r3, [pc, #304]	; (80019e0 <HAL_ETH_MspInit+0x178>)
 80018ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b0:	4a4b      	ldr	r2, [pc, #300]	; (80019e0 <HAL_ETH_MspInit+0x178>)
 80018b2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80018b6:	6313      	str	r3, [r2, #48]	; 0x30
 80018b8:	4b49      	ldr	r3, [pc, #292]	; (80019e0 <HAL_ETH_MspInit+0x178>)
 80018ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80018c0:	61fb      	str	r3, [r7, #28]
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	2300      	movs	r3, #0
 80018c6:	61bb      	str	r3, [r7, #24]
 80018c8:	4b45      	ldr	r3, [pc, #276]	; (80019e0 <HAL_ETH_MspInit+0x178>)
 80018ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018cc:	4a44      	ldr	r2, [pc, #272]	; (80019e0 <HAL_ETH_MspInit+0x178>)
 80018ce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80018d2:	6313      	str	r3, [r2, #48]	; 0x30
 80018d4:	4b42      	ldr	r3, [pc, #264]	; (80019e0 <HAL_ETH_MspInit+0x178>)
 80018d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80018dc:	61bb      	str	r3, [r7, #24]
 80018de:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018e0:	2300      	movs	r3, #0
 80018e2:	617b      	str	r3, [r7, #20]
 80018e4:	4b3e      	ldr	r3, [pc, #248]	; (80019e0 <HAL_ETH_MspInit+0x178>)
 80018e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e8:	4a3d      	ldr	r2, [pc, #244]	; (80019e0 <HAL_ETH_MspInit+0x178>)
 80018ea:	f043 0304 	orr.w	r3, r3, #4
 80018ee:	6313      	str	r3, [r2, #48]	; 0x30
 80018f0:	4b3b      	ldr	r3, [pc, #236]	; (80019e0 <HAL_ETH_MspInit+0x178>)
 80018f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f4:	f003 0304 	and.w	r3, r3, #4
 80018f8:	617b      	str	r3, [r7, #20]
 80018fa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018fc:	2300      	movs	r3, #0
 80018fe:	613b      	str	r3, [r7, #16]
 8001900:	4b37      	ldr	r3, [pc, #220]	; (80019e0 <HAL_ETH_MspInit+0x178>)
 8001902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001904:	4a36      	ldr	r2, [pc, #216]	; (80019e0 <HAL_ETH_MspInit+0x178>)
 8001906:	f043 0301 	orr.w	r3, r3, #1
 800190a:	6313      	str	r3, [r2, #48]	; 0x30
 800190c:	4b34      	ldr	r3, [pc, #208]	; (80019e0 <HAL_ETH_MspInit+0x178>)
 800190e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001910:	f003 0301 	and.w	r3, r3, #1
 8001914:	613b      	str	r3, [r7, #16]
 8001916:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001918:	2300      	movs	r3, #0
 800191a:	60fb      	str	r3, [r7, #12]
 800191c:	4b30      	ldr	r3, [pc, #192]	; (80019e0 <HAL_ETH_MspInit+0x178>)
 800191e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001920:	4a2f      	ldr	r2, [pc, #188]	; (80019e0 <HAL_ETH_MspInit+0x178>)
 8001922:	f043 0302 	orr.w	r3, r3, #2
 8001926:	6313      	str	r3, [r2, #48]	; 0x30
 8001928:	4b2d      	ldr	r3, [pc, #180]	; (80019e0 <HAL_ETH_MspInit+0x178>)
 800192a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192c:	f003 0302 	and.w	r3, r3, #2
 8001930:	60fb      	str	r3, [r7, #12]
 8001932:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001934:	2300      	movs	r3, #0
 8001936:	60bb      	str	r3, [r7, #8]
 8001938:	4b29      	ldr	r3, [pc, #164]	; (80019e0 <HAL_ETH_MspInit+0x178>)
 800193a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193c:	4a28      	ldr	r2, [pc, #160]	; (80019e0 <HAL_ETH_MspInit+0x178>)
 800193e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001942:	6313      	str	r3, [r2, #48]	; 0x30
 8001944:	4b26      	ldr	r3, [pc, #152]	; (80019e0 <HAL_ETH_MspInit+0x178>)
 8001946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800194c:	60bb      	str	r3, [r7, #8]
 800194e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001950:	2332      	movs	r3, #50	; 0x32
 8001952:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001954:	2302      	movs	r3, #2
 8001956:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001958:	2300      	movs	r3, #0
 800195a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800195c:	2303      	movs	r3, #3
 800195e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001960:	230b      	movs	r3, #11
 8001962:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001964:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001968:	4619      	mov	r1, r3
 800196a:	481e      	ldr	r0, [pc, #120]	; (80019e4 <HAL_ETH_MspInit+0x17c>)
 800196c:	f000 ff1e 	bl	80027ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001970:	2386      	movs	r3, #134	; 0x86
 8001972:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001974:	2302      	movs	r3, #2
 8001976:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001978:	2300      	movs	r3, #0
 800197a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800197c:	2303      	movs	r3, #3
 800197e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001980:	230b      	movs	r3, #11
 8001982:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001984:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001988:	4619      	mov	r1, r3
 800198a:	4817      	ldr	r0, [pc, #92]	; (80019e8 <HAL_ETH_MspInit+0x180>)
 800198c:	f000 ff0e 	bl	80027ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001990:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001994:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001996:	2302      	movs	r3, #2
 8001998:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199a:	2300      	movs	r3, #0
 800199c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800199e:	2303      	movs	r3, #3
 80019a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80019a2:	230b      	movs	r3, #11
 80019a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80019a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019aa:	4619      	mov	r1, r3
 80019ac:	480f      	ldr	r0, [pc, #60]	; (80019ec <HAL_ETH_MspInit+0x184>)
 80019ae:	f000 fefd 	bl	80027ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80019b2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80019b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b8:	2302      	movs	r3, #2
 80019ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019bc:	2300      	movs	r3, #0
 80019be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019c0:	2303      	movs	r3, #3
 80019c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80019c4:	230b      	movs	r3, #11
 80019c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019cc:	4619      	mov	r1, r3
 80019ce:	4808      	ldr	r0, [pc, #32]	; (80019f0 <HAL_ETH_MspInit+0x188>)
 80019d0:	f000 feec 	bl	80027ac <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80019d4:	bf00      	nop
 80019d6:	3738      	adds	r7, #56	; 0x38
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	40028000 	.word	0x40028000
 80019e0:	40023800 	.word	0x40023800
 80019e4:	40020800 	.word	0x40020800
 80019e8:	40020000 	.word	0x40020000
 80019ec:	40020400 	.word	0x40020400
 80019f0:	40021800 	.word	0x40021800

080019f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b08a      	sub	sp, #40	; 0x28
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019fc:	f107 0314 	add.w	r3, r7, #20
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	605a      	str	r2, [r3, #4]
 8001a06:	609a      	str	r2, [r3, #8]
 8001a08:	60da      	str	r2, [r3, #12]
 8001a0a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a1d      	ldr	r2, [pc, #116]	; (8001a88 <HAL_TIM_Base_MspInit+0x94>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d133      	bne.n	8001a7e <HAL_TIM_Base_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a16:	2300      	movs	r3, #0
 8001a18:	613b      	str	r3, [r7, #16]
 8001a1a:	4b1c      	ldr	r3, [pc, #112]	; (8001a8c <HAL_TIM_Base_MspInit+0x98>)
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1e:	4a1b      	ldr	r2, [pc, #108]	; (8001a8c <HAL_TIM_Base_MspInit+0x98>)
 8001a20:	f043 0302 	orr.w	r3, r3, #2
 8001a24:	6413      	str	r3, [r2, #64]	; 0x40
 8001a26:	4b19      	ldr	r3, [pc, #100]	; (8001a8c <HAL_TIM_Base_MspInit+0x98>)
 8001a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	613b      	str	r3, [r7, #16]
 8001a30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a32:	2300      	movs	r3, #0
 8001a34:	60fb      	str	r3, [r7, #12]
 8001a36:	4b15      	ldr	r3, [pc, #84]	; (8001a8c <HAL_TIM_Base_MspInit+0x98>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3a:	4a14      	ldr	r2, [pc, #80]	; (8001a8c <HAL_TIM_Base_MspInit+0x98>)
 8001a3c:	f043 0301 	orr.w	r3, r3, #1
 8001a40:	6313      	str	r3, [r2, #48]	; 0x30
 8001a42:	4b12      	ldr	r3, [pc, #72]	; (8001a8c <HAL_TIM_Base_MspInit+0x98>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	60fb      	str	r3, [r7, #12]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a4e:	2340      	movs	r3, #64	; 0x40
 8001a50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a52:	2302      	movs	r3, #2
 8001a54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a56:	2300      	movs	r3, #0
 8001a58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a5e:	2302      	movs	r3, #2
 8001a60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a62:	f107 0314 	add.w	r3, r7, #20
 8001a66:	4619      	mov	r1, r3
 8001a68:	4809      	ldr	r0, [pc, #36]	; (8001a90 <HAL_TIM_Base_MspInit+0x9c>)
 8001a6a:	f000 fe9f 	bl	80027ac <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001a6e:	2200      	movs	r2, #0
 8001a70:	2100      	movs	r1, #0
 8001a72:	201d      	movs	r0, #29
 8001a74:	f000 fb3b 	bl	80020ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001a78:	201d      	movs	r0, #29
 8001a7a:	f000 fb54 	bl	8002126 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001a7e:	bf00      	nop
 8001a80:	3728      	adds	r7, #40	; 0x28
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	40000400 	.word	0x40000400
 8001a8c:	40023800 	.word	0x40023800
 8001a90:	40020000 	.word	0x40020000

08001a94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b08a      	sub	sp, #40	; 0x28
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a9c:	f107 0314 	add.w	r3, r7, #20
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	605a      	str	r2, [r3, #4]
 8001aa6:	609a      	str	r2, [r3, #8]
 8001aa8:	60da      	str	r2, [r3, #12]
 8001aaa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a19      	ldr	r2, [pc, #100]	; (8001b18 <HAL_UART_MspInit+0x84>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d12c      	bne.n	8001b10 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	613b      	str	r3, [r7, #16]
 8001aba:	4b18      	ldr	r3, [pc, #96]	; (8001b1c <HAL_UART_MspInit+0x88>)
 8001abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001abe:	4a17      	ldr	r2, [pc, #92]	; (8001b1c <HAL_UART_MspInit+0x88>)
 8001ac0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ac4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ac6:	4b15      	ldr	r3, [pc, #84]	; (8001b1c <HAL_UART_MspInit+0x88>)
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ace:	613b      	str	r3, [r7, #16]
 8001ad0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	60fb      	str	r3, [r7, #12]
 8001ad6:	4b11      	ldr	r3, [pc, #68]	; (8001b1c <HAL_UART_MspInit+0x88>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	4a10      	ldr	r2, [pc, #64]	; (8001b1c <HAL_UART_MspInit+0x88>)
 8001adc:	f043 0308 	orr.w	r3, r3, #8
 8001ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae2:	4b0e      	ldr	r3, [pc, #56]	; (8001b1c <HAL_UART_MspInit+0x88>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	f003 0308 	and.w	r3, r3, #8
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001aee:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001af2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af4:	2302      	movs	r3, #2
 8001af6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af8:	2300      	movs	r3, #0
 8001afa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001afc:	2303      	movs	r3, #3
 8001afe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b00:	2307      	movs	r3, #7
 8001b02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b04:	f107 0314 	add.w	r3, r7, #20
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4805      	ldr	r0, [pc, #20]	; (8001b20 <HAL_UART_MspInit+0x8c>)
 8001b0c:	f000 fe4e 	bl	80027ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001b10:	bf00      	nop
 8001b12:	3728      	adds	r7, #40	; 0x28
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	40004800 	.word	0x40004800
 8001b1c:	40023800 	.word	0x40023800
 8001b20:	40020c00 	.word	0x40020c00

08001b24 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b08a      	sub	sp, #40	; 0x28
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b2c:	f107 0314 	add.w	r3, r7, #20
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	605a      	str	r2, [r3, #4]
 8001b36:	609a      	str	r2, [r3, #8]
 8001b38:	60da      	str	r2, [r3, #12]
 8001b3a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b44:	d13f      	bne.n	8001bc6 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	613b      	str	r3, [r7, #16]
 8001b4a:	4b21      	ldr	r3, [pc, #132]	; (8001bd0 <HAL_PCD_MspInit+0xac>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4e:	4a20      	ldr	r2, [pc, #128]	; (8001bd0 <HAL_PCD_MspInit+0xac>)
 8001b50:	f043 0301 	orr.w	r3, r3, #1
 8001b54:	6313      	str	r3, [r2, #48]	; 0x30
 8001b56:	4b1e      	ldr	r3, [pc, #120]	; (8001bd0 <HAL_PCD_MspInit+0xac>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5a:	f003 0301 	and.w	r3, r3, #1
 8001b5e:	613b      	str	r3, [r7, #16]
 8001b60:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001b62:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001b66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b68:	2302      	movs	r3, #2
 8001b6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b70:	2303      	movs	r3, #3
 8001b72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001b74:	230a      	movs	r3, #10
 8001b76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b78:	f107 0314 	add.w	r3, r7, #20
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4815      	ldr	r0, [pc, #84]	; (8001bd4 <HAL_PCD_MspInit+0xb0>)
 8001b80:	f000 fe14 	bl	80027ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001b84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001b92:	f107 0314 	add.w	r3, r7, #20
 8001b96:	4619      	mov	r1, r3
 8001b98:	480e      	ldr	r0, [pc, #56]	; (8001bd4 <HAL_PCD_MspInit+0xb0>)
 8001b9a:	f000 fe07 	bl	80027ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001b9e:	4b0c      	ldr	r3, [pc, #48]	; (8001bd0 <HAL_PCD_MspInit+0xac>)
 8001ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ba2:	4a0b      	ldr	r2, [pc, #44]	; (8001bd0 <HAL_PCD_MspInit+0xac>)
 8001ba4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ba8:	6353      	str	r3, [r2, #52]	; 0x34
 8001baa:	2300      	movs	r3, #0
 8001bac:	60fb      	str	r3, [r7, #12]
 8001bae:	4b08      	ldr	r3, [pc, #32]	; (8001bd0 <HAL_PCD_MspInit+0xac>)
 8001bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb2:	4a07      	ldr	r2, [pc, #28]	; (8001bd0 <HAL_PCD_MspInit+0xac>)
 8001bb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bb8:	6453      	str	r3, [r2, #68]	; 0x44
 8001bba:	4b05      	ldr	r3, [pc, #20]	; (8001bd0 <HAL_PCD_MspInit+0xac>)
 8001bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bc2:	60fb      	str	r3, [r7, #12]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001bc6:	bf00      	nop
 8001bc8:	3728      	adds	r7, #40	; 0x28
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	40023800 	.word	0x40023800
 8001bd4:	40020000 	.word	0x40020000

08001bd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bdc:	e7fe      	b.n	8001bdc <NMI_Handler+0x4>

08001bde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bde:	b480      	push	{r7}
 8001be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001be2:	e7fe      	b.n	8001be2 <HardFault_Handler+0x4>

08001be4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001be8:	e7fe      	b.n	8001be8 <MemManage_Handler+0x4>

08001bea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bea:	b480      	push	{r7}
 8001bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bee:	e7fe      	b.n	8001bee <BusFault_Handler+0x4>

08001bf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bf4:	e7fe      	b.n	8001bf4 <UsageFault_Handler+0x4>

08001bf6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bfa:	bf00      	nop
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c08:	bf00      	nop
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr

08001c12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c12:	b480      	push	{r7}
 8001c14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c16:	bf00      	nop
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c24:	f000 f944 	bl	8001eb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c28:	bf00      	nop
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001c30:	4802      	ldr	r0, [pc, #8]	; (8001c3c <TIM3_IRQHandler+0x10>)
 8001c32:	f001 ff05 	bl	8003a40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	20000424 	.word	0x20000424

08001c40 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  return 1;
 8001c44:	2301      	movs	r3, #1
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <_kill>:

int _kill(int pid, int sig)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c5a:	f003 fba7 	bl	80053ac <__errno>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2216      	movs	r2, #22
 8001c62:	601a      	str	r2, [r3, #0]
  return -1;
 8001c64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3708      	adds	r7, #8
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <_exit>:

void _exit (int status)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c78:	f04f 31ff 	mov.w	r1, #4294967295
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f7ff ffe7 	bl	8001c50 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c82:	e7fe      	b.n	8001c82 <_exit+0x12>

08001c84 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b086      	sub	sp, #24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	60b9      	str	r1, [r7, #8]
 8001c8e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c90:	2300      	movs	r3, #0
 8001c92:	617b      	str	r3, [r7, #20]
 8001c94:	e00a      	b.n	8001cac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c96:	f3af 8000 	nop.w
 8001c9a:	4601      	mov	r1, r0
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	1c5a      	adds	r2, r3, #1
 8001ca0:	60ba      	str	r2, [r7, #8]
 8001ca2:	b2ca      	uxtb	r2, r1
 8001ca4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	3301      	adds	r3, #1
 8001caa:	617b      	str	r3, [r7, #20]
 8001cac:	697a      	ldr	r2, [r7, #20]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	dbf0      	blt.n	8001c96 <_read+0x12>
  }

  return len;
 8001cb4:	687b      	ldr	r3, [r7, #4]
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3718      	adds	r7, #24
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <_close>:
  }
  return len;
}

int _close(int file)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	b083      	sub	sp, #12
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001cc6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr

08001cd6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	b083      	sub	sp, #12
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
 8001cde:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ce6:	605a      	str	r2, [r3, #4]
  return 0;
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr

08001cf6 <_isatty>:

int _isatty(int file)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	b083      	sub	sp, #12
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001cfe:	2301      	movs	r3, #1
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b085      	sub	sp, #20
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3714      	adds	r7, #20
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
	...

08001d28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b086      	sub	sp, #24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d30:	4a14      	ldr	r2, [pc, #80]	; (8001d84 <_sbrk+0x5c>)
 8001d32:	4b15      	ldr	r3, [pc, #84]	; (8001d88 <_sbrk+0x60>)
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d3c:	4b13      	ldr	r3, [pc, #76]	; (8001d8c <_sbrk+0x64>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d102      	bne.n	8001d4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d44:	4b11      	ldr	r3, [pc, #68]	; (8001d8c <_sbrk+0x64>)
 8001d46:	4a12      	ldr	r2, [pc, #72]	; (8001d90 <_sbrk+0x68>)
 8001d48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d4a:	4b10      	ldr	r3, [pc, #64]	; (8001d8c <_sbrk+0x64>)
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4413      	add	r3, r2
 8001d52:	693a      	ldr	r2, [r7, #16]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d207      	bcs.n	8001d68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d58:	f003 fb28 	bl	80053ac <__errno>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	220c      	movs	r2, #12
 8001d60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d62:	f04f 33ff 	mov.w	r3, #4294967295
 8001d66:	e009      	b.n	8001d7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d68:	4b08      	ldr	r3, [pc, #32]	; (8001d8c <_sbrk+0x64>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d6e:	4b07      	ldr	r3, [pc, #28]	; (8001d8c <_sbrk+0x64>)
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4413      	add	r3, r2
 8001d76:	4a05      	ldr	r2, [pc, #20]	; (8001d8c <_sbrk+0x64>)
 8001d78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3718      	adds	r7, #24
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	20030000 	.word	0x20030000
 8001d88:	00000400 	.word	0x00000400
 8001d8c:	20000a10 	.word	0x20000a10
 8001d90:	20000a28 	.word	0x20000a28

08001d94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d98:	4b06      	ldr	r3, [pc, #24]	; (8001db4 <SystemInit+0x20>)
 8001d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d9e:	4a05      	ldr	r2, [pc, #20]	; (8001db4 <SystemInit+0x20>)
 8001da0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001da4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001da8:	bf00      	nop
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	e000ed00 	.word	0xe000ed00

08001db8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001db8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001df0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001dbc:	480d      	ldr	r0, [pc, #52]	; (8001df4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001dbe:	490e      	ldr	r1, [pc, #56]	; (8001df8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001dc0:	4a0e      	ldr	r2, [pc, #56]	; (8001dfc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001dc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dc4:	e002      	b.n	8001dcc <LoopCopyDataInit>

08001dc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dca:	3304      	adds	r3, #4

08001dcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dd0:	d3f9      	bcc.n	8001dc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dd2:	4a0b      	ldr	r2, [pc, #44]	; (8001e00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001dd4:	4c0b      	ldr	r4, [pc, #44]	; (8001e04 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001dd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dd8:	e001      	b.n	8001dde <LoopFillZerobss>

08001dda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ddc:	3204      	adds	r2, #4

08001dde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001de0:	d3fb      	bcc.n	8001dda <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001de2:	f7ff ffd7 	bl	8001d94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001de6:	f003 fae7 	bl	80053b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dea:	f7ff f9ef 	bl	80011cc <main>
  bx  lr    
 8001dee:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001df0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001df4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001df8:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001dfc:	0800a32c 	.word	0x0800a32c
  ldr r2, =_sbss
 8001e00:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001e04:	20000a28 	.word	0x20000a28

08001e08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e08:	e7fe      	b.n	8001e08 <ADC_IRQHandler>
	...

08001e0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e10:	4b0e      	ldr	r3, [pc, #56]	; (8001e4c <HAL_Init+0x40>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a0d      	ldr	r2, [pc, #52]	; (8001e4c <HAL_Init+0x40>)
 8001e16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e1c:	4b0b      	ldr	r3, [pc, #44]	; (8001e4c <HAL_Init+0x40>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a0a      	ldr	r2, [pc, #40]	; (8001e4c <HAL_Init+0x40>)
 8001e22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e28:	4b08      	ldr	r3, [pc, #32]	; (8001e4c <HAL_Init+0x40>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a07      	ldr	r2, [pc, #28]	; (8001e4c <HAL_Init+0x40>)
 8001e2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e34:	2003      	movs	r0, #3
 8001e36:	f000 f94f 	bl	80020d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e3a:	2000      	movs	r0, #0
 8001e3c:	f000 f808 	bl	8001e50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e40:	f7ff fcea 	bl	8001818 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	40023c00 	.word	0x40023c00

08001e50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e58:	4b12      	ldr	r3, [pc, #72]	; (8001ea4 <HAL_InitTick+0x54>)
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	4b12      	ldr	r3, [pc, #72]	; (8001ea8 <HAL_InitTick+0x58>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	4619      	mov	r1, r3
 8001e62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e66:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f000 f967 	bl	8002142 <HAL_SYSTICK_Config>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e00e      	b.n	8001e9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2b0f      	cmp	r3, #15
 8001e82:	d80a      	bhi.n	8001e9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e84:	2200      	movs	r2, #0
 8001e86:	6879      	ldr	r1, [r7, #4]
 8001e88:	f04f 30ff 	mov.w	r0, #4294967295
 8001e8c:	f000 f92f 	bl	80020ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e90:	4a06      	ldr	r2, [pc, #24]	; (8001eac <HAL_InitTick+0x5c>)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e96:	2300      	movs	r3, #0
 8001e98:	e000      	b.n	8001e9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3708      	adds	r7, #8
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	20000000 	.word	0x20000000
 8001ea8:	20000008 	.word	0x20000008
 8001eac:	20000004 	.word	0x20000004

08001eb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001eb4:	4b06      	ldr	r3, [pc, #24]	; (8001ed0 <HAL_IncTick+0x20>)
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	461a      	mov	r2, r3
 8001eba:	4b06      	ldr	r3, [pc, #24]	; (8001ed4 <HAL_IncTick+0x24>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	4a04      	ldr	r2, [pc, #16]	; (8001ed4 <HAL_IncTick+0x24>)
 8001ec2:	6013      	str	r3, [r2, #0]
}
 8001ec4:	bf00      	nop
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	20000008 	.word	0x20000008
 8001ed4:	20000a14 	.word	0x20000a14

08001ed8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  return uwTick;
 8001edc:	4b03      	ldr	r3, [pc, #12]	; (8001eec <HAL_GetTick+0x14>)
 8001ede:	681b      	ldr	r3, [r3, #0]
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	20000a14 	.word	0x20000a14

08001ef0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ef8:	f7ff ffee 	bl	8001ed8 <HAL_GetTick>
 8001efc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f08:	d005      	beq.n	8001f16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f0a:	4b0a      	ldr	r3, [pc, #40]	; (8001f34 <HAL_Delay+0x44>)
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	461a      	mov	r2, r3
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	4413      	add	r3, r2
 8001f14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f16:	bf00      	nop
 8001f18:	f7ff ffde 	bl	8001ed8 <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	68fa      	ldr	r2, [r7, #12]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d8f7      	bhi.n	8001f18 <HAL_Delay+0x28>
  {
  }
}
 8001f28:	bf00      	nop
 8001f2a:	bf00      	nop
 8001f2c:	3710      	adds	r7, #16
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	20000008 	.word	0x20000008

08001f38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b085      	sub	sp, #20
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f003 0307 	and.w	r3, r3, #7
 8001f46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f48:	4b0c      	ldr	r3, [pc, #48]	; (8001f7c <__NVIC_SetPriorityGrouping+0x44>)
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f4e:	68ba      	ldr	r2, [r7, #8]
 8001f50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f54:	4013      	ands	r3, r2
 8001f56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f6a:	4a04      	ldr	r2, [pc, #16]	; (8001f7c <__NVIC_SetPriorityGrouping+0x44>)
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	60d3      	str	r3, [r2, #12]
}
 8001f70:	bf00      	nop
 8001f72:	3714      	adds	r7, #20
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr
 8001f7c:	e000ed00 	.word	0xe000ed00

08001f80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f84:	4b04      	ldr	r3, [pc, #16]	; (8001f98 <__NVIC_GetPriorityGrouping+0x18>)
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	0a1b      	lsrs	r3, r3, #8
 8001f8a:	f003 0307 	and.w	r3, r3, #7
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr
 8001f98:	e000ed00 	.word	0xe000ed00

08001f9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	db0b      	blt.n	8001fc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fae:	79fb      	ldrb	r3, [r7, #7]
 8001fb0:	f003 021f 	and.w	r2, r3, #31
 8001fb4:	4907      	ldr	r1, [pc, #28]	; (8001fd4 <__NVIC_EnableIRQ+0x38>)
 8001fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fba:	095b      	lsrs	r3, r3, #5
 8001fbc:	2001      	movs	r0, #1
 8001fbe:	fa00 f202 	lsl.w	r2, r0, r2
 8001fc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fc6:	bf00      	nop
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	e000e100 	.word	0xe000e100

08001fd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	4603      	mov	r3, r0
 8001fe0:	6039      	str	r1, [r7, #0]
 8001fe2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fe4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	db0a      	blt.n	8002002 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	b2da      	uxtb	r2, r3
 8001ff0:	490c      	ldr	r1, [pc, #48]	; (8002024 <__NVIC_SetPriority+0x4c>)
 8001ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff6:	0112      	lsls	r2, r2, #4
 8001ff8:	b2d2      	uxtb	r2, r2
 8001ffa:	440b      	add	r3, r1
 8001ffc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002000:	e00a      	b.n	8002018 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	b2da      	uxtb	r2, r3
 8002006:	4908      	ldr	r1, [pc, #32]	; (8002028 <__NVIC_SetPriority+0x50>)
 8002008:	79fb      	ldrb	r3, [r7, #7]
 800200a:	f003 030f 	and.w	r3, r3, #15
 800200e:	3b04      	subs	r3, #4
 8002010:	0112      	lsls	r2, r2, #4
 8002012:	b2d2      	uxtb	r2, r2
 8002014:	440b      	add	r3, r1
 8002016:	761a      	strb	r2, [r3, #24]
}
 8002018:	bf00      	nop
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr
 8002024:	e000e100 	.word	0xe000e100
 8002028:	e000ed00 	.word	0xe000ed00

0800202c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800202c:	b480      	push	{r7}
 800202e:	b089      	sub	sp, #36	; 0x24
 8002030:	af00      	add	r7, sp, #0
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f003 0307 	and.w	r3, r3, #7
 800203e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	f1c3 0307 	rsb	r3, r3, #7
 8002046:	2b04      	cmp	r3, #4
 8002048:	bf28      	it	cs
 800204a:	2304      	movcs	r3, #4
 800204c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	3304      	adds	r3, #4
 8002052:	2b06      	cmp	r3, #6
 8002054:	d902      	bls.n	800205c <NVIC_EncodePriority+0x30>
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	3b03      	subs	r3, #3
 800205a:	e000      	b.n	800205e <NVIC_EncodePriority+0x32>
 800205c:	2300      	movs	r3, #0
 800205e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002060:	f04f 32ff 	mov.w	r2, #4294967295
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	fa02 f303 	lsl.w	r3, r2, r3
 800206a:	43da      	mvns	r2, r3
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	401a      	ands	r2, r3
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002074:	f04f 31ff 	mov.w	r1, #4294967295
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	fa01 f303 	lsl.w	r3, r1, r3
 800207e:	43d9      	mvns	r1, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002084:	4313      	orrs	r3, r2
         );
}
 8002086:	4618      	mov	r0, r3
 8002088:	3724      	adds	r7, #36	; 0x24
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
	...

08002094 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	3b01      	subs	r3, #1
 80020a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020a4:	d301      	bcc.n	80020aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020a6:	2301      	movs	r3, #1
 80020a8:	e00f      	b.n	80020ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020aa:	4a0a      	ldr	r2, [pc, #40]	; (80020d4 <SysTick_Config+0x40>)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	3b01      	subs	r3, #1
 80020b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020b2:	210f      	movs	r1, #15
 80020b4:	f04f 30ff 	mov.w	r0, #4294967295
 80020b8:	f7ff ff8e 	bl	8001fd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020bc:	4b05      	ldr	r3, [pc, #20]	; (80020d4 <SysTick_Config+0x40>)
 80020be:	2200      	movs	r2, #0
 80020c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020c2:	4b04      	ldr	r3, [pc, #16]	; (80020d4 <SysTick_Config+0x40>)
 80020c4:	2207      	movs	r2, #7
 80020c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3708      	adds	r7, #8
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	e000e010 	.word	0xe000e010

080020d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f7ff ff29 	bl	8001f38 <__NVIC_SetPriorityGrouping>
}
 80020e6:	bf00      	nop
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}

080020ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b086      	sub	sp, #24
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	4603      	mov	r3, r0
 80020f6:	60b9      	str	r1, [r7, #8]
 80020f8:	607a      	str	r2, [r7, #4]
 80020fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020fc:	2300      	movs	r3, #0
 80020fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002100:	f7ff ff3e 	bl	8001f80 <__NVIC_GetPriorityGrouping>
 8002104:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	68b9      	ldr	r1, [r7, #8]
 800210a:	6978      	ldr	r0, [r7, #20]
 800210c:	f7ff ff8e 	bl	800202c <NVIC_EncodePriority>
 8002110:	4602      	mov	r2, r0
 8002112:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002116:	4611      	mov	r1, r2
 8002118:	4618      	mov	r0, r3
 800211a:	f7ff ff5d 	bl	8001fd8 <__NVIC_SetPriority>
}
 800211e:	bf00      	nop
 8002120:	3718      	adds	r7, #24
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002126:	b580      	push	{r7, lr}
 8002128:	b082      	sub	sp, #8
 800212a:	af00      	add	r7, sp, #0
 800212c:	4603      	mov	r3, r0
 800212e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002130:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002134:	4618      	mov	r0, r3
 8002136:	f7ff ff31 	bl	8001f9c <__NVIC_EnableIRQ>
}
 800213a:	bf00      	nop
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}

08002142 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002142:	b580      	push	{r7, lr}
 8002144:	b082      	sub	sp, #8
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f7ff ffa2 	bl	8002094 <SysTick_Config>
 8002150:	4603      	mov	r3, r0
}
 8002152:	4618      	mov	r0, r3
 8002154:	3708      	adds	r7, #8
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
	...

0800215c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d101      	bne.n	800216e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e06c      	b.n	8002248 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002174:	2b00      	cmp	r3, #0
 8002176:	d106      	bne.n	8002186 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2223      	movs	r2, #35	; 0x23
 800217c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f7ff fb71 	bl	8001868 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002186:	2300      	movs	r3, #0
 8002188:	60bb      	str	r3, [r7, #8]
 800218a:	4b31      	ldr	r3, [pc, #196]	; (8002250 <HAL_ETH_Init+0xf4>)
 800218c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218e:	4a30      	ldr	r2, [pc, #192]	; (8002250 <HAL_ETH_Init+0xf4>)
 8002190:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002194:	6453      	str	r3, [r2, #68]	; 0x44
 8002196:	4b2e      	ldr	r3, [pc, #184]	; (8002250 <HAL_ETH_Init+0xf4>)
 8002198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800219e:	60bb      	str	r3, [r7, #8]
 80021a0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80021a2:	4b2c      	ldr	r3, [pc, #176]	; (8002254 <HAL_ETH_Init+0xf8>)
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	4a2b      	ldr	r2, [pc, #172]	; (8002254 <HAL_ETH_Init+0xf8>)
 80021a8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80021ac:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80021ae:	4b29      	ldr	r3, [pc, #164]	; (8002254 <HAL_ETH_Init+0xf8>)
 80021b0:	685a      	ldr	r2, [r3, #4]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	4927      	ldr	r1, [pc, #156]	; (8002254 <HAL_ETH_Init+0xf8>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80021bc:	4b25      	ldr	r3, [pc, #148]	; (8002254 <HAL_ETH_Init+0xf8>)
 80021be:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	6812      	ldr	r2, [r2, #0]
 80021ce:	f043 0301 	orr.w	r3, r3, #1
 80021d2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80021d6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021d8:	f7ff fe7e 	bl	8001ed8 <HAL_GetTick>
 80021dc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80021de:	e011      	b.n	8002204 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80021e0:	f7ff fe7a 	bl	8001ed8 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80021ee:	d909      	bls.n	8002204 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2204      	movs	r2, #4
 80021f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	22e0      	movs	r2, #224	; 0xe0
 80021fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e021      	b.n	8002248 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	2b00      	cmp	r3, #0
 8002214:	d1e4      	bne.n	80021e0 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f000 f958 	bl	80024cc <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f000 f9ff 	bl	8002620 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f000 fa55 	bl	80026d2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	461a      	mov	r2, r3
 800222e:	2100      	movs	r1, #0
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f000 f9bd 	bl	80025b0 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2200      	movs	r2, #0
 800223a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2210      	movs	r2, #16
 8002242:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002246:	2300      	movs	r3, #0
}
 8002248:	4618      	mov	r0, r3
 800224a:	3710      	adds	r7, #16
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	40023800 	.word	0x40023800
 8002254:	40013800 	.word	0x40013800

08002258 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800226a:	68fa      	ldr	r2, [r7, #12]
 800226c:	4b51      	ldr	r3, [pc, #324]	; (80023b4 <ETH_SetMACConfig+0x15c>)
 800226e:	4013      	ands	r3, r2
 8002270:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	7c1b      	ldrb	r3, [r3, #16]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d102      	bne.n	8002280 <ETH_SetMACConfig+0x28>
 800227a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800227e:	e000      	b.n	8002282 <ETH_SetMACConfig+0x2a>
 8002280:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	7c5b      	ldrb	r3, [r3, #17]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d102      	bne.n	8002290 <ETH_SetMACConfig+0x38>
 800228a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800228e:	e000      	b.n	8002292 <ETH_SetMACConfig+0x3a>
 8002290:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002292:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002298:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	7fdb      	ldrb	r3, [r3, #31]
 800229e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80022a0:	431a      	orrs	r2, r3
                        macconf->Speed |
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80022a6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80022a8:	683a      	ldr	r2, [r7, #0]
 80022aa:	7f92      	ldrb	r2, [r2, #30]
 80022ac:	2a00      	cmp	r2, #0
 80022ae:	d102      	bne.n	80022b6 <ETH_SetMACConfig+0x5e>
 80022b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022b4:	e000      	b.n	80022b8 <ETH_SetMACConfig+0x60>
 80022b6:	2200      	movs	r2, #0
                        macconf->Speed |
 80022b8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	7f1b      	ldrb	r3, [r3, #28]
 80022be:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80022c0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80022c6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	791b      	ldrb	r3, [r3, #4]
 80022cc:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80022ce:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80022d0:	683a      	ldr	r2, [r7, #0]
 80022d2:	f892 2020 	ldrb.w	r2, [r2, #32]
 80022d6:	2a00      	cmp	r2, #0
 80022d8:	d102      	bne.n	80022e0 <ETH_SetMACConfig+0x88>
 80022da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022de:	e000      	b.n	80022e2 <ETH_SetMACConfig+0x8a>
 80022e0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80022e2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	7bdb      	ldrb	r3, [r3, #15]
 80022e8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80022ea:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80022f0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80022f8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80022fa:	4313      	orrs	r3, r2
 80022fc:	68fa      	ldr	r2, [r7, #12]
 80022fe:	4313      	orrs	r3, r2
 8002300:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	68fa      	ldr	r2, [r7, #12]
 8002308:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002312:	2001      	movs	r0, #1
 8002314:	f7ff fdec 	bl	8001ef0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	68fa      	ldr	r2, [r7, #12]
 800231e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	699b      	ldr	r3, [r3, #24]
 8002326:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002328:	68fa      	ldr	r2, [r7, #12]
 800232a:	f64f 7341 	movw	r3, #65345	; 0xff41
 800232e:	4013      	ands	r3, r2
 8002330:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002336:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002338:	683a      	ldr	r2, [r7, #0]
 800233a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800233e:	2a00      	cmp	r2, #0
 8002340:	d101      	bne.n	8002346 <ETH_SetMACConfig+0xee>
 8002342:	2280      	movs	r2, #128	; 0x80
 8002344:	e000      	b.n	8002348 <ETH_SetMACConfig+0xf0>
 8002346:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002348:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800234e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002350:	683a      	ldr	r2, [r7, #0]
 8002352:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002356:	2a01      	cmp	r2, #1
 8002358:	d101      	bne.n	800235e <ETH_SetMACConfig+0x106>
 800235a:	2208      	movs	r2, #8
 800235c:	e000      	b.n	8002360 <ETH_SetMACConfig+0x108>
 800235e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002360:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002362:	683a      	ldr	r2, [r7, #0]
 8002364:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002368:	2a01      	cmp	r2, #1
 800236a:	d101      	bne.n	8002370 <ETH_SetMACConfig+0x118>
 800236c:	2204      	movs	r2, #4
 800236e:	e000      	b.n	8002372 <ETH_SetMACConfig+0x11a>
 8002370:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002372:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002374:	683a      	ldr	r2, [r7, #0]
 8002376:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800237a:	2a01      	cmp	r2, #1
 800237c:	d101      	bne.n	8002382 <ETH_SetMACConfig+0x12a>
 800237e:	2202      	movs	r2, #2
 8002380:	e000      	b.n	8002384 <ETH_SetMACConfig+0x12c>
 8002382:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002384:	4313      	orrs	r3, r2
 8002386:	68fa      	ldr	r2, [r7, #12]
 8002388:	4313      	orrs	r3, r2
 800238a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	68fa      	ldr	r2, [r7, #12]
 8002392:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	699b      	ldr	r3, [r3, #24]
 800239a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800239c:	2001      	movs	r0, #1
 800239e:	f7ff fda7 	bl	8001ef0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	68fa      	ldr	r2, [r7, #12]
 80023a8:	619a      	str	r2, [r3, #24]
}
 80023aa:	bf00      	nop
 80023ac:	3710      	adds	r7, #16
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	ff20810f 	.word	0xff20810f

080023b8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80023ce:	68fa      	ldr	r2, [r7, #12]
 80023d0:	4b3d      	ldr	r3, [pc, #244]	; (80024c8 <ETH_SetDMAConfig+0x110>)
 80023d2:	4013      	ands	r3, r2
 80023d4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	7b1b      	ldrb	r3, [r3, #12]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d102      	bne.n	80023e4 <ETH_SetDMAConfig+0x2c>
 80023de:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80023e2:	e000      	b.n	80023e6 <ETH_SetDMAConfig+0x2e>
 80023e4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	7b5b      	ldrb	r3, [r3, #13]
 80023ea:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80023ec:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80023ee:	683a      	ldr	r2, [r7, #0]
 80023f0:	7f52      	ldrb	r2, [r2, #29]
 80023f2:	2a00      	cmp	r2, #0
 80023f4:	d102      	bne.n	80023fc <ETH_SetDMAConfig+0x44>
 80023f6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80023fa:	e000      	b.n	80023fe <ETH_SetDMAConfig+0x46>
 80023fc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80023fe:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	7b9b      	ldrb	r3, [r3, #14]
 8002404:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002406:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800240c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	7f1b      	ldrb	r3, [r3, #28]
 8002412:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002414:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	7f9b      	ldrb	r3, [r3, #30]
 800241a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800241c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002422:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800242a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800242c:	4313      	orrs	r3, r2
 800242e:	68fa      	ldr	r2, [r7, #12]
 8002430:	4313      	orrs	r3, r2
 8002432:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800243c:	461a      	mov	r2, r3
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800244a:	699b      	ldr	r3, [r3, #24]
 800244c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800244e:	2001      	movs	r0, #1
 8002450:	f7ff fd4e 	bl	8001ef0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800245c:	461a      	mov	r2, r3
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	791b      	ldrb	r3, [r3, #4]
 8002466:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800246c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002472:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002478:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002480:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002482:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002488:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800248a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002490:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	6812      	ldr	r2, [r2, #0]
 8002496:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800249a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800249e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80024ac:	2001      	movs	r0, #1
 80024ae:	f7ff fd1f 	bl	8001ef0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024ba:	461a      	mov	r2, r3
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6013      	str	r3, [r2, #0]
}
 80024c0:	bf00      	nop
 80024c2:	3710      	adds	r7, #16
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	f8de3f23 	.word	0xf8de3f23

080024cc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b0a6      	sub	sp, #152	; 0x98
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80024d4:	2301      	movs	r3, #1
 80024d6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80024da:	2301      	movs	r3, #1
 80024dc:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80024e0:	2300      	movs	r3, #0
 80024e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80024e4:	2300      	movs	r3, #0
 80024e6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80024ea:	2301      	movs	r3, #1
 80024ec:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80024f0:	2300      	movs	r3, #0
 80024f2:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80024f6:	2301      	movs	r3, #1
 80024f8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80024fc:	2300      	movs	r3, #0
 80024fe:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002502:	2300      	movs	r3, #0
 8002504:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002508:	2300      	movs	r3, #0
 800250a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800250c:	2300      	movs	r3, #0
 800250e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002512:	2300      	movs	r3, #0
 8002514:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002516:	2300      	movs	r3, #0
 8002518:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800251c:	2300      	movs	r3, #0
 800251e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002522:	2300      	movs	r3, #0
 8002524:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002528:	2300      	movs	r3, #0
 800252a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800252e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002532:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002534:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002538:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800253a:	2300      	movs	r3, #0
 800253c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002540:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002544:	4619      	mov	r1, r3
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f7ff fe86 	bl	8002258 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800254c:	2301      	movs	r3, #1
 800254e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002550:	2301      	movs	r3, #1
 8002552:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002554:	2301      	movs	r3, #1
 8002556:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800255a:	2301      	movs	r3, #1
 800255c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800255e:	2300      	movs	r3, #0
 8002560:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002562:	2300      	movs	r3, #0
 8002564:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002568:	2300      	movs	r3, #0
 800256a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800256e:	2300      	movs	r3, #0
 8002570:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002572:	2301      	movs	r3, #1
 8002574:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002578:	2301      	movs	r3, #1
 800257a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800257c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002580:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002582:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002586:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002588:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800258c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800258e:	2301      	movs	r3, #1
 8002590:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002594:	2300      	movs	r3, #0
 8002596:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002598:	2300      	movs	r3, #0
 800259a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800259c:	f107 0308 	add.w	r3, r7, #8
 80025a0:	4619      	mov	r1, r3
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f7ff ff08 	bl	80023b8 <ETH_SetDMAConfig>
}
 80025a8:	bf00      	nop
 80025aa:	3798      	adds	r7, #152	; 0x98
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b087      	sub	sp, #28
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	3305      	adds	r3, #5
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	021b      	lsls	r3, r3, #8
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	3204      	adds	r2, #4
 80025c8:	7812      	ldrb	r2, [r2, #0]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80025ce:	68ba      	ldr	r2, [r7, #8]
 80025d0:	4b11      	ldr	r3, [pc, #68]	; (8002618 <ETH_MACAddressConfig+0x68>)
 80025d2:	4413      	add	r3, r2
 80025d4:	461a      	mov	r2, r3
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	3303      	adds	r3, #3
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	061a      	lsls	r2, r3, #24
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	3302      	adds	r3, #2
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	041b      	lsls	r3, r3, #16
 80025ea:	431a      	orrs	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	3301      	adds	r3, #1
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	021b      	lsls	r3, r3, #8
 80025f4:	4313      	orrs	r3, r2
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	7812      	ldrb	r2, [r2, #0]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80025fe:	68ba      	ldr	r2, [r7, #8]
 8002600:	4b06      	ldr	r3, [pc, #24]	; (800261c <ETH_MACAddressConfig+0x6c>)
 8002602:	4413      	add	r3, r2
 8002604:	461a      	mov	r2, r3
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	6013      	str	r3, [r2, #0]
}
 800260a:	bf00      	nop
 800260c:	371c      	adds	r7, #28
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	40028040 	.word	0x40028040
 800261c:	40028044 	.word	0x40028044

08002620 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002620:	b480      	push	{r7}
 8002622:	b085      	sub	sp, #20
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002628:	2300      	movs	r3, #0
 800262a:	60fb      	str	r3, [r7, #12]
 800262c:	e03e      	b.n	80026ac <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	68d9      	ldr	r1, [r3, #12]
 8002632:	68fa      	ldr	r2, [r7, #12]
 8002634:	4613      	mov	r3, r2
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	4413      	add	r3, r2
 800263a:	00db      	lsls	r3, r3, #3
 800263c:	440b      	add	r3, r1
 800263e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	2200      	movs	r2, #0
 8002644:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	2200      	movs	r2, #0
 800264a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	2200      	movs	r2, #0
 8002650:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	2200      	movs	r2, #0
 8002656:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002658:	68b9      	ldr	r1, [r7, #8]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	68fa      	ldr	r2, [r7, #12]
 800265e:	3206      	adds	r2, #6
 8002660:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2b02      	cmp	r3, #2
 8002674:	d80c      	bhi.n	8002690 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	68d9      	ldr	r1, [r3, #12]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	1c5a      	adds	r2, r3, #1
 800267e:	4613      	mov	r3, r2
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	4413      	add	r3, r2
 8002684:	00db      	lsls	r3, r3, #3
 8002686:	440b      	add	r3, r1
 8002688:	461a      	mov	r2, r3
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	60da      	str	r2, [r3, #12]
 800268e:	e004      	b.n	800269a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	461a      	mov	r2, r3
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	3301      	adds	r3, #1
 80026aa:	60fb      	str	r3, [r7, #12]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2b03      	cmp	r3, #3
 80026b0:	d9bd      	bls.n	800262e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	68da      	ldr	r2, [r3, #12]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026c4:	611a      	str	r2, [r3, #16]
}
 80026c6:	bf00      	nop
 80026c8:	3714      	adds	r7, #20
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr

080026d2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80026d2:	b480      	push	{r7}
 80026d4:	b085      	sub	sp, #20
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80026da:	2300      	movs	r3, #0
 80026dc:	60fb      	str	r3, [r7, #12]
 80026de:	e046      	b.n	800276e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6919      	ldr	r1, [r3, #16]
 80026e4:	68fa      	ldr	r2, [r7, #12]
 80026e6:	4613      	mov	r3, r2
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	4413      	add	r3, r2
 80026ec:	00db      	lsls	r3, r3, #3
 80026ee:	440b      	add	r3, r1
 80026f0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	2200      	movs	r2, #0
 80026f6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	2200      	movs	r2, #0
 80026fc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	2200      	movs	r2, #0
 8002702:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	2200      	movs	r2, #0
 8002708:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	2200      	movs	r2, #0
 800270e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	2200      	movs	r2, #0
 8002714:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800271c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002724:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002732:	68b9      	ldr	r1, [r7, #8]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	3212      	adds	r2, #18
 800273a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2b02      	cmp	r3, #2
 8002742:	d80c      	bhi.n	800275e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6919      	ldr	r1, [r3, #16]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	1c5a      	adds	r2, r3, #1
 800274c:	4613      	mov	r3, r2
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	4413      	add	r3, r2
 8002752:	00db      	lsls	r3, r3, #3
 8002754:	440b      	add	r3, r1
 8002756:	461a      	mov	r2, r3
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	60da      	str	r2, [r3, #12]
 800275c:	e004      	b.n	8002768 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	691b      	ldr	r3, [r3, #16]
 8002762:	461a      	mov	r2, r3
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	3301      	adds	r3, #1
 800276c:	60fb      	str	r3, [r7, #12]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2b03      	cmp	r3, #3
 8002772:	d9b5      	bls.n	80026e0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2200      	movs	r2, #0
 8002790:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	691a      	ldr	r2, [r3, #16]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800279e:	60da      	str	r2, [r3, #12]
}
 80027a0:	bf00      	nop
 80027a2:	3714      	adds	r7, #20
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b089      	sub	sp, #36	; 0x24
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027b6:	2300      	movs	r3, #0
 80027b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027ba:	2300      	movs	r3, #0
 80027bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027be:	2300      	movs	r3, #0
 80027c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027c2:	2300      	movs	r3, #0
 80027c4:	61fb      	str	r3, [r7, #28]
 80027c6:	e177      	b.n	8002ab8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027c8:	2201      	movs	r2, #1
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	fa02 f303 	lsl.w	r3, r2, r3
 80027d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	697a      	ldr	r2, [r7, #20]
 80027d8:	4013      	ands	r3, r2
 80027da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027dc:	693a      	ldr	r2, [r7, #16]
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	429a      	cmp	r2, r3
 80027e2:	f040 8166 	bne.w	8002ab2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f003 0303 	and.w	r3, r3, #3
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d005      	beq.n	80027fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d130      	bne.n	8002860 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	005b      	lsls	r3, r3, #1
 8002808:	2203      	movs	r2, #3
 800280a:	fa02 f303 	lsl.w	r3, r2, r3
 800280e:	43db      	mvns	r3, r3
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	4013      	ands	r3, r2
 8002814:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	68da      	ldr	r2, [r3, #12]
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	fa02 f303 	lsl.w	r3, r2, r3
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	4313      	orrs	r3, r2
 8002826:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	69ba      	ldr	r2, [r7, #24]
 800282c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002834:	2201      	movs	r2, #1
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	43db      	mvns	r3, r3
 800283e:	69ba      	ldr	r2, [r7, #24]
 8002840:	4013      	ands	r3, r2
 8002842:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	091b      	lsrs	r3, r3, #4
 800284a:	f003 0201 	and.w	r2, r3, #1
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	4313      	orrs	r3, r2
 8002858:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f003 0303 	and.w	r3, r3, #3
 8002868:	2b03      	cmp	r3, #3
 800286a:	d017      	beq.n	800289c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	2203      	movs	r2, #3
 8002878:	fa02 f303 	lsl.w	r3, r2, r3
 800287c:	43db      	mvns	r3, r3
 800287e:	69ba      	ldr	r2, [r7, #24]
 8002880:	4013      	ands	r3, r2
 8002882:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	689a      	ldr	r2, [r3, #8]
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	005b      	lsls	r3, r3, #1
 800288c:	fa02 f303 	lsl.w	r3, r2, r3
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	4313      	orrs	r3, r2
 8002894:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f003 0303 	and.w	r3, r3, #3
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d123      	bne.n	80028f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	08da      	lsrs	r2, r3, #3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	3208      	adds	r2, #8
 80028b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	f003 0307 	and.w	r3, r3, #7
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	220f      	movs	r2, #15
 80028c0:	fa02 f303 	lsl.w	r3, r2, r3
 80028c4:	43db      	mvns	r3, r3
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	4013      	ands	r3, r2
 80028ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	691a      	ldr	r2, [r3, #16]
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	f003 0307 	and.w	r3, r3, #7
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	fa02 f303 	lsl.w	r3, r2, r3
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	4313      	orrs	r3, r2
 80028e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	08da      	lsrs	r2, r3, #3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	3208      	adds	r2, #8
 80028ea:	69b9      	ldr	r1, [r7, #24]
 80028ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	005b      	lsls	r3, r3, #1
 80028fa:	2203      	movs	r2, #3
 80028fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002900:	43db      	mvns	r3, r3
 8002902:	69ba      	ldr	r2, [r7, #24]
 8002904:	4013      	ands	r3, r2
 8002906:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f003 0203 	and.w	r2, r3, #3
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	005b      	lsls	r3, r3, #1
 8002914:	fa02 f303 	lsl.w	r3, r2, r3
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	4313      	orrs	r3, r2
 800291c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800292c:	2b00      	cmp	r3, #0
 800292e:	f000 80c0 	beq.w	8002ab2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002932:	2300      	movs	r3, #0
 8002934:	60fb      	str	r3, [r7, #12]
 8002936:	4b66      	ldr	r3, [pc, #408]	; (8002ad0 <HAL_GPIO_Init+0x324>)
 8002938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800293a:	4a65      	ldr	r2, [pc, #404]	; (8002ad0 <HAL_GPIO_Init+0x324>)
 800293c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002940:	6453      	str	r3, [r2, #68]	; 0x44
 8002942:	4b63      	ldr	r3, [pc, #396]	; (8002ad0 <HAL_GPIO_Init+0x324>)
 8002944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002946:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800294a:	60fb      	str	r3, [r7, #12]
 800294c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800294e:	4a61      	ldr	r2, [pc, #388]	; (8002ad4 <HAL_GPIO_Init+0x328>)
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	089b      	lsrs	r3, r3, #2
 8002954:	3302      	adds	r3, #2
 8002956:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800295a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	f003 0303 	and.w	r3, r3, #3
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	220f      	movs	r2, #15
 8002966:	fa02 f303 	lsl.w	r3, r2, r3
 800296a:	43db      	mvns	r3, r3
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	4013      	ands	r3, r2
 8002970:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a58      	ldr	r2, [pc, #352]	; (8002ad8 <HAL_GPIO_Init+0x32c>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d037      	beq.n	80029ea <HAL_GPIO_Init+0x23e>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a57      	ldr	r2, [pc, #348]	; (8002adc <HAL_GPIO_Init+0x330>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d031      	beq.n	80029e6 <HAL_GPIO_Init+0x23a>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a56      	ldr	r2, [pc, #344]	; (8002ae0 <HAL_GPIO_Init+0x334>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d02b      	beq.n	80029e2 <HAL_GPIO_Init+0x236>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a55      	ldr	r2, [pc, #340]	; (8002ae4 <HAL_GPIO_Init+0x338>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d025      	beq.n	80029de <HAL_GPIO_Init+0x232>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a54      	ldr	r2, [pc, #336]	; (8002ae8 <HAL_GPIO_Init+0x33c>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d01f      	beq.n	80029da <HAL_GPIO_Init+0x22e>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a53      	ldr	r2, [pc, #332]	; (8002aec <HAL_GPIO_Init+0x340>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d019      	beq.n	80029d6 <HAL_GPIO_Init+0x22a>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a52      	ldr	r2, [pc, #328]	; (8002af0 <HAL_GPIO_Init+0x344>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d013      	beq.n	80029d2 <HAL_GPIO_Init+0x226>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a51      	ldr	r2, [pc, #324]	; (8002af4 <HAL_GPIO_Init+0x348>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d00d      	beq.n	80029ce <HAL_GPIO_Init+0x222>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a50      	ldr	r2, [pc, #320]	; (8002af8 <HAL_GPIO_Init+0x34c>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d007      	beq.n	80029ca <HAL_GPIO_Init+0x21e>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a4f      	ldr	r2, [pc, #316]	; (8002afc <HAL_GPIO_Init+0x350>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d101      	bne.n	80029c6 <HAL_GPIO_Init+0x21a>
 80029c2:	2309      	movs	r3, #9
 80029c4:	e012      	b.n	80029ec <HAL_GPIO_Init+0x240>
 80029c6:	230a      	movs	r3, #10
 80029c8:	e010      	b.n	80029ec <HAL_GPIO_Init+0x240>
 80029ca:	2308      	movs	r3, #8
 80029cc:	e00e      	b.n	80029ec <HAL_GPIO_Init+0x240>
 80029ce:	2307      	movs	r3, #7
 80029d0:	e00c      	b.n	80029ec <HAL_GPIO_Init+0x240>
 80029d2:	2306      	movs	r3, #6
 80029d4:	e00a      	b.n	80029ec <HAL_GPIO_Init+0x240>
 80029d6:	2305      	movs	r3, #5
 80029d8:	e008      	b.n	80029ec <HAL_GPIO_Init+0x240>
 80029da:	2304      	movs	r3, #4
 80029dc:	e006      	b.n	80029ec <HAL_GPIO_Init+0x240>
 80029de:	2303      	movs	r3, #3
 80029e0:	e004      	b.n	80029ec <HAL_GPIO_Init+0x240>
 80029e2:	2302      	movs	r3, #2
 80029e4:	e002      	b.n	80029ec <HAL_GPIO_Init+0x240>
 80029e6:	2301      	movs	r3, #1
 80029e8:	e000      	b.n	80029ec <HAL_GPIO_Init+0x240>
 80029ea:	2300      	movs	r3, #0
 80029ec:	69fa      	ldr	r2, [r7, #28]
 80029ee:	f002 0203 	and.w	r2, r2, #3
 80029f2:	0092      	lsls	r2, r2, #2
 80029f4:	4093      	lsls	r3, r2
 80029f6:	69ba      	ldr	r2, [r7, #24]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029fc:	4935      	ldr	r1, [pc, #212]	; (8002ad4 <HAL_GPIO_Init+0x328>)
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	089b      	lsrs	r3, r3, #2
 8002a02:	3302      	adds	r3, #2
 8002a04:	69ba      	ldr	r2, [r7, #24]
 8002a06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a0a:	4b3d      	ldr	r3, [pc, #244]	; (8002b00 <HAL_GPIO_Init+0x354>)
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	43db      	mvns	r3, r3
 8002a14:	69ba      	ldr	r2, [r7, #24]
 8002a16:	4013      	ands	r3, r2
 8002a18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d003      	beq.n	8002a2e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002a26:	69ba      	ldr	r2, [r7, #24]
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a2e:	4a34      	ldr	r2, [pc, #208]	; (8002b00 <HAL_GPIO_Init+0x354>)
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a34:	4b32      	ldr	r3, [pc, #200]	; (8002b00 <HAL_GPIO_Init+0x354>)
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	43db      	mvns	r3, r3
 8002a3e:	69ba      	ldr	r2, [r7, #24]
 8002a40:	4013      	ands	r3, r2
 8002a42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d003      	beq.n	8002a58 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002a50:	69ba      	ldr	r2, [r7, #24]
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a58:	4a29      	ldr	r2, [pc, #164]	; (8002b00 <HAL_GPIO_Init+0x354>)
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a5e:	4b28      	ldr	r3, [pc, #160]	; (8002b00 <HAL_GPIO_Init+0x354>)
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	43db      	mvns	r3, r3
 8002a68:	69ba      	ldr	r2, [r7, #24]
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d003      	beq.n	8002a82 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002a7a:	69ba      	ldr	r2, [r7, #24]
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a82:	4a1f      	ldr	r2, [pc, #124]	; (8002b00 <HAL_GPIO_Init+0x354>)
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a88:	4b1d      	ldr	r3, [pc, #116]	; (8002b00 <HAL_GPIO_Init+0x354>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	43db      	mvns	r3, r3
 8002a92:	69ba      	ldr	r2, [r7, #24]
 8002a94:	4013      	ands	r3, r2
 8002a96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d003      	beq.n	8002aac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002aac:	4a14      	ldr	r2, [pc, #80]	; (8002b00 <HAL_GPIO_Init+0x354>)
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	61fb      	str	r3, [r7, #28]
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	2b0f      	cmp	r3, #15
 8002abc:	f67f ae84 	bls.w	80027c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ac0:	bf00      	nop
 8002ac2:	bf00      	nop
 8002ac4:	3724      	adds	r7, #36	; 0x24
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	40023800 	.word	0x40023800
 8002ad4:	40013800 	.word	0x40013800
 8002ad8:	40020000 	.word	0x40020000
 8002adc:	40020400 	.word	0x40020400
 8002ae0:	40020800 	.word	0x40020800
 8002ae4:	40020c00 	.word	0x40020c00
 8002ae8:	40021000 	.word	0x40021000
 8002aec:	40021400 	.word	0x40021400
 8002af0:	40021800 	.word	0x40021800
 8002af4:	40021c00 	.word	0x40021c00
 8002af8:	40022000 	.word	0x40022000
 8002afc:	40022400 	.word	0x40022400
 8002b00:	40013c00 	.word	0x40013c00

08002b04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	807b      	strh	r3, [r7, #2]
 8002b10:	4613      	mov	r3, r2
 8002b12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b14:	787b      	ldrb	r3, [r7, #1]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d003      	beq.n	8002b22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b1a:	887a      	ldrh	r2, [r7, #2]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b20:	e003      	b.n	8002b2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b22:	887b      	ldrh	r3, [r7, #2]
 8002b24:	041a      	lsls	r2, r3, #16
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	619a      	str	r2, [r3, #24]
}
 8002b2a:	bf00      	nop
 8002b2c:	370c      	adds	r7, #12
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr

08002b36 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002b36:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b38:	b08f      	sub	sp, #60	; 0x3c
 8002b3a:	af0a      	add	r7, sp, #40	; 0x28
 8002b3c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d101      	bne.n	8002b48 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e10f      	b.n	8002d68 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d106      	bne.n	8002b68 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f7fe ffde 	bl	8001b24 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2203      	movs	r2, #3
 8002b6c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d102      	bne.n	8002b82 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f002 f96f 	bl	8004e6a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	603b      	str	r3, [r7, #0]
 8002b92:	687e      	ldr	r6, [r7, #4]
 8002b94:	466d      	mov	r5, sp
 8002b96:	f106 0410 	add.w	r4, r6, #16
 8002b9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ba0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ba2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ba6:	e885 0003 	stmia.w	r5, {r0, r1}
 8002baa:	1d33      	adds	r3, r6, #4
 8002bac:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bae:	6838      	ldr	r0, [r7, #0]
 8002bb0:	f002 f8fa 	bl	8004da8 <USB_CoreInit>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d005      	beq.n	8002bc6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2202      	movs	r2, #2
 8002bbe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e0d0      	b.n	8002d68 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2100      	movs	r1, #0
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f002 f95d 	bl	8004e8c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	73fb      	strb	r3, [r7, #15]
 8002bd6:	e04a      	b.n	8002c6e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002bd8:	7bfa      	ldrb	r2, [r7, #15]
 8002bda:	6879      	ldr	r1, [r7, #4]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	00db      	lsls	r3, r3, #3
 8002be0:	4413      	add	r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	440b      	add	r3, r1
 8002be6:	333d      	adds	r3, #61	; 0x3d
 8002be8:	2201      	movs	r2, #1
 8002bea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002bec:	7bfa      	ldrb	r2, [r7, #15]
 8002bee:	6879      	ldr	r1, [r7, #4]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	00db      	lsls	r3, r3, #3
 8002bf4:	4413      	add	r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	440b      	add	r3, r1
 8002bfa:	333c      	adds	r3, #60	; 0x3c
 8002bfc:	7bfa      	ldrb	r2, [r7, #15]
 8002bfe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002c00:	7bfa      	ldrb	r2, [r7, #15]
 8002c02:	7bfb      	ldrb	r3, [r7, #15]
 8002c04:	b298      	uxth	r0, r3
 8002c06:	6879      	ldr	r1, [r7, #4]
 8002c08:	4613      	mov	r3, r2
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	4413      	add	r3, r2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	440b      	add	r3, r1
 8002c12:	3344      	adds	r3, #68	; 0x44
 8002c14:	4602      	mov	r2, r0
 8002c16:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c18:	7bfa      	ldrb	r2, [r7, #15]
 8002c1a:	6879      	ldr	r1, [r7, #4]
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	4413      	add	r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	440b      	add	r3, r1
 8002c26:	3340      	adds	r3, #64	; 0x40
 8002c28:	2200      	movs	r2, #0
 8002c2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002c2c:	7bfa      	ldrb	r2, [r7, #15]
 8002c2e:	6879      	ldr	r1, [r7, #4]
 8002c30:	4613      	mov	r3, r2
 8002c32:	00db      	lsls	r3, r3, #3
 8002c34:	4413      	add	r3, r2
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	440b      	add	r3, r1
 8002c3a:	3348      	adds	r3, #72	; 0x48
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c40:	7bfa      	ldrb	r2, [r7, #15]
 8002c42:	6879      	ldr	r1, [r7, #4]
 8002c44:	4613      	mov	r3, r2
 8002c46:	00db      	lsls	r3, r3, #3
 8002c48:	4413      	add	r3, r2
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	440b      	add	r3, r1
 8002c4e:	334c      	adds	r3, #76	; 0x4c
 8002c50:	2200      	movs	r2, #0
 8002c52:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c54:	7bfa      	ldrb	r2, [r7, #15]
 8002c56:	6879      	ldr	r1, [r7, #4]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	00db      	lsls	r3, r3, #3
 8002c5c:	4413      	add	r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	440b      	add	r3, r1
 8002c62:	3354      	adds	r3, #84	; 0x54
 8002c64:	2200      	movs	r2, #0
 8002c66:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c68:	7bfb      	ldrb	r3, [r7, #15]
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	73fb      	strb	r3, [r7, #15]
 8002c6e:	7bfa      	ldrb	r2, [r7, #15]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d3af      	bcc.n	8002bd8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c78:	2300      	movs	r3, #0
 8002c7a:	73fb      	strb	r3, [r7, #15]
 8002c7c:	e044      	b.n	8002d08 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c7e:	7bfa      	ldrb	r2, [r7, #15]
 8002c80:	6879      	ldr	r1, [r7, #4]
 8002c82:	4613      	mov	r3, r2
 8002c84:	00db      	lsls	r3, r3, #3
 8002c86:	4413      	add	r3, r2
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	440b      	add	r3, r1
 8002c8c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002c90:	2200      	movs	r2, #0
 8002c92:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c94:	7bfa      	ldrb	r2, [r7, #15]
 8002c96:	6879      	ldr	r1, [r7, #4]
 8002c98:	4613      	mov	r3, r2
 8002c9a:	00db      	lsls	r3, r3, #3
 8002c9c:	4413      	add	r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	440b      	add	r3, r1
 8002ca2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002ca6:	7bfa      	ldrb	r2, [r7, #15]
 8002ca8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002caa:	7bfa      	ldrb	r2, [r7, #15]
 8002cac:	6879      	ldr	r1, [r7, #4]
 8002cae:	4613      	mov	r3, r2
 8002cb0:	00db      	lsls	r3, r3, #3
 8002cb2:	4413      	add	r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	440b      	add	r3, r1
 8002cb8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002cc0:	7bfa      	ldrb	r2, [r7, #15]
 8002cc2:	6879      	ldr	r1, [r7, #4]
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	00db      	lsls	r3, r3, #3
 8002cc8:	4413      	add	r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	440b      	add	r3, r1
 8002cce:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002cd6:	7bfa      	ldrb	r2, [r7, #15]
 8002cd8:	6879      	ldr	r1, [r7, #4]
 8002cda:	4613      	mov	r3, r2
 8002cdc:	00db      	lsls	r3, r3, #3
 8002cde:	4413      	add	r3, r2
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	440b      	add	r3, r1
 8002ce4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002ce8:	2200      	movs	r2, #0
 8002cea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002cec:	7bfa      	ldrb	r2, [r7, #15]
 8002cee:	6879      	ldr	r1, [r7, #4]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	00db      	lsls	r3, r3, #3
 8002cf4:	4413      	add	r3, r2
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	440b      	add	r3, r1
 8002cfa:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002cfe:	2200      	movs	r2, #0
 8002d00:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d02:	7bfb      	ldrb	r3, [r7, #15]
 8002d04:	3301      	adds	r3, #1
 8002d06:	73fb      	strb	r3, [r7, #15]
 8002d08:	7bfa      	ldrb	r2, [r7, #15]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d3b5      	bcc.n	8002c7e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	603b      	str	r3, [r7, #0]
 8002d18:	687e      	ldr	r6, [r7, #4]
 8002d1a:	466d      	mov	r5, sp
 8002d1c:	f106 0410 	add.w	r4, r6, #16
 8002d20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d28:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d2c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d30:	1d33      	adds	r3, r6, #4
 8002d32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d34:	6838      	ldr	r0, [r7, #0]
 8002d36:	f002 f8f5 	bl	8004f24 <USB_DevInit>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d005      	beq.n	8002d4c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2202      	movs	r2, #2
 8002d44:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e00d      	b.n	8002d68 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f002 fac0 	bl	80052e6 <USB_DevDisconnect>

  return HAL_OK;
 8002d66:	2300      	movs	r3, #0
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3714      	adds	r7, #20
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d70 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b086      	sub	sp, #24
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d101      	bne.n	8002d82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e267      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0301 	and.w	r3, r3, #1
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d075      	beq.n	8002e7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d8e:	4b88      	ldr	r3, [pc, #544]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f003 030c 	and.w	r3, r3, #12
 8002d96:	2b04      	cmp	r3, #4
 8002d98:	d00c      	beq.n	8002db4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d9a:	4b85      	ldr	r3, [pc, #532]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002da2:	2b08      	cmp	r3, #8
 8002da4:	d112      	bne.n	8002dcc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002da6:	4b82      	ldr	r3, [pc, #520]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002db2:	d10b      	bne.n	8002dcc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002db4:	4b7e      	ldr	r3, [pc, #504]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d05b      	beq.n	8002e78 <HAL_RCC_OscConfig+0x108>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d157      	bne.n	8002e78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e242      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dd4:	d106      	bne.n	8002de4 <HAL_RCC_OscConfig+0x74>
 8002dd6:	4b76      	ldr	r3, [pc, #472]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a75      	ldr	r2, [pc, #468]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002ddc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002de0:	6013      	str	r3, [r2, #0]
 8002de2:	e01d      	b.n	8002e20 <HAL_RCC_OscConfig+0xb0>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dec:	d10c      	bne.n	8002e08 <HAL_RCC_OscConfig+0x98>
 8002dee:	4b70      	ldr	r3, [pc, #448]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a6f      	ldr	r2, [pc, #444]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002df4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002df8:	6013      	str	r3, [r2, #0]
 8002dfa:	4b6d      	ldr	r3, [pc, #436]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a6c      	ldr	r2, [pc, #432]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002e00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e04:	6013      	str	r3, [r2, #0]
 8002e06:	e00b      	b.n	8002e20 <HAL_RCC_OscConfig+0xb0>
 8002e08:	4b69      	ldr	r3, [pc, #420]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a68      	ldr	r2, [pc, #416]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002e0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e12:	6013      	str	r3, [r2, #0]
 8002e14:	4b66      	ldr	r3, [pc, #408]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a65      	ldr	r2, [pc, #404]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002e1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d013      	beq.n	8002e50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e28:	f7ff f856 	bl	8001ed8 <HAL_GetTick>
 8002e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e2e:	e008      	b.n	8002e42 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e30:	f7ff f852 	bl	8001ed8 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b64      	cmp	r3, #100	; 0x64
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e207      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e42:	4b5b      	ldr	r3, [pc, #364]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d0f0      	beq.n	8002e30 <HAL_RCC_OscConfig+0xc0>
 8002e4e:	e014      	b.n	8002e7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e50:	f7ff f842 	bl	8001ed8 <HAL_GetTick>
 8002e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e56:	e008      	b.n	8002e6a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e58:	f7ff f83e 	bl	8001ed8 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	2b64      	cmp	r3, #100	; 0x64
 8002e64:	d901      	bls.n	8002e6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e1f3      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e6a:	4b51      	ldr	r3, [pc, #324]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d1f0      	bne.n	8002e58 <HAL_RCC_OscConfig+0xe8>
 8002e76:	e000      	b.n	8002e7a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d063      	beq.n	8002f4e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e86:	4b4a      	ldr	r3, [pc, #296]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f003 030c 	and.w	r3, r3, #12
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d00b      	beq.n	8002eaa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e92:	4b47      	ldr	r3, [pc, #284]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e9a:	2b08      	cmp	r3, #8
 8002e9c:	d11c      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e9e:	4b44      	ldr	r3, [pc, #272]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d116      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eaa:	4b41      	ldr	r3, [pc, #260]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0302 	and.w	r3, r3, #2
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d005      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x152>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d001      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e1c7      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ec2:	4b3b      	ldr	r3, [pc, #236]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	00db      	lsls	r3, r3, #3
 8002ed0:	4937      	ldr	r1, [pc, #220]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ed6:	e03a      	b.n	8002f4e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d020      	beq.n	8002f22 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ee0:	4b34      	ldr	r3, [pc, #208]	; (8002fb4 <HAL_RCC_OscConfig+0x244>)
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee6:	f7fe fff7 	bl	8001ed8 <HAL_GetTick>
 8002eea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eec:	e008      	b.n	8002f00 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002eee:	f7fe fff3 	bl	8001ed8 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d901      	bls.n	8002f00 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e1a8      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f00:	4b2b      	ldr	r3, [pc, #172]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0302 	and.w	r3, r3, #2
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d0f0      	beq.n	8002eee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f0c:	4b28      	ldr	r3, [pc, #160]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	691b      	ldr	r3, [r3, #16]
 8002f18:	00db      	lsls	r3, r3, #3
 8002f1a:	4925      	ldr	r1, [pc, #148]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	600b      	str	r3, [r1, #0]
 8002f20:	e015      	b.n	8002f4e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f22:	4b24      	ldr	r3, [pc, #144]	; (8002fb4 <HAL_RCC_OscConfig+0x244>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f28:	f7fe ffd6 	bl	8001ed8 <HAL_GetTick>
 8002f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f2e:	e008      	b.n	8002f42 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f30:	f7fe ffd2 	bl	8001ed8 <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e187      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f42:	4b1b      	ldr	r3, [pc, #108]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0302 	and.w	r3, r3, #2
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d1f0      	bne.n	8002f30 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0308 	and.w	r3, r3, #8
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d036      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	695b      	ldr	r3, [r3, #20]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d016      	beq.n	8002f90 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f62:	4b15      	ldr	r3, [pc, #84]	; (8002fb8 <HAL_RCC_OscConfig+0x248>)
 8002f64:	2201      	movs	r2, #1
 8002f66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f68:	f7fe ffb6 	bl	8001ed8 <HAL_GetTick>
 8002f6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f6e:	e008      	b.n	8002f82 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f70:	f7fe ffb2 	bl	8001ed8 <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d901      	bls.n	8002f82 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e167      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f82:	4b0b      	ldr	r3, [pc, #44]	; (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002f84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f86:	f003 0302 	and.w	r3, r3, #2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d0f0      	beq.n	8002f70 <HAL_RCC_OscConfig+0x200>
 8002f8e:	e01b      	b.n	8002fc8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f90:	4b09      	ldr	r3, [pc, #36]	; (8002fb8 <HAL_RCC_OscConfig+0x248>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f96:	f7fe ff9f 	bl	8001ed8 <HAL_GetTick>
 8002f9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f9c:	e00e      	b.n	8002fbc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f9e:	f7fe ff9b 	bl	8001ed8 <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d907      	bls.n	8002fbc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e150      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
 8002fb0:	40023800 	.word	0x40023800
 8002fb4:	42470000 	.word	0x42470000
 8002fb8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fbc:	4b88      	ldr	r3, [pc, #544]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 8002fbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fc0:	f003 0302 	and.w	r3, r3, #2
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d1ea      	bne.n	8002f9e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0304 	and.w	r3, r3, #4
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	f000 8097 	beq.w	8003104 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fda:	4b81      	ldr	r3, [pc, #516]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d10f      	bne.n	8003006 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	60bb      	str	r3, [r7, #8]
 8002fea:	4b7d      	ldr	r3, [pc, #500]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 8002fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fee:	4a7c      	ldr	r2, [pc, #496]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 8002ff0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ff4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ff6:	4b7a      	ldr	r3, [pc, #488]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ffe:	60bb      	str	r3, [r7, #8]
 8003000:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003002:	2301      	movs	r3, #1
 8003004:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003006:	4b77      	ldr	r3, [pc, #476]	; (80031e4 <HAL_RCC_OscConfig+0x474>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800300e:	2b00      	cmp	r3, #0
 8003010:	d118      	bne.n	8003044 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003012:	4b74      	ldr	r3, [pc, #464]	; (80031e4 <HAL_RCC_OscConfig+0x474>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a73      	ldr	r2, [pc, #460]	; (80031e4 <HAL_RCC_OscConfig+0x474>)
 8003018:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800301c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800301e:	f7fe ff5b 	bl	8001ed8 <HAL_GetTick>
 8003022:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003024:	e008      	b.n	8003038 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003026:	f7fe ff57 	bl	8001ed8 <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	2b02      	cmp	r3, #2
 8003032:	d901      	bls.n	8003038 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e10c      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003038:	4b6a      	ldr	r3, [pc, #424]	; (80031e4 <HAL_RCC_OscConfig+0x474>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003040:	2b00      	cmp	r3, #0
 8003042:	d0f0      	beq.n	8003026 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	2b01      	cmp	r3, #1
 800304a:	d106      	bne.n	800305a <HAL_RCC_OscConfig+0x2ea>
 800304c:	4b64      	ldr	r3, [pc, #400]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 800304e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003050:	4a63      	ldr	r2, [pc, #396]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 8003052:	f043 0301 	orr.w	r3, r3, #1
 8003056:	6713      	str	r3, [r2, #112]	; 0x70
 8003058:	e01c      	b.n	8003094 <HAL_RCC_OscConfig+0x324>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	2b05      	cmp	r3, #5
 8003060:	d10c      	bne.n	800307c <HAL_RCC_OscConfig+0x30c>
 8003062:	4b5f      	ldr	r3, [pc, #380]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 8003064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003066:	4a5e      	ldr	r2, [pc, #376]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 8003068:	f043 0304 	orr.w	r3, r3, #4
 800306c:	6713      	str	r3, [r2, #112]	; 0x70
 800306e:	4b5c      	ldr	r3, [pc, #368]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 8003070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003072:	4a5b      	ldr	r2, [pc, #364]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 8003074:	f043 0301 	orr.w	r3, r3, #1
 8003078:	6713      	str	r3, [r2, #112]	; 0x70
 800307a:	e00b      	b.n	8003094 <HAL_RCC_OscConfig+0x324>
 800307c:	4b58      	ldr	r3, [pc, #352]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 800307e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003080:	4a57      	ldr	r2, [pc, #348]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 8003082:	f023 0301 	bic.w	r3, r3, #1
 8003086:	6713      	str	r3, [r2, #112]	; 0x70
 8003088:	4b55      	ldr	r3, [pc, #340]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 800308a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800308c:	4a54      	ldr	r2, [pc, #336]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 800308e:	f023 0304 	bic.w	r3, r3, #4
 8003092:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d015      	beq.n	80030c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800309c:	f7fe ff1c 	bl	8001ed8 <HAL_GetTick>
 80030a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030a2:	e00a      	b.n	80030ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030a4:	f7fe ff18 	bl	8001ed8 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d901      	bls.n	80030ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e0cb      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030ba:	4b49      	ldr	r3, [pc, #292]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 80030bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030be:	f003 0302 	and.w	r3, r3, #2
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d0ee      	beq.n	80030a4 <HAL_RCC_OscConfig+0x334>
 80030c6:	e014      	b.n	80030f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030c8:	f7fe ff06 	bl	8001ed8 <HAL_GetTick>
 80030cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030ce:	e00a      	b.n	80030e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030d0:	f7fe ff02 	bl	8001ed8 <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	f241 3288 	movw	r2, #5000	; 0x1388
 80030de:	4293      	cmp	r3, r2
 80030e0:	d901      	bls.n	80030e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e0b5      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030e6:	4b3e      	ldr	r3, [pc, #248]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 80030e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ea:	f003 0302 	and.w	r3, r3, #2
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d1ee      	bne.n	80030d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030f2:	7dfb      	ldrb	r3, [r7, #23]
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d105      	bne.n	8003104 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030f8:	4b39      	ldr	r3, [pc, #228]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 80030fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fc:	4a38      	ldr	r2, [pc, #224]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 80030fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003102:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	699b      	ldr	r3, [r3, #24]
 8003108:	2b00      	cmp	r3, #0
 800310a:	f000 80a1 	beq.w	8003250 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800310e:	4b34      	ldr	r3, [pc, #208]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f003 030c 	and.w	r3, r3, #12
 8003116:	2b08      	cmp	r3, #8
 8003118:	d05c      	beq.n	80031d4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	699b      	ldr	r3, [r3, #24]
 800311e:	2b02      	cmp	r3, #2
 8003120:	d141      	bne.n	80031a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003122:	4b31      	ldr	r3, [pc, #196]	; (80031e8 <HAL_RCC_OscConfig+0x478>)
 8003124:	2200      	movs	r2, #0
 8003126:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003128:	f7fe fed6 	bl	8001ed8 <HAL_GetTick>
 800312c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800312e:	e008      	b.n	8003142 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003130:	f7fe fed2 	bl	8001ed8 <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	2b02      	cmp	r3, #2
 800313c:	d901      	bls.n	8003142 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e087      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003142:	4b27      	ldr	r3, [pc, #156]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d1f0      	bne.n	8003130 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	69da      	ldr	r2, [r3, #28]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a1b      	ldr	r3, [r3, #32]
 8003156:	431a      	orrs	r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315c:	019b      	lsls	r3, r3, #6
 800315e:	431a      	orrs	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003164:	085b      	lsrs	r3, r3, #1
 8003166:	3b01      	subs	r3, #1
 8003168:	041b      	lsls	r3, r3, #16
 800316a:	431a      	orrs	r2, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003170:	061b      	lsls	r3, r3, #24
 8003172:	491b      	ldr	r1, [pc, #108]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 8003174:	4313      	orrs	r3, r2
 8003176:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003178:	4b1b      	ldr	r3, [pc, #108]	; (80031e8 <HAL_RCC_OscConfig+0x478>)
 800317a:	2201      	movs	r2, #1
 800317c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800317e:	f7fe feab 	bl	8001ed8 <HAL_GetTick>
 8003182:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003184:	e008      	b.n	8003198 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003186:	f7fe fea7 	bl	8001ed8 <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	2b02      	cmp	r3, #2
 8003192:	d901      	bls.n	8003198 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e05c      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003198:	4b11      	ldr	r3, [pc, #68]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d0f0      	beq.n	8003186 <HAL_RCC_OscConfig+0x416>
 80031a4:	e054      	b.n	8003250 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031a6:	4b10      	ldr	r3, [pc, #64]	; (80031e8 <HAL_RCC_OscConfig+0x478>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ac:	f7fe fe94 	bl	8001ed8 <HAL_GetTick>
 80031b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031b2:	e008      	b.n	80031c6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031b4:	f7fe fe90 	bl	8001ed8 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e045      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031c6:	4b06      	ldr	r3, [pc, #24]	; (80031e0 <HAL_RCC_OscConfig+0x470>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d1f0      	bne.n	80031b4 <HAL_RCC_OscConfig+0x444>
 80031d2:	e03d      	b.n	8003250 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	699b      	ldr	r3, [r3, #24]
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d107      	bne.n	80031ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e038      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
 80031e0:	40023800 	.word	0x40023800
 80031e4:	40007000 	.word	0x40007000
 80031e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031ec:	4b1b      	ldr	r3, [pc, #108]	; (800325c <HAL_RCC_OscConfig+0x4ec>)
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	699b      	ldr	r3, [r3, #24]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d028      	beq.n	800324c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003204:	429a      	cmp	r2, r3
 8003206:	d121      	bne.n	800324c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003212:	429a      	cmp	r2, r3
 8003214:	d11a      	bne.n	800324c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003216:	68fa      	ldr	r2, [r7, #12]
 8003218:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800321c:	4013      	ands	r3, r2
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003222:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003224:	4293      	cmp	r3, r2
 8003226:	d111      	bne.n	800324c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003232:	085b      	lsrs	r3, r3, #1
 8003234:	3b01      	subs	r3, #1
 8003236:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003238:	429a      	cmp	r2, r3
 800323a:	d107      	bne.n	800324c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003246:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003248:	429a      	cmp	r2, r3
 800324a:	d001      	beq.n	8003250 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e000      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3718      	adds	r7, #24
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	40023800 	.word	0x40023800

08003260 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d101      	bne.n	8003274 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e0cc      	b.n	800340e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003274:	4b68      	ldr	r3, [pc, #416]	; (8003418 <HAL_RCC_ClockConfig+0x1b8>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 030f 	and.w	r3, r3, #15
 800327c:	683a      	ldr	r2, [r7, #0]
 800327e:	429a      	cmp	r2, r3
 8003280:	d90c      	bls.n	800329c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003282:	4b65      	ldr	r3, [pc, #404]	; (8003418 <HAL_RCC_ClockConfig+0x1b8>)
 8003284:	683a      	ldr	r2, [r7, #0]
 8003286:	b2d2      	uxtb	r2, r2
 8003288:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800328a:	4b63      	ldr	r3, [pc, #396]	; (8003418 <HAL_RCC_ClockConfig+0x1b8>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 030f 	and.w	r3, r3, #15
 8003292:	683a      	ldr	r2, [r7, #0]
 8003294:	429a      	cmp	r2, r3
 8003296:	d001      	beq.n	800329c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e0b8      	b.n	800340e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0302 	and.w	r3, r3, #2
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d020      	beq.n	80032ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0304 	and.w	r3, r3, #4
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d005      	beq.n	80032c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032b4:	4b59      	ldr	r3, [pc, #356]	; (800341c <HAL_RCC_ClockConfig+0x1bc>)
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	4a58      	ldr	r2, [pc, #352]	; (800341c <HAL_RCC_ClockConfig+0x1bc>)
 80032ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80032be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0308 	and.w	r3, r3, #8
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d005      	beq.n	80032d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032cc:	4b53      	ldr	r3, [pc, #332]	; (800341c <HAL_RCC_ClockConfig+0x1bc>)
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	4a52      	ldr	r2, [pc, #328]	; (800341c <HAL_RCC_ClockConfig+0x1bc>)
 80032d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80032d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032d8:	4b50      	ldr	r3, [pc, #320]	; (800341c <HAL_RCC_ClockConfig+0x1bc>)
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	494d      	ldr	r1, [pc, #308]	; (800341c <HAL_RCC_ClockConfig+0x1bc>)
 80032e6:	4313      	orrs	r3, r2
 80032e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d044      	beq.n	8003380 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d107      	bne.n	800330e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032fe:	4b47      	ldr	r3, [pc, #284]	; (800341c <HAL_RCC_ClockConfig+0x1bc>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d119      	bne.n	800333e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e07f      	b.n	800340e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	2b02      	cmp	r3, #2
 8003314:	d003      	beq.n	800331e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800331a:	2b03      	cmp	r3, #3
 800331c:	d107      	bne.n	800332e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800331e:	4b3f      	ldr	r3, [pc, #252]	; (800341c <HAL_RCC_ClockConfig+0x1bc>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d109      	bne.n	800333e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e06f      	b.n	800340e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800332e:	4b3b      	ldr	r3, [pc, #236]	; (800341c <HAL_RCC_ClockConfig+0x1bc>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0302 	and.w	r3, r3, #2
 8003336:	2b00      	cmp	r3, #0
 8003338:	d101      	bne.n	800333e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e067      	b.n	800340e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800333e:	4b37      	ldr	r3, [pc, #220]	; (800341c <HAL_RCC_ClockConfig+0x1bc>)
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	f023 0203 	bic.w	r2, r3, #3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	4934      	ldr	r1, [pc, #208]	; (800341c <HAL_RCC_ClockConfig+0x1bc>)
 800334c:	4313      	orrs	r3, r2
 800334e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003350:	f7fe fdc2 	bl	8001ed8 <HAL_GetTick>
 8003354:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003356:	e00a      	b.n	800336e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003358:	f7fe fdbe 	bl	8001ed8 <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	f241 3288 	movw	r2, #5000	; 0x1388
 8003366:	4293      	cmp	r3, r2
 8003368:	d901      	bls.n	800336e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e04f      	b.n	800340e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800336e:	4b2b      	ldr	r3, [pc, #172]	; (800341c <HAL_RCC_ClockConfig+0x1bc>)
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f003 020c 	and.w	r2, r3, #12
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	429a      	cmp	r2, r3
 800337e:	d1eb      	bne.n	8003358 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003380:	4b25      	ldr	r3, [pc, #148]	; (8003418 <HAL_RCC_ClockConfig+0x1b8>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 030f 	and.w	r3, r3, #15
 8003388:	683a      	ldr	r2, [r7, #0]
 800338a:	429a      	cmp	r2, r3
 800338c:	d20c      	bcs.n	80033a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800338e:	4b22      	ldr	r3, [pc, #136]	; (8003418 <HAL_RCC_ClockConfig+0x1b8>)
 8003390:	683a      	ldr	r2, [r7, #0]
 8003392:	b2d2      	uxtb	r2, r2
 8003394:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003396:	4b20      	ldr	r3, [pc, #128]	; (8003418 <HAL_RCC_ClockConfig+0x1b8>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 030f 	and.w	r3, r3, #15
 800339e:	683a      	ldr	r2, [r7, #0]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d001      	beq.n	80033a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e032      	b.n	800340e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0304 	and.w	r3, r3, #4
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d008      	beq.n	80033c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033b4:	4b19      	ldr	r3, [pc, #100]	; (800341c <HAL_RCC_ClockConfig+0x1bc>)
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	4916      	ldr	r1, [pc, #88]	; (800341c <HAL_RCC_ClockConfig+0x1bc>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0308 	and.w	r3, r3, #8
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d009      	beq.n	80033e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033d2:	4b12      	ldr	r3, [pc, #72]	; (800341c <HAL_RCC_ClockConfig+0x1bc>)
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	00db      	lsls	r3, r3, #3
 80033e0:	490e      	ldr	r1, [pc, #56]	; (800341c <HAL_RCC_ClockConfig+0x1bc>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033e6:	f000 f821 	bl	800342c <HAL_RCC_GetSysClockFreq>
 80033ea:	4602      	mov	r2, r0
 80033ec:	4b0b      	ldr	r3, [pc, #44]	; (800341c <HAL_RCC_ClockConfig+0x1bc>)
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	091b      	lsrs	r3, r3, #4
 80033f2:	f003 030f 	and.w	r3, r3, #15
 80033f6:	490a      	ldr	r1, [pc, #40]	; (8003420 <HAL_RCC_ClockConfig+0x1c0>)
 80033f8:	5ccb      	ldrb	r3, [r1, r3]
 80033fa:	fa22 f303 	lsr.w	r3, r2, r3
 80033fe:	4a09      	ldr	r2, [pc, #36]	; (8003424 <HAL_RCC_ClockConfig+0x1c4>)
 8003400:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003402:	4b09      	ldr	r3, [pc, #36]	; (8003428 <HAL_RCC_ClockConfig+0x1c8>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4618      	mov	r0, r3
 8003408:	f7fe fd22 	bl	8001e50 <HAL_InitTick>

  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3710      	adds	r7, #16
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	40023c00 	.word	0x40023c00
 800341c:	40023800 	.word	0x40023800
 8003420:	08009e54 	.word	0x08009e54
 8003424:	20000000 	.word	0x20000000
 8003428:	20000004 	.word	0x20000004

0800342c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800342c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003430:	b094      	sub	sp, #80	; 0x50
 8003432:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003434:	2300      	movs	r3, #0
 8003436:	647b      	str	r3, [r7, #68]	; 0x44
 8003438:	2300      	movs	r3, #0
 800343a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800343c:	2300      	movs	r3, #0
 800343e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003440:	2300      	movs	r3, #0
 8003442:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003444:	4b79      	ldr	r3, [pc, #484]	; (800362c <HAL_RCC_GetSysClockFreq+0x200>)
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	f003 030c 	and.w	r3, r3, #12
 800344c:	2b08      	cmp	r3, #8
 800344e:	d00d      	beq.n	800346c <HAL_RCC_GetSysClockFreq+0x40>
 8003450:	2b08      	cmp	r3, #8
 8003452:	f200 80e1 	bhi.w	8003618 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003456:	2b00      	cmp	r3, #0
 8003458:	d002      	beq.n	8003460 <HAL_RCC_GetSysClockFreq+0x34>
 800345a:	2b04      	cmp	r3, #4
 800345c:	d003      	beq.n	8003466 <HAL_RCC_GetSysClockFreq+0x3a>
 800345e:	e0db      	b.n	8003618 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003460:	4b73      	ldr	r3, [pc, #460]	; (8003630 <HAL_RCC_GetSysClockFreq+0x204>)
 8003462:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003464:	e0db      	b.n	800361e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003466:	4b73      	ldr	r3, [pc, #460]	; (8003634 <HAL_RCC_GetSysClockFreq+0x208>)
 8003468:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800346a:	e0d8      	b.n	800361e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800346c:	4b6f      	ldr	r3, [pc, #444]	; (800362c <HAL_RCC_GetSysClockFreq+0x200>)
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003474:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003476:	4b6d      	ldr	r3, [pc, #436]	; (800362c <HAL_RCC_GetSysClockFreq+0x200>)
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d063      	beq.n	800354a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003482:	4b6a      	ldr	r3, [pc, #424]	; (800362c <HAL_RCC_GetSysClockFreq+0x200>)
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	099b      	lsrs	r3, r3, #6
 8003488:	2200      	movs	r2, #0
 800348a:	63bb      	str	r3, [r7, #56]	; 0x38
 800348c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800348e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003490:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003494:	633b      	str	r3, [r7, #48]	; 0x30
 8003496:	2300      	movs	r3, #0
 8003498:	637b      	str	r3, [r7, #52]	; 0x34
 800349a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800349e:	4622      	mov	r2, r4
 80034a0:	462b      	mov	r3, r5
 80034a2:	f04f 0000 	mov.w	r0, #0
 80034a6:	f04f 0100 	mov.w	r1, #0
 80034aa:	0159      	lsls	r1, r3, #5
 80034ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034b0:	0150      	lsls	r0, r2, #5
 80034b2:	4602      	mov	r2, r0
 80034b4:	460b      	mov	r3, r1
 80034b6:	4621      	mov	r1, r4
 80034b8:	1a51      	subs	r1, r2, r1
 80034ba:	6139      	str	r1, [r7, #16]
 80034bc:	4629      	mov	r1, r5
 80034be:	eb63 0301 	sbc.w	r3, r3, r1
 80034c2:	617b      	str	r3, [r7, #20]
 80034c4:	f04f 0200 	mov.w	r2, #0
 80034c8:	f04f 0300 	mov.w	r3, #0
 80034cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80034d0:	4659      	mov	r1, fp
 80034d2:	018b      	lsls	r3, r1, #6
 80034d4:	4651      	mov	r1, sl
 80034d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80034da:	4651      	mov	r1, sl
 80034dc:	018a      	lsls	r2, r1, #6
 80034de:	4651      	mov	r1, sl
 80034e0:	ebb2 0801 	subs.w	r8, r2, r1
 80034e4:	4659      	mov	r1, fp
 80034e6:	eb63 0901 	sbc.w	r9, r3, r1
 80034ea:	f04f 0200 	mov.w	r2, #0
 80034ee:	f04f 0300 	mov.w	r3, #0
 80034f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034fe:	4690      	mov	r8, r2
 8003500:	4699      	mov	r9, r3
 8003502:	4623      	mov	r3, r4
 8003504:	eb18 0303 	adds.w	r3, r8, r3
 8003508:	60bb      	str	r3, [r7, #8]
 800350a:	462b      	mov	r3, r5
 800350c:	eb49 0303 	adc.w	r3, r9, r3
 8003510:	60fb      	str	r3, [r7, #12]
 8003512:	f04f 0200 	mov.w	r2, #0
 8003516:	f04f 0300 	mov.w	r3, #0
 800351a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800351e:	4629      	mov	r1, r5
 8003520:	024b      	lsls	r3, r1, #9
 8003522:	4621      	mov	r1, r4
 8003524:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003528:	4621      	mov	r1, r4
 800352a:	024a      	lsls	r2, r1, #9
 800352c:	4610      	mov	r0, r2
 800352e:	4619      	mov	r1, r3
 8003530:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003532:	2200      	movs	r2, #0
 8003534:	62bb      	str	r3, [r7, #40]	; 0x28
 8003536:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003538:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800353c:	f7fd fbb4 	bl	8000ca8 <__aeabi_uldivmod>
 8003540:	4602      	mov	r2, r0
 8003542:	460b      	mov	r3, r1
 8003544:	4613      	mov	r3, r2
 8003546:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003548:	e058      	b.n	80035fc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800354a:	4b38      	ldr	r3, [pc, #224]	; (800362c <HAL_RCC_GetSysClockFreq+0x200>)
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	099b      	lsrs	r3, r3, #6
 8003550:	2200      	movs	r2, #0
 8003552:	4618      	mov	r0, r3
 8003554:	4611      	mov	r1, r2
 8003556:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800355a:	623b      	str	r3, [r7, #32]
 800355c:	2300      	movs	r3, #0
 800355e:	627b      	str	r3, [r7, #36]	; 0x24
 8003560:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003564:	4642      	mov	r2, r8
 8003566:	464b      	mov	r3, r9
 8003568:	f04f 0000 	mov.w	r0, #0
 800356c:	f04f 0100 	mov.w	r1, #0
 8003570:	0159      	lsls	r1, r3, #5
 8003572:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003576:	0150      	lsls	r0, r2, #5
 8003578:	4602      	mov	r2, r0
 800357a:	460b      	mov	r3, r1
 800357c:	4641      	mov	r1, r8
 800357e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003582:	4649      	mov	r1, r9
 8003584:	eb63 0b01 	sbc.w	fp, r3, r1
 8003588:	f04f 0200 	mov.w	r2, #0
 800358c:	f04f 0300 	mov.w	r3, #0
 8003590:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003594:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003598:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800359c:	ebb2 040a 	subs.w	r4, r2, sl
 80035a0:	eb63 050b 	sbc.w	r5, r3, fp
 80035a4:	f04f 0200 	mov.w	r2, #0
 80035a8:	f04f 0300 	mov.w	r3, #0
 80035ac:	00eb      	lsls	r3, r5, #3
 80035ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035b2:	00e2      	lsls	r2, r4, #3
 80035b4:	4614      	mov	r4, r2
 80035b6:	461d      	mov	r5, r3
 80035b8:	4643      	mov	r3, r8
 80035ba:	18e3      	adds	r3, r4, r3
 80035bc:	603b      	str	r3, [r7, #0]
 80035be:	464b      	mov	r3, r9
 80035c0:	eb45 0303 	adc.w	r3, r5, r3
 80035c4:	607b      	str	r3, [r7, #4]
 80035c6:	f04f 0200 	mov.w	r2, #0
 80035ca:	f04f 0300 	mov.w	r3, #0
 80035ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80035d2:	4629      	mov	r1, r5
 80035d4:	028b      	lsls	r3, r1, #10
 80035d6:	4621      	mov	r1, r4
 80035d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80035dc:	4621      	mov	r1, r4
 80035de:	028a      	lsls	r2, r1, #10
 80035e0:	4610      	mov	r0, r2
 80035e2:	4619      	mov	r1, r3
 80035e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035e6:	2200      	movs	r2, #0
 80035e8:	61bb      	str	r3, [r7, #24]
 80035ea:	61fa      	str	r2, [r7, #28]
 80035ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035f0:	f7fd fb5a 	bl	8000ca8 <__aeabi_uldivmod>
 80035f4:	4602      	mov	r2, r0
 80035f6:	460b      	mov	r3, r1
 80035f8:	4613      	mov	r3, r2
 80035fa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80035fc:	4b0b      	ldr	r3, [pc, #44]	; (800362c <HAL_RCC_GetSysClockFreq+0x200>)
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	0c1b      	lsrs	r3, r3, #16
 8003602:	f003 0303 	and.w	r3, r3, #3
 8003606:	3301      	adds	r3, #1
 8003608:	005b      	lsls	r3, r3, #1
 800360a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800360c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800360e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003610:	fbb2 f3f3 	udiv	r3, r2, r3
 8003614:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003616:	e002      	b.n	800361e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003618:	4b05      	ldr	r3, [pc, #20]	; (8003630 <HAL_RCC_GetSysClockFreq+0x204>)
 800361a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800361c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800361e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003620:	4618      	mov	r0, r3
 8003622:	3750      	adds	r7, #80	; 0x50
 8003624:	46bd      	mov	sp, r7
 8003626:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800362a:	bf00      	nop
 800362c:	40023800 	.word	0x40023800
 8003630:	00f42400 	.word	0x00f42400
 8003634:	007a1200 	.word	0x007a1200

08003638 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003638:	b480      	push	{r7}
 800363a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800363c:	4b03      	ldr	r3, [pc, #12]	; (800364c <HAL_RCC_GetHCLKFreq+0x14>)
 800363e:	681b      	ldr	r3, [r3, #0]
}
 8003640:	4618      	mov	r0, r3
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr
 800364a:	bf00      	nop
 800364c:	20000000 	.word	0x20000000

08003650 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003654:	f7ff fff0 	bl	8003638 <HAL_RCC_GetHCLKFreq>
 8003658:	4602      	mov	r2, r0
 800365a:	4b05      	ldr	r3, [pc, #20]	; (8003670 <HAL_RCC_GetPCLK1Freq+0x20>)
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	0a9b      	lsrs	r3, r3, #10
 8003660:	f003 0307 	and.w	r3, r3, #7
 8003664:	4903      	ldr	r1, [pc, #12]	; (8003674 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003666:	5ccb      	ldrb	r3, [r1, r3]
 8003668:	fa22 f303 	lsr.w	r3, r2, r3
}
 800366c:	4618      	mov	r0, r3
 800366e:	bd80      	pop	{r7, pc}
 8003670:	40023800 	.word	0x40023800
 8003674:	08009e64 	.word	0x08009e64

08003678 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800367c:	f7ff ffdc 	bl	8003638 <HAL_RCC_GetHCLKFreq>
 8003680:	4602      	mov	r2, r0
 8003682:	4b05      	ldr	r3, [pc, #20]	; (8003698 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	0b5b      	lsrs	r3, r3, #13
 8003688:	f003 0307 	and.w	r3, r3, #7
 800368c:	4903      	ldr	r1, [pc, #12]	; (800369c <HAL_RCC_GetPCLK2Freq+0x24>)
 800368e:	5ccb      	ldrb	r3, [r1, r3]
 8003690:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003694:	4618      	mov	r0, r3
 8003696:	bd80      	pop	{r7, pc}
 8003698:	40023800 	.word	0x40023800
 800369c:	08009e64 	.word	0x08009e64

080036a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b082      	sub	sp, #8
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d101      	bne.n	80036b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e041      	b.n	8003736 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d106      	bne.n	80036cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f7fe f994 	bl	80019f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2202      	movs	r2, #2
 80036d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	3304      	adds	r3, #4
 80036dc:	4619      	mov	r1, r3
 80036de:	4610      	mov	r0, r2
 80036e0:	f000 fc86 	bl	8003ff0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003734:	2300      	movs	r3, #0
}
 8003736:	4618      	mov	r0, r3
 8003738:	3708      	adds	r7, #8
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}

0800373e <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800373e:	b580      	push	{r7, lr}
 8003740:	b082      	sub	sp, #8
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d101      	bne.n	8003750 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e041      	b.n	80037d4 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003756:	b2db      	uxtb	r3, r3
 8003758:	2b00      	cmp	r3, #0
 800375a:	d106      	bne.n	800376a <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f000 f839 	bl	80037dc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2202      	movs	r2, #2
 800376e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	3304      	adds	r3, #4
 800377a:	4619      	mov	r1, r3
 800377c:	4610      	mov	r0, r2
 800377e:	f000 fc37 	bl	8003ff0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2201      	movs	r2, #1
 8003786:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2201      	movs	r2, #1
 800378e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2201      	movs	r2, #1
 8003796:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2201      	movs	r2, #1
 800379e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2201      	movs	r2, #1
 80037a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2201      	movs	r2, #1
 80037ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2201      	movs	r2, #1
 80037b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2201      	movs	r2, #1
 80037be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2201      	movs	r2, #1
 80037c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2201      	movs	r2, #1
 80037ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037d2:	2300      	movs	r3, #0
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3708      	adds	r7, #8
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80037e4:	bf00      	nop
 80037e6:	370c      	adds	r7, #12
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037fa:	2300      	movs	r3, #0
 80037fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d104      	bne.n	800380e <HAL_TIM_IC_Start_IT+0x1e>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800380a:	b2db      	uxtb	r3, r3
 800380c:	e013      	b.n	8003836 <HAL_TIM_IC_Start_IT+0x46>
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	2b04      	cmp	r3, #4
 8003812:	d104      	bne.n	800381e <HAL_TIM_IC_Start_IT+0x2e>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800381a:	b2db      	uxtb	r3, r3
 800381c:	e00b      	b.n	8003836 <HAL_TIM_IC_Start_IT+0x46>
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	2b08      	cmp	r3, #8
 8003822:	d104      	bne.n	800382e <HAL_TIM_IC_Start_IT+0x3e>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800382a:	b2db      	uxtb	r3, r3
 800382c:	e003      	b.n	8003836 <HAL_TIM_IC_Start_IT+0x46>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003834:	b2db      	uxtb	r3, r3
 8003836:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d104      	bne.n	8003848 <HAL_TIM_IC_Start_IT+0x58>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003844:	b2db      	uxtb	r3, r3
 8003846:	e013      	b.n	8003870 <HAL_TIM_IC_Start_IT+0x80>
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	2b04      	cmp	r3, #4
 800384c:	d104      	bne.n	8003858 <HAL_TIM_IC_Start_IT+0x68>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003854:	b2db      	uxtb	r3, r3
 8003856:	e00b      	b.n	8003870 <HAL_TIM_IC_Start_IT+0x80>
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	2b08      	cmp	r3, #8
 800385c:	d104      	bne.n	8003868 <HAL_TIM_IC_Start_IT+0x78>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003864:	b2db      	uxtb	r3, r3
 8003866:	e003      	b.n	8003870 <HAL_TIM_IC_Start_IT+0x80>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800386e:	b2db      	uxtb	r3, r3
 8003870:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003872:	7bbb      	ldrb	r3, [r7, #14]
 8003874:	2b01      	cmp	r3, #1
 8003876:	d102      	bne.n	800387e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003878:	7b7b      	ldrb	r3, [r7, #13]
 800387a:	2b01      	cmp	r3, #1
 800387c:	d001      	beq.n	8003882 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e0cc      	b.n	8003a1c <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d104      	bne.n	8003892 <HAL_TIM_IC_Start_IT+0xa2>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2202      	movs	r2, #2
 800388c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003890:	e013      	b.n	80038ba <HAL_TIM_IC_Start_IT+0xca>
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	2b04      	cmp	r3, #4
 8003896:	d104      	bne.n	80038a2 <HAL_TIM_IC_Start_IT+0xb2>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2202      	movs	r2, #2
 800389c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038a0:	e00b      	b.n	80038ba <HAL_TIM_IC_Start_IT+0xca>
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	2b08      	cmp	r3, #8
 80038a6:	d104      	bne.n	80038b2 <HAL_TIM_IC_Start_IT+0xc2>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2202      	movs	r2, #2
 80038ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038b0:	e003      	b.n	80038ba <HAL_TIM_IC_Start_IT+0xca>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2202      	movs	r2, #2
 80038b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d104      	bne.n	80038ca <HAL_TIM_IC_Start_IT+0xda>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2202      	movs	r2, #2
 80038c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038c8:	e013      	b.n	80038f2 <HAL_TIM_IC_Start_IT+0x102>
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	2b04      	cmp	r3, #4
 80038ce:	d104      	bne.n	80038da <HAL_TIM_IC_Start_IT+0xea>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2202      	movs	r2, #2
 80038d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038d8:	e00b      	b.n	80038f2 <HAL_TIM_IC_Start_IT+0x102>
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	2b08      	cmp	r3, #8
 80038de:	d104      	bne.n	80038ea <HAL_TIM_IC_Start_IT+0xfa>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2202      	movs	r2, #2
 80038e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038e8:	e003      	b.n	80038f2 <HAL_TIM_IC_Start_IT+0x102>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2202      	movs	r2, #2
 80038ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	2b0c      	cmp	r3, #12
 80038f6:	d841      	bhi.n	800397c <HAL_TIM_IC_Start_IT+0x18c>
 80038f8:	a201      	add	r2, pc, #4	; (adr r2, 8003900 <HAL_TIM_IC_Start_IT+0x110>)
 80038fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038fe:	bf00      	nop
 8003900:	08003935 	.word	0x08003935
 8003904:	0800397d 	.word	0x0800397d
 8003908:	0800397d 	.word	0x0800397d
 800390c:	0800397d 	.word	0x0800397d
 8003910:	08003947 	.word	0x08003947
 8003914:	0800397d 	.word	0x0800397d
 8003918:	0800397d 	.word	0x0800397d
 800391c:	0800397d 	.word	0x0800397d
 8003920:	08003959 	.word	0x08003959
 8003924:	0800397d 	.word	0x0800397d
 8003928:	0800397d 	.word	0x0800397d
 800392c:	0800397d 	.word	0x0800397d
 8003930:	0800396b 	.word	0x0800396b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68da      	ldr	r2, [r3, #12]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f042 0202 	orr.w	r2, r2, #2
 8003942:	60da      	str	r2, [r3, #12]
      break;
 8003944:	e01d      	b.n	8003982 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	68da      	ldr	r2, [r3, #12]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f042 0204 	orr.w	r2, r2, #4
 8003954:	60da      	str	r2, [r3, #12]
      break;
 8003956:	e014      	b.n	8003982 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68da      	ldr	r2, [r3, #12]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f042 0208 	orr.w	r2, r2, #8
 8003966:	60da      	str	r2, [r3, #12]
      break;
 8003968:	e00b      	b.n	8003982 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	68da      	ldr	r2, [r3, #12]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f042 0210 	orr.w	r2, r2, #16
 8003978:	60da      	str	r2, [r3, #12]
      break;
 800397a:	e002      	b.n	8003982 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	73fb      	strb	r3, [r7, #15]
      break;
 8003980:	bf00      	nop
  }

  if (status == HAL_OK)
 8003982:	7bfb      	ldrb	r3, [r7, #15]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d148      	bne.n	8003a1a <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2201      	movs	r2, #1
 800398e:	6839      	ldr	r1, [r7, #0]
 8003990:	4618      	mov	r0, r3
 8003992:	f000 fd91 	bl	80044b8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a22      	ldr	r2, [pc, #136]	; (8003a24 <HAL_TIM_IC_Start_IT+0x234>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d022      	beq.n	80039e6 <HAL_TIM_IC_Start_IT+0x1f6>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039a8:	d01d      	beq.n	80039e6 <HAL_TIM_IC_Start_IT+0x1f6>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a1e      	ldr	r2, [pc, #120]	; (8003a28 <HAL_TIM_IC_Start_IT+0x238>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d018      	beq.n	80039e6 <HAL_TIM_IC_Start_IT+0x1f6>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a1c      	ldr	r2, [pc, #112]	; (8003a2c <HAL_TIM_IC_Start_IT+0x23c>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d013      	beq.n	80039e6 <HAL_TIM_IC_Start_IT+0x1f6>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a1b      	ldr	r2, [pc, #108]	; (8003a30 <HAL_TIM_IC_Start_IT+0x240>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d00e      	beq.n	80039e6 <HAL_TIM_IC_Start_IT+0x1f6>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a19      	ldr	r2, [pc, #100]	; (8003a34 <HAL_TIM_IC_Start_IT+0x244>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d009      	beq.n	80039e6 <HAL_TIM_IC_Start_IT+0x1f6>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a18      	ldr	r2, [pc, #96]	; (8003a38 <HAL_TIM_IC_Start_IT+0x248>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d004      	beq.n	80039e6 <HAL_TIM_IC_Start_IT+0x1f6>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a16      	ldr	r2, [pc, #88]	; (8003a3c <HAL_TIM_IC_Start_IT+0x24c>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d111      	bne.n	8003a0a <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	f003 0307 	and.w	r3, r3, #7
 80039f0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	2b06      	cmp	r3, #6
 80039f6:	d010      	beq.n	8003a1a <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f042 0201 	orr.w	r2, r2, #1
 8003a06:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a08:	e007      	b.n	8003a1a <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f042 0201 	orr.w	r2, r2, #1
 8003a18:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003a1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3710      	adds	r7, #16
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	40010000 	.word	0x40010000
 8003a28:	40000400 	.word	0x40000400
 8003a2c:	40000800 	.word	0x40000800
 8003a30:	40000c00 	.word	0x40000c00
 8003a34:	40010400 	.word	0x40010400
 8003a38:	40014000 	.word	0x40014000
 8003a3c:	40001800 	.word	0x40001800

08003a40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	691b      	ldr	r3, [r3, #16]
 8003a4e:	f003 0302 	and.w	r3, r3, #2
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d122      	bne.n	8003a9c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	f003 0302 	and.w	r3, r3, #2
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	d11b      	bne.n	8003a9c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f06f 0202 	mvn.w	r2, #2
 8003a6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2201      	movs	r2, #1
 8003a72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	699b      	ldr	r3, [r3, #24]
 8003a7a:	f003 0303 	and.w	r3, r3, #3
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d003      	beq.n	8003a8a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f7fd fae4 	bl	8001050 <HAL_TIM_IC_CaptureCallback>
 8003a88:	e005      	b.n	8003a96 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f000 fa92 	bl	8003fb4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f000 fa99 	bl	8003fc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	f003 0304 	and.w	r3, r3, #4
 8003aa6:	2b04      	cmp	r3, #4
 8003aa8:	d122      	bne.n	8003af0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	f003 0304 	and.w	r3, r3, #4
 8003ab4:	2b04      	cmp	r3, #4
 8003ab6:	d11b      	bne.n	8003af0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f06f 0204 	mvn.w	r2, #4
 8003ac0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2202      	movs	r2, #2
 8003ac6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	699b      	ldr	r3, [r3, #24]
 8003ace:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d003      	beq.n	8003ade <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f7fd faba 	bl	8001050 <HAL_TIM_IC_CaptureCallback>
 8003adc:	e005      	b.n	8003aea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f000 fa68 	bl	8003fb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f000 fa6f 	bl	8003fc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	f003 0308 	and.w	r3, r3, #8
 8003afa:	2b08      	cmp	r3, #8
 8003afc:	d122      	bne.n	8003b44 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	f003 0308 	and.w	r3, r3, #8
 8003b08:	2b08      	cmp	r3, #8
 8003b0a:	d11b      	bne.n	8003b44 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f06f 0208 	mvn.w	r2, #8
 8003b14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2204      	movs	r2, #4
 8003b1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	69db      	ldr	r3, [r3, #28]
 8003b22:	f003 0303 	and.w	r3, r3, #3
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d003      	beq.n	8003b32 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f7fd fa90 	bl	8001050 <HAL_TIM_IC_CaptureCallback>
 8003b30:	e005      	b.n	8003b3e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f000 fa3e 	bl	8003fb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f000 fa45 	bl	8003fc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	f003 0310 	and.w	r3, r3, #16
 8003b4e:	2b10      	cmp	r3, #16
 8003b50:	d122      	bne.n	8003b98 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	f003 0310 	and.w	r3, r3, #16
 8003b5c:	2b10      	cmp	r3, #16
 8003b5e:	d11b      	bne.n	8003b98 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f06f 0210 	mvn.w	r2, #16
 8003b68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2208      	movs	r2, #8
 8003b6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	69db      	ldr	r3, [r3, #28]
 8003b76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d003      	beq.n	8003b86 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f7fd fa66 	bl	8001050 <HAL_TIM_IC_CaptureCallback>
 8003b84:	e005      	b.n	8003b92 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f000 fa14 	bl	8003fb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f000 fa1b 	bl	8003fc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	f003 0301 	and.w	r3, r3, #1
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d10e      	bne.n	8003bc4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	f003 0301 	and.w	r3, r3, #1
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d107      	bne.n	8003bc4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f06f 0201 	mvn.w	r2, #1
 8003bbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 f9ee 	bl	8003fa0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bce:	2b80      	cmp	r3, #128	; 0x80
 8003bd0:	d10e      	bne.n	8003bf0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bdc:	2b80      	cmp	r3, #128	; 0x80
 8003bde:	d107      	bne.n	8003bf0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003be8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f000 fd10 	bl	8004610 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	691b      	ldr	r3, [r3, #16]
 8003bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bfa:	2b40      	cmp	r3, #64	; 0x40
 8003bfc:	d10e      	bne.n	8003c1c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c08:	2b40      	cmp	r3, #64	; 0x40
 8003c0a:	d107      	bne.n	8003c1c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f000 f9e0 	bl	8003fdc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	f003 0320 	and.w	r3, r3, #32
 8003c26:	2b20      	cmp	r3, #32
 8003c28:	d10e      	bne.n	8003c48 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	f003 0320 	and.w	r3, r3, #32
 8003c34:	2b20      	cmp	r3, #32
 8003c36:	d107      	bne.n	8003c48 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f06f 0220 	mvn.w	r2, #32
 8003c40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f000 fcda 	bl	80045fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c48:	bf00      	nop
 8003c4a:	3708      	adds	r7, #8
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}

08003c50 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b086      	sub	sp, #24
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	60f8      	str	r0, [r7, #12]
 8003c58:	60b9      	str	r1, [r7, #8]
 8003c5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d101      	bne.n	8003c6e <HAL_TIM_IC_ConfigChannel+0x1e>
 8003c6a:	2302      	movs	r3, #2
 8003c6c:	e088      	b.n	8003d80 <HAL_TIM_IC_ConfigChannel+0x130>
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2201      	movs	r2, #1
 8003c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d11b      	bne.n	8003cb4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6818      	ldr	r0, [r3, #0]
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	6819      	ldr	r1, [r3, #0]
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	685a      	ldr	r2, [r3, #4]
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	f000 fa50 	bl	8004130 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	699a      	ldr	r2, [r3, #24]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f022 020c 	bic.w	r2, r2, #12
 8003c9e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	6999      	ldr	r1, [r3, #24]
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	689a      	ldr	r2, [r3, #8]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	430a      	orrs	r2, r1
 8003cb0:	619a      	str	r2, [r3, #24]
 8003cb2:	e060      	b.n	8003d76 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2b04      	cmp	r3, #4
 8003cb8:	d11c      	bne.n	8003cf4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	6818      	ldr	r0, [r3, #0]
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	6819      	ldr	r1, [r3, #0]
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	685a      	ldr	r2, [r3, #4]
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	f000 fad4 	bl	8004276 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	699a      	ldr	r2, [r3, #24]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003cdc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	6999      	ldr	r1, [r3, #24]
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	021a      	lsls	r2, r3, #8
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	430a      	orrs	r2, r1
 8003cf0:	619a      	str	r2, [r3, #24]
 8003cf2:	e040      	b.n	8003d76 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2b08      	cmp	r3, #8
 8003cf8:	d11b      	bne.n	8003d32 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6818      	ldr	r0, [r3, #0]
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	6819      	ldr	r1, [r3, #0]
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	685a      	ldr	r2, [r3, #4]
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	f000 fb21 	bl	8004350 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	69da      	ldr	r2, [r3, #28]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f022 020c 	bic.w	r2, r2, #12
 8003d1c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	69d9      	ldr	r1, [r3, #28]
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	689a      	ldr	r2, [r3, #8]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	430a      	orrs	r2, r1
 8003d2e:	61da      	str	r2, [r3, #28]
 8003d30:	e021      	b.n	8003d76 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2b0c      	cmp	r3, #12
 8003d36:	d11c      	bne.n	8003d72 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6818      	ldr	r0, [r3, #0]
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	6819      	ldr	r1, [r3, #0]
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	685a      	ldr	r2, [r3, #4]
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	f000 fb3e 	bl	80043c8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	69da      	ldr	r2, [r3, #28]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003d5a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	69d9      	ldr	r1, [r3, #28]
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	021a      	lsls	r2, r3, #8
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	430a      	orrs	r2, r1
 8003d6e:	61da      	str	r2, [r3, #28]
 8003d70:	e001      	b.n	8003d76 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003d7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3718      	adds	r7, #24
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d92:	2300      	movs	r3, #0
 8003d94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d101      	bne.n	8003da4 <HAL_TIM_ConfigClockSource+0x1c>
 8003da0:	2302      	movs	r3, #2
 8003da2:	e0b4      	b.n	8003f0e <HAL_TIM_ConfigClockSource+0x186>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2202      	movs	r2, #2
 8003db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003dc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003dca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	68ba      	ldr	r2, [r7, #8]
 8003dd2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ddc:	d03e      	beq.n	8003e5c <HAL_TIM_ConfigClockSource+0xd4>
 8003dde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003de2:	f200 8087 	bhi.w	8003ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8003de6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dea:	f000 8086 	beq.w	8003efa <HAL_TIM_ConfigClockSource+0x172>
 8003dee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003df2:	d87f      	bhi.n	8003ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8003df4:	2b70      	cmp	r3, #112	; 0x70
 8003df6:	d01a      	beq.n	8003e2e <HAL_TIM_ConfigClockSource+0xa6>
 8003df8:	2b70      	cmp	r3, #112	; 0x70
 8003dfa:	d87b      	bhi.n	8003ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8003dfc:	2b60      	cmp	r3, #96	; 0x60
 8003dfe:	d050      	beq.n	8003ea2 <HAL_TIM_ConfigClockSource+0x11a>
 8003e00:	2b60      	cmp	r3, #96	; 0x60
 8003e02:	d877      	bhi.n	8003ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8003e04:	2b50      	cmp	r3, #80	; 0x50
 8003e06:	d03c      	beq.n	8003e82 <HAL_TIM_ConfigClockSource+0xfa>
 8003e08:	2b50      	cmp	r3, #80	; 0x50
 8003e0a:	d873      	bhi.n	8003ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8003e0c:	2b40      	cmp	r3, #64	; 0x40
 8003e0e:	d058      	beq.n	8003ec2 <HAL_TIM_ConfigClockSource+0x13a>
 8003e10:	2b40      	cmp	r3, #64	; 0x40
 8003e12:	d86f      	bhi.n	8003ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8003e14:	2b30      	cmp	r3, #48	; 0x30
 8003e16:	d064      	beq.n	8003ee2 <HAL_TIM_ConfigClockSource+0x15a>
 8003e18:	2b30      	cmp	r3, #48	; 0x30
 8003e1a:	d86b      	bhi.n	8003ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8003e1c:	2b20      	cmp	r3, #32
 8003e1e:	d060      	beq.n	8003ee2 <HAL_TIM_ConfigClockSource+0x15a>
 8003e20:	2b20      	cmp	r3, #32
 8003e22:	d867      	bhi.n	8003ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d05c      	beq.n	8003ee2 <HAL_TIM_ConfigClockSource+0x15a>
 8003e28:	2b10      	cmp	r3, #16
 8003e2a:	d05a      	beq.n	8003ee2 <HAL_TIM_ConfigClockSource+0x15a>
 8003e2c:	e062      	b.n	8003ef4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6818      	ldr	r0, [r3, #0]
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	6899      	ldr	r1, [r3, #8]
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	685a      	ldr	r2, [r3, #4]
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	f000 fb1b 	bl	8004478 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e50:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	68ba      	ldr	r2, [r7, #8]
 8003e58:	609a      	str	r2, [r3, #8]
      break;
 8003e5a:	e04f      	b.n	8003efc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6818      	ldr	r0, [r3, #0]
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	6899      	ldr	r1, [r3, #8]
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	685a      	ldr	r2, [r3, #4]
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	f000 fb04 	bl	8004478 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	689a      	ldr	r2, [r3, #8]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e7e:	609a      	str	r2, [r3, #8]
      break;
 8003e80:	e03c      	b.n	8003efc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6818      	ldr	r0, [r3, #0]
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	6859      	ldr	r1, [r3, #4]
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	461a      	mov	r2, r3
 8003e90:	f000 f9c2 	bl	8004218 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	2150      	movs	r1, #80	; 0x50
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f000 fad1 	bl	8004442 <TIM_ITRx_SetConfig>
      break;
 8003ea0:	e02c      	b.n	8003efc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6818      	ldr	r0, [r3, #0]
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	6859      	ldr	r1, [r3, #4]
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	461a      	mov	r2, r3
 8003eb0:	f000 fa1e 	bl	80042f0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	2160      	movs	r1, #96	; 0x60
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f000 fac1 	bl	8004442 <TIM_ITRx_SetConfig>
      break;
 8003ec0:	e01c      	b.n	8003efc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6818      	ldr	r0, [r3, #0]
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	6859      	ldr	r1, [r3, #4]
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	461a      	mov	r2, r3
 8003ed0:	f000 f9a2 	bl	8004218 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	2140      	movs	r1, #64	; 0x40
 8003eda:	4618      	mov	r0, r3
 8003edc:	f000 fab1 	bl	8004442 <TIM_ITRx_SetConfig>
      break;
 8003ee0:	e00c      	b.n	8003efc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4619      	mov	r1, r3
 8003eec:	4610      	mov	r0, r2
 8003eee:	f000 faa8 	bl	8004442 <TIM_ITRx_SetConfig>
      break;
 8003ef2:	e003      	b.n	8003efc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ef8:	e000      	b.n	8003efc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003efa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3710      	adds	r7, #16
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
	...

08003f18 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b085      	sub	sp, #20
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003f22:	2300      	movs	r3, #0
 8003f24:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	2b0c      	cmp	r3, #12
 8003f2a:	d831      	bhi.n	8003f90 <HAL_TIM_ReadCapturedValue+0x78>
 8003f2c:	a201      	add	r2, pc, #4	; (adr r2, 8003f34 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f32:	bf00      	nop
 8003f34:	08003f69 	.word	0x08003f69
 8003f38:	08003f91 	.word	0x08003f91
 8003f3c:	08003f91 	.word	0x08003f91
 8003f40:	08003f91 	.word	0x08003f91
 8003f44:	08003f73 	.word	0x08003f73
 8003f48:	08003f91 	.word	0x08003f91
 8003f4c:	08003f91 	.word	0x08003f91
 8003f50:	08003f91 	.word	0x08003f91
 8003f54:	08003f7d 	.word	0x08003f7d
 8003f58:	08003f91 	.word	0x08003f91
 8003f5c:	08003f91 	.word	0x08003f91
 8003f60:	08003f91 	.word	0x08003f91
 8003f64:	08003f87 	.word	0x08003f87
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f6e:	60fb      	str	r3, [r7, #12]

      break;
 8003f70:	e00f      	b.n	8003f92 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f78:	60fb      	str	r3, [r7, #12]

      break;
 8003f7a:	e00a      	b.n	8003f92 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f82:	60fb      	str	r3, [r7, #12]

      break;
 8003f84:	e005      	b.n	8003f92 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8c:	60fb      	str	r3, [r7, #12]

      break;
 8003f8e:	e000      	b.n	8003f92 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003f90:	bf00      	nop
  }

  return tmpreg;
 8003f92:	68fb      	ldr	r3, [r7, #12]
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3714      	adds	r7, #20
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr

08003fa0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003fa8:	bf00      	nop
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003fbc:	bf00      	nop
 8003fbe:	370c      	adds	r7, #12
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003fd0:	bf00      	nop
 8003fd2:	370c      	adds	r7, #12
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003fe4:	bf00      	nop
 8003fe6:	370c      	adds	r7, #12
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr

08003ff0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b085      	sub	sp, #20
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a40      	ldr	r2, [pc, #256]	; (8004104 <TIM_Base_SetConfig+0x114>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d013      	beq.n	8004030 <TIM_Base_SetConfig+0x40>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800400e:	d00f      	beq.n	8004030 <TIM_Base_SetConfig+0x40>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4a3d      	ldr	r2, [pc, #244]	; (8004108 <TIM_Base_SetConfig+0x118>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d00b      	beq.n	8004030 <TIM_Base_SetConfig+0x40>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4a3c      	ldr	r2, [pc, #240]	; (800410c <TIM_Base_SetConfig+0x11c>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d007      	beq.n	8004030 <TIM_Base_SetConfig+0x40>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	4a3b      	ldr	r2, [pc, #236]	; (8004110 <TIM_Base_SetConfig+0x120>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d003      	beq.n	8004030 <TIM_Base_SetConfig+0x40>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	4a3a      	ldr	r2, [pc, #232]	; (8004114 <TIM_Base_SetConfig+0x124>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d108      	bne.n	8004042 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004036:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	4313      	orrs	r3, r2
 8004040:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a2f      	ldr	r2, [pc, #188]	; (8004104 <TIM_Base_SetConfig+0x114>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d02b      	beq.n	80040a2 <TIM_Base_SetConfig+0xb2>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004050:	d027      	beq.n	80040a2 <TIM_Base_SetConfig+0xb2>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a2c      	ldr	r2, [pc, #176]	; (8004108 <TIM_Base_SetConfig+0x118>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d023      	beq.n	80040a2 <TIM_Base_SetConfig+0xb2>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a2b      	ldr	r2, [pc, #172]	; (800410c <TIM_Base_SetConfig+0x11c>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d01f      	beq.n	80040a2 <TIM_Base_SetConfig+0xb2>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a2a      	ldr	r2, [pc, #168]	; (8004110 <TIM_Base_SetConfig+0x120>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d01b      	beq.n	80040a2 <TIM_Base_SetConfig+0xb2>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a29      	ldr	r2, [pc, #164]	; (8004114 <TIM_Base_SetConfig+0x124>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d017      	beq.n	80040a2 <TIM_Base_SetConfig+0xb2>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a28      	ldr	r2, [pc, #160]	; (8004118 <TIM_Base_SetConfig+0x128>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d013      	beq.n	80040a2 <TIM_Base_SetConfig+0xb2>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a27      	ldr	r2, [pc, #156]	; (800411c <TIM_Base_SetConfig+0x12c>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d00f      	beq.n	80040a2 <TIM_Base_SetConfig+0xb2>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a26      	ldr	r2, [pc, #152]	; (8004120 <TIM_Base_SetConfig+0x130>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d00b      	beq.n	80040a2 <TIM_Base_SetConfig+0xb2>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a25      	ldr	r2, [pc, #148]	; (8004124 <TIM_Base_SetConfig+0x134>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d007      	beq.n	80040a2 <TIM_Base_SetConfig+0xb2>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a24      	ldr	r2, [pc, #144]	; (8004128 <TIM_Base_SetConfig+0x138>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d003      	beq.n	80040a2 <TIM_Base_SetConfig+0xb2>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a23      	ldr	r2, [pc, #140]	; (800412c <TIM_Base_SetConfig+0x13c>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d108      	bne.n	80040b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	68fa      	ldr	r2, [r7, #12]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	695b      	ldr	r3, [r3, #20]
 80040be:	4313      	orrs	r3, r2
 80040c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	68fa      	ldr	r2, [r7, #12]
 80040c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	689a      	ldr	r2, [r3, #8]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4a0a      	ldr	r2, [pc, #40]	; (8004104 <TIM_Base_SetConfig+0x114>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d003      	beq.n	80040e8 <TIM_Base_SetConfig+0xf8>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	4a0c      	ldr	r2, [pc, #48]	; (8004114 <TIM_Base_SetConfig+0x124>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d103      	bne.n	80040f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	691a      	ldr	r2, [r3, #16]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	615a      	str	r2, [r3, #20]
}
 80040f6:	bf00      	nop
 80040f8:	3714      	adds	r7, #20
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr
 8004102:	bf00      	nop
 8004104:	40010000 	.word	0x40010000
 8004108:	40000400 	.word	0x40000400
 800410c:	40000800 	.word	0x40000800
 8004110:	40000c00 	.word	0x40000c00
 8004114:	40010400 	.word	0x40010400
 8004118:	40014000 	.word	0x40014000
 800411c:	40014400 	.word	0x40014400
 8004120:	40014800 	.word	0x40014800
 8004124:	40001800 	.word	0x40001800
 8004128:	40001c00 	.word	0x40001c00
 800412c:	40002000 	.word	0x40002000

08004130 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004130:	b480      	push	{r7}
 8004132:	b087      	sub	sp, #28
 8004134:	af00      	add	r7, sp, #0
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	60b9      	str	r1, [r7, #8]
 800413a:	607a      	str	r2, [r7, #4]
 800413c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6a1b      	ldr	r3, [r3, #32]
 8004142:	f023 0201 	bic.w	r2, r3, #1
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	699b      	ldr	r3, [r3, #24]
 800414e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6a1b      	ldr	r3, [r3, #32]
 8004154:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	4a28      	ldr	r2, [pc, #160]	; (80041fc <TIM_TI1_SetConfig+0xcc>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d01b      	beq.n	8004196 <TIM_TI1_SetConfig+0x66>
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004164:	d017      	beq.n	8004196 <TIM_TI1_SetConfig+0x66>
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	4a25      	ldr	r2, [pc, #148]	; (8004200 <TIM_TI1_SetConfig+0xd0>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d013      	beq.n	8004196 <TIM_TI1_SetConfig+0x66>
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	4a24      	ldr	r2, [pc, #144]	; (8004204 <TIM_TI1_SetConfig+0xd4>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d00f      	beq.n	8004196 <TIM_TI1_SetConfig+0x66>
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	4a23      	ldr	r2, [pc, #140]	; (8004208 <TIM_TI1_SetConfig+0xd8>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d00b      	beq.n	8004196 <TIM_TI1_SetConfig+0x66>
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	4a22      	ldr	r2, [pc, #136]	; (800420c <TIM_TI1_SetConfig+0xdc>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d007      	beq.n	8004196 <TIM_TI1_SetConfig+0x66>
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	4a21      	ldr	r2, [pc, #132]	; (8004210 <TIM_TI1_SetConfig+0xe0>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d003      	beq.n	8004196 <TIM_TI1_SetConfig+0x66>
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	4a20      	ldr	r2, [pc, #128]	; (8004214 <TIM_TI1_SetConfig+0xe4>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d101      	bne.n	800419a <TIM_TI1_SetConfig+0x6a>
 8004196:	2301      	movs	r3, #1
 8004198:	e000      	b.n	800419c <TIM_TI1_SetConfig+0x6c>
 800419a:	2300      	movs	r3, #0
 800419c:	2b00      	cmp	r3, #0
 800419e:	d008      	beq.n	80041b2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	f023 0303 	bic.w	r3, r3, #3
 80041a6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80041a8:	697a      	ldr	r2, [r7, #20]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	617b      	str	r3, [r7, #20]
 80041b0:	e003      	b.n	80041ba <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	f043 0301 	orr.w	r3, r3, #1
 80041b8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	011b      	lsls	r3, r3, #4
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	697a      	ldr	r2, [r7, #20]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	f023 030a 	bic.w	r3, r3, #10
 80041d4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	f003 030a 	and.w	r3, r3, #10
 80041dc:	693a      	ldr	r2, [r7, #16]
 80041de:	4313      	orrs	r3, r2
 80041e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	697a      	ldr	r2, [r7, #20]
 80041e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	693a      	ldr	r2, [r7, #16]
 80041ec:	621a      	str	r2, [r3, #32]
}
 80041ee:	bf00      	nop
 80041f0:	371c      	adds	r7, #28
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr
 80041fa:	bf00      	nop
 80041fc:	40010000 	.word	0x40010000
 8004200:	40000400 	.word	0x40000400
 8004204:	40000800 	.word	0x40000800
 8004208:	40000c00 	.word	0x40000c00
 800420c:	40010400 	.word	0x40010400
 8004210:	40014000 	.word	0x40014000
 8004214:	40001800 	.word	0x40001800

08004218 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004218:	b480      	push	{r7}
 800421a:	b087      	sub	sp, #28
 800421c:	af00      	add	r7, sp, #0
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6a1b      	ldr	r3, [r3, #32]
 8004228:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6a1b      	ldr	r3, [r3, #32]
 800422e:	f023 0201 	bic.w	r2, r3, #1
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	699b      	ldr	r3, [r3, #24]
 800423a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004242:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	011b      	lsls	r3, r3, #4
 8004248:	693a      	ldr	r2, [r7, #16]
 800424a:	4313      	orrs	r3, r2
 800424c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	f023 030a 	bic.w	r3, r3, #10
 8004254:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004256:	697a      	ldr	r2, [r7, #20]
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	4313      	orrs	r3, r2
 800425c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	693a      	ldr	r2, [r7, #16]
 8004262:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	697a      	ldr	r2, [r7, #20]
 8004268:	621a      	str	r2, [r3, #32]
}
 800426a:	bf00      	nop
 800426c:	371c      	adds	r7, #28
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr

08004276 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004276:	b480      	push	{r7}
 8004278:	b087      	sub	sp, #28
 800427a:	af00      	add	r7, sp, #0
 800427c:	60f8      	str	r0, [r7, #12]
 800427e:	60b9      	str	r1, [r7, #8]
 8004280:	607a      	str	r2, [r7, #4]
 8004282:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6a1b      	ldr	r3, [r3, #32]
 8004288:	f023 0210 	bic.w	r2, r3, #16
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	699b      	ldr	r3, [r3, #24]
 8004294:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6a1b      	ldr	r3, [r3, #32]
 800429a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042a2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	021b      	lsls	r3, r3, #8
 80042a8:	697a      	ldr	r2, [r7, #20]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80042b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	031b      	lsls	r3, r3, #12
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	697a      	ldr	r2, [r7, #20]
 80042be:	4313      	orrs	r3, r2
 80042c0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80042c8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	011b      	lsls	r3, r3, #4
 80042ce:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80042d2:	693a      	ldr	r2, [r7, #16]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	697a      	ldr	r2, [r7, #20]
 80042dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	693a      	ldr	r2, [r7, #16]
 80042e2:	621a      	str	r2, [r3, #32]
}
 80042e4:	bf00      	nop
 80042e6:	371c      	adds	r7, #28
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr

080042f0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b087      	sub	sp, #28
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6a1b      	ldr	r3, [r3, #32]
 8004300:	f023 0210 	bic.w	r2, r3, #16
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	699b      	ldr	r3, [r3, #24]
 800430c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6a1b      	ldr	r3, [r3, #32]
 8004312:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800431a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	031b      	lsls	r3, r3, #12
 8004320:	697a      	ldr	r2, [r7, #20]
 8004322:	4313      	orrs	r3, r2
 8004324:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800432c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	011b      	lsls	r3, r3, #4
 8004332:	693a      	ldr	r2, [r7, #16]
 8004334:	4313      	orrs	r3, r2
 8004336:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	697a      	ldr	r2, [r7, #20]
 800433c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	693a      	ldr	r2, [r7, #16]
 8004342:	621a      	str	r2, [r3, #32]
}
 8004344:	bf00      	nop
 8004346:	371c      	adds	r7, #28
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr

08004350 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004350:	b480      	push	{r7}
 8004352:	b087      	sub	sp, #28
 8004354:	af00      	add	r7, sp, #0
 8004356:	60f8      	str	r0, [r7, #12]
 8004358:	60b9      	str	r1, [r7, #8]
 800435a:	607a      	str	r2, [r7, #4]
 800435c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6a1b      	ldr	r3, [r3, #32]
 8004362:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	69db      	ldr	r3, [r3, #28]
 800436e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6a1b      	ldr	r3, [r3, #32]
 8004374:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	f023 0303 	bic.w	r3, r3, #3
 800437c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800437e:	697a      	ldr	r2, [r7, #20]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	4313      	orrs	r3, r2
 8004384:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800438c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	011b      	lsls	r3, r3, #4
 8004392:	b2db      	uxtb	r3, r3
 8004394:	697a      	ldr	r2, [r7, #20]
 8004396:	4313      	orrs	r3, r2
 8004398:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80043a0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	021b      	lsls	r3, r3, #8
 80043a6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80043aa:	693a      	ldr	r2, [r7, #16]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	697a      	ldr	r2, [r7, #20]
 80043b4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	693a      	ldr	r2, [r7, #16]
 80043ba:	621a      	str	r2, [r3, #32]
}
 80043bc:	bf00      	nop
 80043be:	371c      	adds	r7, #28
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b087      	sub	sp, #28
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	607a      	str	r2, [r7, #4]
 80043d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6a1b      	ldr	r3, [r3, #32]
 80043da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	69db      	ldr	r3, [r3, #28]
 80043e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6a1b      	ldr	r3, [r3, #32]
 80043ec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043f4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	021b      	lsls	r3, r3, #8
 80043fa:	697a      	ldr	r2, [r7, #20]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004406:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	031b      	lsls	r3, r3, #12
 800440c:	b29b      	uxth	r3, r3
 800440e:	697a      	ldr	r2, [r7, #20]
 8004410:	4313      	orrs	r3, r2
 8004412:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800441a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	031b      	lsls	r3, r3, #12
 8004420:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004424:	693a      	ldr	r2, [r7, #16]
 8004426:	4313      	orrs	r3, r2
 8004428:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	697a      	ldr	r2, [r7, #20]
 800442e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	693a      	ldr	r2, [r7, #16]
 8004434:	621a      	str	r2, [r3, #32]
}
 8004436:	bf00      	nop
 8004438:	371c      	adds	r7, #28
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr

08004442 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004442:	b480      	push	{r7}
 8004444:	b085      	sub	sp, #20
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]
 800444a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004458:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800445a:	683a      	ldr	r2, [r7, #0]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	4313      	orrs	r3, r2
 8004460:	f043 0307 	orr.w	r3, r3, #7
 8004464:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	68fa      	ldr	r2, [r7, #12]
 800446a:	609a      	str	r2, [r3, #8]
}
 800446c:	bf00      	nop
 800446e:	3714      	adds	r7, #20
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr

08004478 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004478:	b480      	push	{r7}
 800447a:	b087      	sub	sp, #28
 800447c:	af00      	add	r7, sp, #0
 800447e:	60f8      	str	r0, [r7, #12]
 8004480:	60b9      	str	r1, [r7, #8]
 8004482:	607a      	str	r2, [r7, #4]
 8004484:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004492:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	021a      	lsls	r2, r3, #8
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	431a      	orrs	r2, r3
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	4313      	orrs	r3, r2
 80044a0:	697a      	ldr	r2, [r7, #20]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	697a      	ldr	r2, [r7, #20]
 80044aa:	609a      	str	r2, [r3, #8]
}
 80044ac:	bf00      	nop
 80044ae:	371c      	adds	r7, #28
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr

080044b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b087      	sub	sp, #28
 80044bc:	af00      	add	r7, sp, #0
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	60b9      	str	r1, [r7, #8]
 80044c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	f003 031f 	and.w	r3, r3, #31
 80044ca:	2201      	movs	r2, #1
 80044cc:	fa02 f303 	lsl.w	r3, r2, r3
 80044d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	6a1a      	ldr	r2, [r3, #32]
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	43db      	mvns	r3, r3
 80044da:	401a      	ands	r2, r3
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6a1a      	ldr	r2, [r3, #32]
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	f003 031f 	and.w	r3, r3, #31
 80044ea:	6879      	ldr	r1, [r7, #4]
 80044ec:	fa01 f303 	lsl.w	r3, r1, r3
 80044f0:	431a      	orrs	r2, r3
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	621a      	str	r2, [r3, #32]
}
 80044f6:	bf00      	nop
 80044f8:	371c      	adds	r7, #28
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr
	...

08004504 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004504:	b480      	push	{r7}
 8004506:	b085      	sub	sp, #20
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004514:	2b01      	cmp	r3, #1
 8004516:	d101      	bne.n	800451c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004518:	2302      	movs	r3, #2
 800451a:	e05a      	b.n	80045d2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2202      	movs	r2, #2
 8004528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004542:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	68fa      	ldr	r2, [r7, #12]
 800454a:	4313      	orrs	r3, r2
 800454c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	68fa      	ldr	r2, [r7, #12]
 8004554:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a21      	ldr	r2, [pc, #132]	; (80045e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d022      	beq.n	80045a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004568:	d01d      	beq.n	80045a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a1d      	ldr	r2, [pc, #116]	; (80045e4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d018      	beq.n	80045a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a1b      	ldr	r2, [pc, #108]	; (80045e8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d013      	beq.n	80045a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a1a      	ldr	r2, [pc, #104]	; (80045ec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d00e      	beq.n	80045a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a18      	ldr	r2, [pc, #96]	; (80045f0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d009      	beq.n	80045a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a17      	ldr	r2, [pc, #92]	; (80045f4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d004      	beq.n	80045a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a15      	ldr	r2, [pc, #84]	; (80045f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d10c      	bne.n	80045c0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	68ba      	ldr	r2, [r7, #8]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	68ba      	ldr	r2, [r7, #8]
 80045be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3714      	adds	r7, #20
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr
 80045de:	bf00      	nop
 80045e0:	40010000 	.word	0x40010000
 80045e4:	40000400 	.word	0x40000400
 80045e8:	40000800 	.word	0x40000800
 80045ec:	40000c00 	.word	0x40000c00
 80045f0:	40010400 	.word	0x40010400
 80045f4:	40014000 	.word	0x40014000
 80045f8:	40001800 	.word	0x40001800

080045fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004604:	bf00      	nop
 8004606:	370c      	adds	r7, #12
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr

08004610 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004610:	b480      	push	{r7}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004618:	bf00      	nop
 800461a:	370c      	adds	r7, #12
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr

08004624 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b082      	sub	sp, #8
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d101      	bne.n	8004636 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e03f      	b.n	80046b6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800463c:	b2db      	uxtb	r3, r3
 800463e:	2b00      	cmp	r3, #0
 8004640:	d106      	bne.n	8004650 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f7fd fa22 	bl	8001a94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2224      	movs	r2, #36	; 0x24
 8004654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	68da      	ldr	r2, [r3, #12]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004666:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f000 f929 	bl	80048c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	691a      	ldr	r2, [r3, #16]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800467c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	695a      	ldr	r2, [r3, #20]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800468c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	68da      	ldr	r2, [r3, #12]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800469c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2220      	movs	r2, #32
 80046a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2220      	movs	r2, #32
 80046b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80046b4:	2300      	movs	r3, #0
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3708      	adds	r7, #8
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}

080046be <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046be:	b580      	push	{r7, lr}
 80046c0:	b08a      	sub	sp, #40	; 0x28
 80046c2:	af02      	add	r7, sp, #8
 80046c4:	60f8      	str	r0, [r7, #12]
 80046c6:	60b9      	str	r1, [r7, #8]
 80046c8:	603b      	str	r3, [r7, #0]
 80046ca:	4613      	mov	r3, r2
 80046cc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80046ce:	2300      	movs	r3, #0
 80046d0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	2b20      	cmp	r3, #32
 80046dc:	d17c      	bne.n	80047d8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d002      	beq.n	80046ea <HAL_UART_Transmit+0x2c>
 80046e4:	88fb      	ldrh	r3, [r7, #6]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d101      	bne.n	80046ee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e075      	b.n	80047da <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d101      	bne.n	80046fc <HAL_UART_Transmit+0x3e>
 80046f8:	2302      	movs	r3, #2
 80046fa:	e06e      	b.n	80047da <HAL_UART_Transmit+0x11c>
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2200      	movs	r2, #0
 8004708:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2221      	movs	r2, #33	; 0x21
 800470e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004712:	f7fd fbe1 	bl	8001ed8 <HAL_GetTick>
 8004716:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	88fa      	ldrh	r2, [r7, #6]
 800471c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	88fa      	ldrh	r2, [r7, #6]
 8004722:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800472c:	d108      	bne.n	8004740 <HAL_UART_Transmit+0x82>
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d104      	bne.n	8004740 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004736:	2300      	movs	r3, #0
 8004738:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	61bb      	str	r3, [r7, #24]
 800473e:	e003      	b.n	8004748 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004744:	2300      	movs	r3, #0
 8004746:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2200      	movs	r2, #0
 800474c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004750:	e02a      	b.n	80047a8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	9300      	str	r3, [sp, #0]
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	2200      	movs	r2, #0
 800475a:	2180      	movs	r1, #128	; 0x80
 800475c:	68f8      	ldr	r0, [r7, #12]
 800475e:	f000 f840 	bl	80047e2 <UART_WaitOnFlagUntilTimeout>
 8004762:	4603      	mov	r3, r0
 8004764:	2b00      	cmp	r3, #0
 8004766:	d001      	beq.n	800476c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004768:	2303      	movs	r3, #3
 800476a:	e036      	b.n	80047da <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800476c:	69fb      	ldr	r3, [r7, #28]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d10b      	bne.n	800478a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	881b      	ldrh	r3, [r3, #0]
 8004776:	461a      	mov	r2, r3
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004780:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004782:	69bb      	ldr	r3, [r7, #24]
 8004784:	3302      	adds	r3, #2
 8004786:	61bb      	str	r3, [r7, #24]
 8004788:	e007      	b.n	800479a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800478a:	69fb      	ldr	r3, [r7, #28]
 800478c:	781a      	ldrb	r2, [r3, #0]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	3301      	adds	r3, #1
 8004798:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800479e:	b29b      	uxth	r3, r3
 80047a0:	3b01      	subs	r3, #1
 80047a2:	b29a      	uxth	r2, r3
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d1cf      	bne.n	8004752 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	9300      	str	r3, [sp, #0]
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	2200      	movs	r2, #0
 80047ba:	2140      	movs	r1, #64	; 0x40
 80047bc:	68f8      	ldr	r0, [r7, #12]
 80047be:	f000 f810 	bl	80047e2 <UART_WaitOnFlagUntilTimeout>
 80047c2:	4603      	mov	r3, r0
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d001      	beq.n	80047cc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80047c8:	2303      	movs	r3, #3
 80047ca:	e006      	b.n	80047da <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2220      	movs	r2, #32
 80047d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80047d4:	2300      	movs	r3, #0
 80047d6:	e000      	b.n	80047da <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80047d8:	2302      	movs	r3, #2
  }
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3720      	adds	r7, #32
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}

080047e2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80047e2:	b580      	push	{r7, lr}
 80047e4:	b090      	sub	sp, #64	; 0x40
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	60f8      	str	r0, [r7, #12]
 80047ea:	60b9      	str	r1, [r7, #8]
 80047ec:	603b      	str	r3, [r7, #0]
 80047ee:	4613      	mov	r3, r2
 80047f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047f2:	e050      	b.n	8004896 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047fa:	d04c      	beq.n	8004896 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80047fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d007      	beq.n	8004812 <UART_WaitOnFlagUntilTimeout+0x30>
 8004802:	f7fd fb69 	bl	8001ed8 <HAL_GetTick>
 8004806:	4602      	mov	r2, r0
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	1ad3      	subs	r3, r2, r3
 800480c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800480e:	429a      	cmp	r2, r3
 8004810:	d241      	bcs.n	8004896 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	330c      	adds	r3, #12
 8004818:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800481a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800481c:	e853 3f00 	ldrex	r3, [r3]
 8004820:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004824:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004828:	63fb      	str	r3, [r7, #60]	; 0x3c
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	330c      	adds	r3, #12
 8004830:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004832:	637a      	str	r2, [r7, #52]	; 0x34
 8004834:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004836:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004838:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800483a:	e841 2300 	strex	r3, r2, [r1]
 800483e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004842:	2b00      	cmp	r3, #0
 8004844:	d1e5      	bne.n	8004812 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	3314      	adds	r3, #20
 800484c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	e853 3f00 	ldrex	r3, [r3]
 8004854:	613b      	str	r3, [r7, #16]
   return(result);
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	f023 0301 	bic.w	r3, r3, #1
 800485c:	63bb      	str	r3, [r7, #56]	; 0x38
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	3314      	adds	r3, #20
 8004864:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004866:	623a      	str	r2, [r7, #32]
 8004868:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800486a:	69f9      	ldr	r1, [r7, #28]
 800486c:	6a3a      	ldr	r2, [r7, #32]
 800486e:	e841 2300 	strex	r3, r2, [r1]
 8004872:	61bb      	str	r3, [r7, #24]
   return(result);
 8004874:	69bb      	ldr	r3, [r7, #24]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d1e5      	bne.n	8004846 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2220      	movs	r2, #32
 800487e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2220      	movs	r2, #32
 8004886:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2200      	movs	r2, #0
 800488e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e00f      	b.n	80048b6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	4013      	ands	r3, r2
 80048a0:	68ba      	ldr	r2, [r7, #8]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	bf0c      	ite	eq
 80048a6:	2301      	moveq	r3, #1
 80048a8:	2300      	movne	r3, #0
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	461a      	mov	r2, r3
 80048ae:	79fb      	ldrb	r3, [r7, #7]
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d09f      	beq.n	80047f4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3740      	adds	r7, #64	; 0x40
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
	...

080048c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048c4:	b0c0      	sub	sp, #256	; 0x100
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	691b      	ldr	r3, [r3, #16]
 80048d4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80048d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048dc:	68d9      	ldr	r1, [r3, #12]
 80048de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	ea40 0301 	orr.w	r3, r0, r1
 80048e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80048ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048ee:	689a      	ldr	r2, [r3, #8]
 80048f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048f4:	691b      	ldr	r3, [r3, #16]
 80048f6:	431a      	orrs	r2, r3
 80048f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048fc:	695b      	ldr	r3, [r3, #20]
 80048fe:	431a      	orrs	r2, r3
 8004900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004904:	69db      	ldr	r3, [r3, #28]
 8004906:	4313      	orrs	r3, r2
 8004908:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800490c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004918:	f021 010c 	bic.w	r1, r1, #12
 800491c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004926:	430b      	orrs	r3, r1
 8004928:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800492a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	695b      	ldr	r3, [r3, #20]
 8004932:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004936:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800493a:	6999      	ldr	r1, [r3, #24]
 800493c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	ea40 0301 	orr.w	r3, r0, r1
 8004946:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	4b8f      	ldr	r3, [pc, #572]	; (8004b8c <UART_SetConfig+0x2cc>)
 8004950:	429a      	cmp	r2, r3
 8004952:	d005      	beq.n	8004960 <UART_SetConfig+0xa0>
 8004954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	4b8d      	ldr	r3, [pc, #564]	; (8004b90 <UART_SetConfig+0x2d0>)
 800495c:	429a      	cmp	r2, r3
 800495e:	d104      	bne.n	800496a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004960:	f7fe fe8a 	bl	8003678 <HAL_RCC_GetPCLK2Freq>
 8004964:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004968:	e003      	b.n	8004972 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800496a:	f7fe fe71 	bl	8003650 <HAL_RCC_GetPCLK1Freq>
 800496e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004976:	69db      	ldr	r3, [r3, #28]
 8004978:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800497c:	f040 810c 	bne.w	8004b98 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004980:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004984:	2200      	movs	r2, #0
 8004986:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800498a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800498e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004992:	4622      	mov	r2, r4
 8004994:	462b      	mov	r3, r5
 8004996:	1891      	adds	r1, r2, r2
 8004998:	65b9      	str	r1, [r7, #88]	; 0x58
 800499a:	415b      	adcs	r3, r3
 800499c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800499e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80049a2:	4621      	mov	r1, r4
 80049a4:	eb12 0801 	adds.w	r8, r2, r1
 80049a8:	4629      	mov	r1, r5
 80049aa:	eb43 0901 	adc.w	r9, r3, r1
 80049ae:	f04f 0200 	mov.w	r2, #0
 80049b2:	f04f 0300 	mov.w	r3, #0
 80049b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80049ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80049be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80049c2:	4690      	mov	r8, r2
 80049c4:	4699      	mov	r9, r3
 80049c6:	4623      	mov	r3, r4
 80049c8:	eb18 0303 	adds.w	r3, r8, r3
 80049cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80049d0:	462b      	mov	r3, r5
 80049d2:	eb49 0303 	adc.w	r3, r9, r3
 80049d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80049da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80049e6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80049ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80049ee:	460b      	mov	r3, r1
 80049f0:	18db      	adds	r3, r3, r3
 80049f2:	653b      	str	r3, [r7, #80]	; 0x50
 80049f4:	4613      	mov	r3, r2
 80049f6:	eb42 0303 	adc.w	r3, r2, r3
 80049fa:	657b      	str	r3, [r7, #84]	; 0x54
 80049fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004a00:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004a04:	f7fc f950 	bl	8000ca8 <__aeabi_uldivmod>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	460b      	mov	r3, r1
 8004a0c:	4b61      	ldr	r3, [pc, #388]	; (8004b94 <UART_SetConfig+0x2d4>)
 8004a0e:	fba3 2302 	umull	r2, r3, r3, r2
 8004a12:	095b      	lsrs	r3, r3, #5
 8004a14:	011c      	lsls	r4, r3, #4
 8004a16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a20:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004a24:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004a28:	4642      	mov	r2, r8
 8004a2a:	464b      	mov	r3, r9
 8004a2c:	1891      	adds	r1, r2, r2
 8004a2e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004a30:	415b      	adcs	r3, r3
 8004a32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a34:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004a38:	4641      	mov	r1, r8
 8004a3a:	eb12 0a01 	adds.w	sl, r2, r1
 8004a3e:	4649      	mov	r1, r9
 8004a40:	eb43 0b01 	adc.w	fp, r3, r1
 8004a44:	f04f 0200 	mov.w	r2, #0
 8004a48:	f04f 0300 	mov.w	r3, #0
 8004a4c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004a50:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004a54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a58:	4692      	mov	sl, r2
 8004a5a:	469b      	mov	fp, r3
 8004a5c:	4643      	mov	r3, r8
 8004a5e:	eb1a 0303 	adds.w	r3, sl, r3
 8004a62:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a66:	464b      	mov	r3, r9
 8004a68:	eb4b 0303 	adc.w	r3, fp, r3
 8004a6c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a7c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004a80:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004a84:	460b      	mov	r3, r1
 8004a86:	18db      	adds	r3, r3, r3
 8004a88:	643b      	str	r3, [r7, #64]	; 0x40
 8004a8a:	4613      	mov	r3, r2
 8004a8c:	eb42 0303 	adc.w	r3, r2, r3
 8004a90:	647b      	str	r3, [r7, #68]	; 0x44
 8004a92:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004a96:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004a9a:	f7fc f905 	bl	8000ca8 <__aeabi_uldivmod>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	4611      	mov	r1, r2
 8004aa4:	4b3b      	ldr	r3, [pc, #236]	; (8004b94 <UART_SetConfig+0x2d4>)
 8004aa6:	fba3 2301 	umull	r2, r3, r3, r1
 8004aaa:	095b      	lsrs	r3, r3, #5
 8004aac:	2264      	movs	r2, #100	; 0x64
 8004aae:	fb02 f303 	mul.w	r3, r2, r3
 8004ab2:	1acb      	subs	r3, r1, r3
 8004ab4:	00db      	lsls	r3, r3, #3
 8004ab6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004aba:	4b36      	ldr	r3, [pc, #216]	; (8004b94 <UART_SetConfig+0x2d4>)
 8004abc:	fba3 2302 	umull	r2, r3, r3, r2
 8004ac0:	095b      	lsrs	r3, r3, #5
 8004ac2:	005b      	lsls	r3, r3, #1
 8004ac4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ac8:	441c      	add	r4, r3
 8004aca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ad4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004ad8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004adc:	4642      	mov	r2, r8
 8004ade:	464b      	mov	r3, r9
 8004ae0:	1891      	adds	r1, r2, r2
 8004ae2:	63b9      	str	r1, [r7, #56]	; 0x38
 8004ae4:	415b      	adcs	r3, r3
 8004ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ae8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004aec:	4641      	mov	r1, r8
 8004aee:	1851      	adds	r1, r2, r1
 8004af0:	6339      	str	r1, [r7, #48]	; 0x30
 8004af2:	4649      	mov	r1, r9
 8004af4:	414b      	adcs	r3, r1
 8004af6:	637b      	str	r3, [r7, #52]	; 0x34
 8004af8:	f04f 0200 	mov.w	r2, #0
 8004afc:	f04f 0300 	mov.w	r3, #0
 8004b00:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004b04:	4659      	mov	r1, fp
 8004b06:	00cb      	lsls	r3, r1, #3
 8004b08:	4651      	mov	r1, sl
 8004b0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b0e:	4651      	mov	r1, sl
 8004b10:	00ca      	lsls	r2, r1, #3
 8004b12:	4610      	mov	r0, r2
 8004b14:	4619      	mov	r1, r3
 8004b16:	4603      	mov	r3, r0
 8004b18:	4642      	mov	r2, r8
 8004b1a:	189b      	adds	r3, r3, r2
 8004b1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b20:	464b      	mov	r3, r9
 8004b22:	460a      	mov	r2, r1
 8004b24:	eb42 0303 	adc.w	r3, r2, r3
 8004b28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004b38:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004b3c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004b40:	460b      	mov	r3, r1
 8004b42:	18db      	adds	r3, r3, r3
 8004b44:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b46:	4613      	mov	r3, r2
 8004b48:	eb42 0303 	adc.w	r3, r2, r3
 8004b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b4e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b52:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004b56:	f7fc f8a7 	bl	8000ca8 <__aeabi_uldivmod>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	460b      	mov	r3, r1
 8004b5e:	4b0d      	ldr	r3, [pc, #52]	; (8004b94 <UART_SetConfig+0x2d4>)
 8004b60:	fba3 1302 	umull	r1, r3, r3, r2
 8004b64:	095b      	lsrs	r3, r3, #5
 8004b66:	2164      	movs	r1, #100	; 0x64
 8004b68:	fb01 f303 	mul.w	r3, r1, r3
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	00db      	lsls	r3, r3, #3
 8004b70:	3332      	adds	r3, #50	; 0x32
 8004b72:	4a08      	ldr	r2, [pc, #32]	; (8004b94 <UART_SetConfig+0x2d4>)
 8004b74:	fba2 2303 	umull	r2, r3, r2, r3
 8004b78:	095b      	lsrs	r3, r3, #5
 8004b7a:	f003 0207 	and.w	r2, r3, #7
 8004b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4422      	add	r2, r4
 8004b86:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004b88:	e105      	b.n	8004d96 <UART_SetConfig+0x4d6>
 8004b8a:	bf00      	nop
 8004b8c:	40011000 	.word	0x40011000
 8004b90:	40011400 	.word	0x40011400
 8004b94:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004ba2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004ba6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004baa:	4642      	mov	r2, r8
 8004bac:	464b      	mov	r3, r9
 8004bae:	1891      	adds	r1, r2, r2
 8004bb0:	6239      	str	r1, [r7, #32]
 8004bb2:	415b      	adcs	r3, r3
 8004bb4:	627b      	str	r3, [r7, #36]	; 0x24
 8004bb6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004bba:	4641      	mov	r1, r8
 8004bbc:	1854      	adds	r4, r2, r1
 8004bbe:	4649      	mov	r1, r9
 8004bc0:	eb43 0501 	adc.w	r5, r3, r1
 8004bc4:	f04f 0200 	mov.w	r2, #0
 8004bc8:	f04f 0300 	mov.w	r3, #0
 8004bcc:	00eb      	lsls	r3, r5, #3
 8004bce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bd2:	00e2      	lsls	r2, r4, #3
 8004bd4:	4614      	mov	r4, r2
 8004bd6:	461d      	mov	r5, r3
 8004bd8:	4643      	mov	r3, r8
 8004bda:	18e3      	adds	r3, r4, r3
 8004bdc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004be0:	464b      	mov	r3, r9
 8004be2:	eb45 0303 	adc.w	r3, r5, r3
 8004be6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004bea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004bf6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004bfa:	f04f 0200 	mov.w	r2, #0
 8004bfe:	f04f 0300 	mov.w	r3, #0
 8004c02:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004c06:	4629      	mov	r1, r5
 8004c08:	008b      	lsls	r3, r1, #2
 8004c0a:	4621      	mov	r1, r4
 8004c0c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c10:	4621      	mov	r1, r4
 8004c12:	008a      	lsls	r2, r1, #2
 8004c14:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004c18:	f7fc f846 	bl	8000ca8 <__aeabi_uldivmod>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	460b      	mov	r3, r1
 8004c20:	4b60      	ldr	r3, [pc, #384]	; (8004da4 <UART_SetConfig+0x4e4>)
 8004c22:	fba3 2302 	umull	r2, r3, r3, r2
 8004c26:	095b      	lsrs	r3, r3, #5
 8004c28:	011c      	lsls	r4, r3, #4
 8004c2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004c34:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004c38:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004c3c:	4642      	mov	r2, r8
 8004c3e:	464b      	mov	r3, r9
 8004c40:	1891      	adds	r1, r2, r2
 8004c42:	61b9      	str	r1, [r7, #24]
 8004c44:	415b      	adcs	r3, r3
 8004c46:	61fb      	str	r3, [r7, #28]
 8004c48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c4c:	4641      	mov	r1, r8
 8004c4e:	1851      	adds	r1, r2, r1
 8004c50:	6139      	str	r1, [r7, #16]
 8004c52:	4649      	mov	r1, r9
 8004c54:	414b      	adcs	r3, r1
 8004c56:	617b      	str	r3, [r7, #20]
 8004c58:	f04f 0200 	mov.w	r2, #0
 8004c5c:	f04f 0300 	mov.w	r3, #0
 8004c60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c64:	4659      	mov	r1, fp
 8004c66:	00cb      	lsls	r3, r1, #3
 8004c68:	4651      	mov	r1, sl
 8004c6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c6e:	4651      	mov	r1, sl
 8004c70:	00ca      	lsls	r2, r1, #3
 8004c72:	4610      	mov	r0, r2
 8004c74:	4619      	mov	r1, r3
 8004c76:	4603      	mov	r3, r0
 8004c78:	4642      	mov	r2, r8
 8004c7a:	189b      	adds	r3, r3, r2
 8004c7c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c80:	464b      	mov	r3, r9
 8004c82:	460a      	mov	r2, r1
 8004c84:	eb42 0303 	adc.w	r3, r2, r3
 8004c88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	67bb      	str	r3, [r7, #120]	; 0x78
 8004c96:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004c98:	f04f 0200 	mov.w	r2, #0
 8004c9c:	f04f 0300 	mov.w	r3, #0
 8004ca0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004ca4:	4649      	mov	r1, r9
 8004ca6:	008b      	lsls	r3, r1, #2
 8004ca8:	4641      	mov	r1, r8
 8004caa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cae:	4641      	mov	r1, r8
 8004cb0:	008a      	lsls	r2, r1, #2
 8004cb2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004cb6:	f7fb fff7 	bl	8000ca8 <__aeabi_uldivmod>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	460b      	mov	r3, r1
 8004cbe:	4b39      	ldr	r3, [pc, #228]	; (8004da4 <UART_SetConfig+0x4e4>)
 8004cc0:	fba3 1302 	umull	r1, r3, r3, r2
 8004cc4:	095b      	lsrs	r3, r3, #5
 8004cc6:	2164      	movs	r1, #100	; 0x64
 8004cc8:	fb01 f303 	mul.w	r3, r1, r3
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	011b      	lsls	r3, r3, #4
 8004cd0:	3332      	adds	r3, #50	; 0x32
 8004cd2:	4a34      	ldr	r2, [pc, #208]	; (8004da4 <UART_SetConfig+0x4e4>)
 8004cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8004cd8:	095b      	lsrs	r3, r3, #5
 8004cda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004cde:	441c      	add	r4, r3
 8004ce0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	673b      	str	r3, [r7, #112]	; 0x70
 8004ce8:	677a      	str	r2, [r7, #116]	; 0x74
 8004cea:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004cee:	4642      	mov	r2, r8
 8004cf0:	464b      	mov	r3, r9
 8004cf2:	1891      	adds	r1, r2, r2
 8004cf4:	60b9      	str	r1, [r7, #8]
 8004cf6:	415b      	adcs	r3, r3
 8004cf8:	60fb      	str	r3, [r7, #12]
 8004cfa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004cfe:	4641      	mov	r1, r8
 8004d00:	1851      	adds	r1, r2, r1
 8004d02:	6039      	str	r1, [r7, #0]
 8004d04:	4649      	mov	r1, r9
 8004d06:	414b      	adcs	r3, r1
 8004d08:	607b      	str	r3, [r7, #4]
 8004d0a:	f04f 0200 	mov.w	r2, #0
 8004d0e:	f04f 0300 	mov.w	r3, #0
 8004d12:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004d16:	4659      	mov	r1, fp
 8004d18:	00cb      	lsls	r3, r1, #3
 8004d1a:	4651      	mov	r1, sl
 8004d1c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d20:	4651      	mov	r1, sl
 8004d22:	00ca      	lsls	r2, r1, #3
 8004d24:	4610      	mov	r0, r2
 8004d26:	4619      	mov	r1, r3
 8004d28:	4603      	mov	r3, r0
 8004d2a:	4642      	mov	r2, r8
 8004d2c:	189b      	adds	r3, r3, r2
 8004d2e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d30:	464b      	mov	r3, r9
 8004d32:	460a      	mov	r2, r1
 8004d34:	eb42 0303 	adc.w	r3, r2, r3
 8004d38:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	2200      	movs	r2, #0
 8004d42:	663b      	str	r3, [r7, #96]	; 0x60
 8004d44:	667a      	str	r2, [r7, #100]	; 0x64
 8004d46:	f04f 0200 	mov.w	r2, #0
 8004d4a:	f04f 0300 	mov.w	r3, #0
 8004d4e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004d52:	4649      	mov	r1, r9
 8004d54:	008b      	lsls	r3, r1, #2
 8004d56:	4641      	mov	r1, r8
 8004d58:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d5c:	4641      	mov	r1, r8
 8004d5e:	008a      	lsls	r2, r1, #2
 8004d60:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004d64:	f7fb ffa0 	bl	8000ca8 <__aeabi_uldivmod>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	460b      	mov	r3, r1
 8004d6c:	4b0d      	ldr	r3, [pc, #52]	; (8004da4 <UART_SetConfig+0x4e4>)
 8004d6e:	fba3 1302 	umull	r1, r3, r3, r2
 8004d72:	095b      	lsrs	r3, r3, #5
 8004d74:	2164      	movs	r1, #100	; 0x64
 8004d76:	fb01 f303 	mul.w	r3, r1, r3
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	011b      	lsls	r3, r3, #4
 8004d7e:	3332      	adds	r3, #50	; 0x32
 8004d80:	4a08      	ldr	r2, [pc, #32]	; (8004da4 <UART_SetConfig+0x4e4>)
 8004d82:	fba2 2303 	umull	r2, r3, r2, r3
 8004d86:	095b      	lsrs	r3, r3, #5
 8004d88:	f003 020f 	and.w	r2, r3, #15
 8004d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4422      	add	r2, r4
 8004d94:	609a      	str	r2, [r3, #8]
}
 8004d96:	bf00      	nop
 8004d98:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004da2:	bf00      	nop
 8004da4:	51eb851f 	.word	0x51eb851f

08004da8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004da8:	b084      	sub	sp, #16
 8004daa:	b580      	push	{r7, lr}
 8004dac:	b084      	sub	sp, #16
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
 8004db2:	f107 001c 	add.w	r0, r7, #28
 8004db6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d122      	bne.n	8004e06 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004dd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004de8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d105      	bne.n	8004dfa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 faa2 	bl	8005344 <USB_CoreReset>
 8004e00:	4603      	mov	r3, r0
 8004e02:	73fb      	strb	r3, [r7, #15]
 8004e04:	e01a      	b.n	8004e3c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f000 fa96 	bl	8005344 <USB_CoreReset>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004e1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d106      	bne.n	8004e30 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e26:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	639a      	str	r2, [r3, #56]	; 0x38
 8004e2e:	e005      	b.n	8004e3c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e34:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d10b      	bne.n	8004e5a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	f043 0206 	orr.w	r2, r3, #6
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	f043 0220 	orr.w	r2, r3, #32
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004e5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3710      	adds	r7, #16
 8004e60:	46bd      	mov	sp, r7
 8004e62:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e66:	b004      	add	sp, #16
 8004e68:	4770      	bx	lr

08004e6a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e6a:	b480      	push	{r7}
 8004e6c:	b083      	sub	sp, #12
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	f023 0201 	bic.w	r2, r3, #1
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004e7e:	2300      	movs	r3, #0
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	370c      	adds	r7, #12
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr

08004e8c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b084      	sub	sp, #16
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	460b      	mov	r3, r1
 8004e96:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004ea8:	78fb      	ldrb	r3, [r7, #3]
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d115      	bne.n	8004eda <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004eba:	2001      	movs	r0, #1
 8004ebc:	f7fd f818 	bl	8001ef0 <HAL_Delay>
      ms++;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	3301      	adds	r3, #1
 8004ec4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f000 fa2e 	bl	8005328 <USB_GetMode>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d01e      	beq.n	8004f10 <USB_SetCurrentMode+0x84>
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2b31      	cmp	r3, #49	; 0x31
 8004ed6:	d9f0      	bls.n	8004eba <USB_SetCurrentMode+0x2e>
 8004ed8:	e01a      	b.n	8004f10 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004eda:	78fb      	ldrb	r3, [r7, #3]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d115      	bne.n	8004f0c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004eec:	2001      	movs	r0, #1
 8004eee:	f7fc ffff 	bl	8001ef0 <HAL_Delay>
      ms++;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	3301      	adds	r3, #1
 8004ef6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f000 fa15 	bl	8005328 <USB_GetMode>
 8004efe:	4603      	mov	r3, r0
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d005      	beq.n	8004f10 <USB_SetCurrentMode+0x84>
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2b31      	cmp	r3, #49	; 0x31
 8004f08:	d9f0      	bls.n	8004eec <USB_SetCurrentMode+0x60>
 8004f0a:	e001      	b.n	8004f10 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e005      	b.n	8004f1c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2b32      	cmp	r3, #50	; 0x32
 8004f14:	d101      	bne.n	8004f1a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e000      	b.n	8004f1c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004f1a:	2300      	movs	r3, #0
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3710      	adds	r7, #16
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f24:	b084      	sub	sp, #16
 8004f26:	b580      	push	{r7, lr}
 8004f28:	b086      	sub	sp, #24
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	6078      	str	r0, [r7, #4]
 8004f2e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004f32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004f36:	2300      	movs	r3, #0
 8004f38:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004f3e:	2300      	movs	r3, #0
 8004f40:	613b      	str	r3, [r7, #16]
 8004f42:	e009      	b.n	8004f58 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	3340      	adds	r3, #64	; 0x40
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	4413      	add	r3, r2
 8004f4e:	2200      	movs	r2, #0
 8004f50:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	3301      	adds	r3, #1
 8004f56:	613b      	str	r3, [r7, #16]
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	2b0e      	cmp	r3, #14
 8004f5c:	d9f2      	bls.n	8004f44 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004f5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d11c      	bne.n	8004f9e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	68fa      	ldr	r2, [r7, #12]
 8004f6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f72:	f043 0302 	orr.w	r3, r3, #2
 8004f76:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f7c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f88:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f94:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	639a      	str	r2, [r3, #56]	; 0x38
 8004f9c:	e00b      	b.n	8004fb6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fa2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fae:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fc8:	4619      	mov	r1, r3
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	680b      	ldr	r3, [r1, #0]
 8004fd4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d10c      	bne.n	8004ff6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d104      	bne.n	8004fec <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004fe2:	2100      	movs	r1, #0
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f000 f965 	bl	80052b4 <USB_SetDevSpeed>
 8004fea:	e008      	b.n	8004ffe <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004fec:	2101      	movs	r1, #1
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f000 f960 	bl	80052b4 <USB_SetDevSpeed>
 8004ff4:	e003      	b.n	8004ffe <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004ff6:	2103      	movs	r1, #3
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f000 f95b 	bl	80052b4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004ffe:	2110      	movs	r1, #16
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f000 f8f3 	bl	80051ec <USB_FlushTxFifo>
 8005006:	4603      	mov	r3, r0
 8005008:	2b00      	cmp	r3, #0
 800500a:	d001      	beq.n	8005010 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f000 f91f 	bl	8005254 <USB_FlushRxFifo>
 8005016:	4603      	mov	r3, r0
 8005018:	2b00      	cmp	r3, #0
 800501a:	d001      	beq.n	8005020 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005026:	461a      	mov	r2, r3
 8005028:	2300      	movs	r3, #0
 800502a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005032:	461a      	mov	r2, r3
 8005034:	2300      	movs	r3, #0
 8005036:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800503e:	461a      	mov	r2, r3
 8005040:	2300      	movs	r3, #0
 8005042:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005044:	2300      	movs	r3, #0
 8005046:	613b      	str	r3, [r7, #16]
 8005048:	e043      	b.n	80050d2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	015a      	lsls	r2, r3, #5
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	4413      	add	r3, r2
 8005052:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800505c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005060:	d118      	bne.n	8005094 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d10a      	bne.n	800507e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	015a      	lsls	r2, r3, #5
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	4413      	add	r3, r2
 8005070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005074:	461a      	mov	r2, r3
 8005076:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800507a:	6013      	str	r3, [r2, #0]
 800507c:	e013      	b.n	80050a6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	015a      	lsls	r2, r3, #5
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	4413      	add	r3, r2
 8005086:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800508a:	461a      	mov	r2, r3
 800508c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005090:	6013      	str	r3, [r2, #0]
 8005092:	e008      	b.n	80050a6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	015a      	lsls	r2, r3, #5
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	4413      	add	r3, r2
 800509c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050a0:	461a      	mov	r2, r3
 80050a2:	2300      	movs	r3, #0
 80050a4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	015a      	lsls	r2, r3, #5
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	4413      	add	r3, r2
 80050ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050b2:	461a      	mov	r2, r3
 80050b4:	2300      	movs	r3, #0
 80050b6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	015a      	lsls	r2, r3, #5
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	4413      	add	r3, r2
 80050c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050c4:	461a      	mov	r2, r3
 80050c6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80050ca:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	3301      	adds	r3, #1
 80050d0:	613b      	str	r3, [r7, #16]
 80050d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d4:	693a      	ldr	r2, [r7, #16]
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d3b7      	bcc.n	800504a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050da:	2300      	movs	r3, #0
 80050dc:	613b      	str	r3, [r7, #16]
 80050de:	e043      	b.n	8005168 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	015a      	lsls	r2, r3, #5
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	4413      	add	r3, r2
 80050e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050f6:	d118      	bne.n	800512a <USB_DevInit+0x206>
    {
      if (i == 0U)
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d10a      	bne.n	8005114 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	015a      	lsls	r2, r3, #5
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	4413      	add	r3, r2
 8005106:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800510a:	461a      	mov	r2, r3
 800510c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005110:	6013      	str	r3, [r2, #0]
 8005112:	e013      	b.n	800513c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	015a      	lsls	r2, r3, #5
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	4413      	add	r3, r2
 800511c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005120:	461a      	mov	r2, r3
 8005122:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005126:	6013      	str	r3, [r2, #0]
 8005128:	e008      	b.n	800513c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	015a      	lsls	r2, r3, #5
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	4413      	add	r3, r2
 8005132:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005136:	461a      	mov	r2, r3
 8005138:	2300      	movs	r3, #0
 800513a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	015a      	lsls	r2, r3, #5
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	4413      	add	r3, r2
 8005144:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005148:	461a      	mov	r2, r3
 800514a:	2300      	movs	r3, #0
 800514c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	015a      	lsls	r2, r3, #5
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	4413      	add	r3, r2
 8005156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800515a:	461a      	mov	r2, r3
 800515c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005160:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	3301      	adds	r3, #1
 8005166:	613b      	str	r3, [r7, #16]
 8005168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516a:	693a      	ldr	r2, [r7, #16]
 800516c:	429a      	cmp	r2, r3
 800516e:	d3b7      	bcc.n	80050e0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005176:	691b      	ldr	r3, [r3, #16]
 8005178:	68fa      	ldr	r2, [r7, #12]
 800517a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800517e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005182:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2200      	movs	r2, #0
 8005188:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005190:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005194:	2b00      	cmp	r3, #0
 8005196:	d105      	bne.n	80051a4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	699b      	ldr	r3, [r3, #24]
 800519c:	f043 0210 	orr.w	r2, r3, #16
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	699a      	ldr	r2, [r3, #24]
 80051a8:	4b0f      	ldr	r3, [pc, #60]	; (80051e8 <USB_DevInit+0x2c4>)
 80051aa:	4313      	orrs	r3, r2
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80051b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d005      	beq.n	80051c2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	699b      	ldr	r3, [r3, #24]
 80051ba:	f043 0208 	orr.w	r2, r3, #8
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80051c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d107      	bne.n	80051d8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	699b      	ldr	r3, [r3, #24]
 80051cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80051d0:	f043 0304 	orr.w	r3, r3, #4
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80051d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3718      	adds	r7, #24
 80051de:	46bd      	mov	sp, r7
 80051e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80051e4:	b004      	add	sp, #16
 80051e6:	4770      	bx	lr
 80051e8:	803c3800 	.word	0x803c3800

080051ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b085      	sub	sp, #20
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80051f6:	2300      	movs	r3, #0
 80051f8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	3301      	adds	r3, #1
 80051fe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	4a13      	ldr	r2, [pc, #76]	; (8005250 <USB_FlushTxFifo+0x64>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d901      	bls.n	800520c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005208:	2303      	movs	r3, #3
 800520a:	e01b      	b.n	8005244 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	691b      	ldr	r3, [r3, #16]
 8005210:	2b00      	cmp	r3, #0
 8005212:	daf2      	bge.n	80051fa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005214:	2300      	movs	r3, #0
 8005216:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	019b      	lsls	r3, r3, #6
 800521c:	f043 0220 	orr.w	r2, r3, #32
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	3301      	adds	r3, #1
 8005228:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	4a08      	ldr	r2, [pc, #32]	; (8005250 <USB_FlushTxFifo+0x64>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d901      	bls.n	8005236 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005232:	2303      	movs	r3, #3
 8005234:	e006      	b.n	8005244 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	f003 0320 	and.w	r3, r3, #32
 800523e:	2b20      	cmp	r3, #32
 8005240:	d0f0      	beq.n	8005224 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005242:	2300      	movs	r3, #0
}
 8005244:	4618      	mov	r0, r3
 8005246:	3714      	adds	r7, #20
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr
 8005250:	00030d40 	.word	0x00030d40

08005254 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005254:	b480      	push	{r7}
 8005256:	b085      	sub	sp, #20
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800525c:	2300      	movs	r3, #0
 800525e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	3301      	adds	r3, #1
 8005264:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	4a11      	ldr	r2, [pc, #68]	; (80052b0 <USB_FlushRxFifo+0x5c>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d901      	bls.n	8005272 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800526e:	2303      	movs	r3, #3
 8005270:	e018      	b.n	80052a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	691b      	ldr	r3, [r3, #16]
 8005276:	2b00      	cmp	r3, #0
 8005278:	daf2      	bge.n	8005260 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800527a:	2300      	movs	r3, #0
 800527c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2210      	movs	r2, #16
 8005282:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	3301      	adds	r3, #1
 8005288:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	4a08      	ldr	r2, [pc, #32]	; (80052b0 <USB_FlushRxFifo+0x5c>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d901      	bls.n	8005296 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005292:	2303      	movs	r3, #3
 8005294:	e006      	b.n	80052a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	691b      	ldr	r3, [r3, #16]
 800529a:	f003 0310 	and.w	r3, r3, #16
 800529e:	2b10      	cmp	r3, #16
 80052a0:	d0f0      	beq.n	8005284 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80052a2:	2300      	movs	r3, #0
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3714      	adds	r7, #20
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr
 80052b0:	00030d40 	.word	0x00030d40

080052b4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b085      	sub	sp, #20
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	460b      	mov	r3, r1
 80052be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	78fb      	ldrb	r3, [r7, #3]
 80052ce:	68f9      	ldr	r1, [r7, #12]
 80052d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052d4:	4313      	orrs	r3, r2
 80052d6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80052d8:	2300      	movs	r3, #0
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3714      	adds	r7, #20
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr

080052e6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80052e6:	b480      	push	{r7}
 80052e8:	b085      	sub	sp, #20
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	68fa      	ldr	r2, [r7, #12]
 80052fc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005300:	f023 0303 	bic.w	r3, r3, #3
 8005304:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	68fa      	ldr	r2, [r7, #12]
 8005310:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005314:	f043 0302 	orr.w	r3, r3, #2
 8005318:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800531a:	2300      	movs	r3, #0
}
 800531c:	4618      	mov	r0, r3
 800531e:	3714      	adds	r7, #20
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005328:	b480      	push	{r7}
 800532a:	b083      	sub	sp, #12
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	695b      	ldr	r3, [r3, #20]
 8005334:	f003 0301 	and.w	r3, r3, #1
}
 8005338:	4618      	mov	r0, r3
 800533a:	370c      	adds	r7, #12
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005344:	b480      	push	{r7}
 8005346:	b085      	sub	sp, #20
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800534c:	2300      	movs	r3, #0
 800534e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	3301      	adds	r3, #1
 8005354:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	4a13      	ldr	r2, [pc, #76]	; (80053a8 <USB_CoreReset+0x64>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d901      	bls.n	8005362 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	e01b      	b.n	800539a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	691b      	ldr	r3, [r3, #16]
 8005366:	2b00      	cmp	r3, #0
 8005368:	daf2      	bge.n	8005350 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800536a:	2300      	movs	r3, #0
 800536c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	691b      	ldr	r3, [r3, #16]
 8005372:	f043 0201 	orr.w	r2, r3, #1
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	3301      	adds	r3, #1
 800537e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	4a09      	ldr	r2, [pc, #36]	; (80053a8 <USB_CoreReset+0x64>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d901      	bls.n	800538c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005388:	2303      	movs	r3, #3
 800538a:	e006      	b.n	800539a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	691b      	ldr	r3, [r3, #16]
 8005390:	f003 0301 	and.w	r3, r3, #1
 8005394:	2b01      	cmp	r3, #1
 8005396:	d0f0      	beq.n	800537a <USB_CoreReset+0x36>

  return HAL_OK;
 8005398:	2300      	movs	r3, #0
}
 800539a:	4618      	mov	r0, r3
 800539c:	3714      	adds	r7, #20
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr
 80053a6:	bf00      	nop
 80053a8:	00030d40 	.word	0x00030d40

080053ac <__errno>:
 80053ac:	4b01      	ldr	r3, [pc, #4]	; (80053b4 <__errno+0x8>)
 80053ae:	6818      	ldr	r0, [r3, #0]
 80053b0:	4770      	bx	lr
 80053b2:	bf00      	nop
 80053b4:	2000000c 	.word	0x2000000c

080053b8 <__libc_init_array>:
 80053b8:	b570      	push	{r4, r5, r6, lr}
 80053ba:	4d0d      	ldr	r5, [pc, #52]	; (80053f0 <__libc_init_array+0x38>)
 80053bc:	4c0d      	ldr	r4, [pc, #52]	; (80053f4 <__libc_init_array+0x3c>)
 80053be:	1b64      	subs	r4, r4, r5
 80053c0:	10a4      	asrs	r4, r4, #2
 80053c2:	2600      	movs	r6, #0
 80053c4:	42a6      	cmp	r6, r4
 80053c6:	d109      	bne.n	80053dc <__libc_init_array+0x24>
 80053c8:	4d0b      	ldr	r5, [pc, #44]	; (80053f8 <__libc_init_array+0x40>)
 80053ca:	4c0c      	ldr	r4, [pc, #48]	; (80053fc <__libc_init_array+0x44>)
 80053cc:	f004 fd1e 	bl	8009e0c <_init>
 80053d0:	1b64      	subs	r4, r4, r5
 80053d2:	10a4      	asrs	r4, r4, #2
 80053d4:	2600      	movs	r6, #0
 80053d6:	42a6      	cmp	r6, r4
 80053d8:	d105      	bne.n	80053e6 <__libc_init_array+0x2e>
 80053da:	bd70      	pop	{r4, r5, r6, pc}
 80053dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80053e0:	4798      	blx	r3
 80053e2:	3601      	adds	r6, #1
 80053e4:	e7ee      	b.n	80053c4 <__libc_init_array+0xc>
 80053e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80053ea:	4798      	blx	r3
 80053ec:	3601      	adds	r6, #1
 80053ee:	e7f2      	b.n	80053d6 <__libc_init_array+0x1e>
 80053f0:	0800a324 	.word	0x0800a324
 80053f4:	0800a324 	.word	0x0800a324
 80053f8:	0800a324 	.word	0x0800a324
 80053fc:	0800a328 	.word	0x0800a328

08005400 <memset>:
 8005400:	4402      	add	r2, r0
 8005402:	4603      	mov	r3, r0
 8005404:	4293      	cmp	r3, r2
 8005406:	d100      	bne.n	800540a <memset+0xa>
 8005408:	4770      	bx	lr
 800540a:	f803 1b01 	strb.w	r1, [r3], #1
 800540e:	e7f9      	b.n	8005404 <memset+0x4>

08005410 <__cvt>:
 8005410:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005414:	ec55 4b10 	vmov	r4, r5, d0
 8005418:	2d00      	cmp	r5, #0
 800541a:	460e      	mov	r6, r1
 800541c:	4619      	mov	r1, r3
 800541e:	462b      	mov	r3, r5
 8005420:	bfbb      	ittet	lt
 8005422:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005426:	461d      	movlt	r5, r3
 8005428:	2300      	movge	r3, #0
 800542a:	232d      	movlt	r3, #45	; 0x2d
 800542c:	700b      	strb	r3, [r1, #0]
 800542e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005430:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005434:	4691      	mov	r9, r2
 8005436:	f023 0820 	bic.w	r8, r3, #32
 800543a:	bfbc      	itt	lt
 800543c:	4622      	movlt	r2, r4
 800543e:	4614      	movlt	r4, r2
 8005440:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005444:	d005      	beq.n	8005452 <__cvt+0x42>
 8005446:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800544a:	d100      	bne.n	800544e <__cvt+0x3e>
 800544c:	3601      	adds	r6, #1
 800544e:	2102      	movs	r1, #2
 8005450:	e000      	b.n	8005454 <__cvt+0x44>
 8005452:	2103      	movs	r1, #3
 8005454:	ab03      	add	r3, sp, #12
 8005456:	9301      	str	r3, [sp, #4]
 8005458:	ab02      	add	r3, sp, #8
 800545a:	9300      	str	r3, [sp, #0]
 800545c:	ec45 4b10 	vmov	d0, r4, r5
 8005460:	4653      	mov	r3, sl
 8005462:	4632      	mov	r2, r6
 8005464:	f001 fefc 	bl	8007260 <_dtoa_r>
 8005468:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800546c:	4607      	mov	r7, r0
 800546e:	d102      	bne.n	8005476 <__cvt+0x66>
 8005470:	f019 0f01 	tst.w	r9, #1
 8005474:	d022      	beq.n	80054bc <__cvt+0xac>
 8005476:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800547a:	eb07 0906 	add.w	r9, r7, r6
 800547e:	d110      	bne.n	80054a2 <__cvt+0x92>
 8005480:	783b      	ldrb	r3, [r7, #0]
 8005482:	2b30      	cmp	r3, #48	; 0x30
 8005484:	d10a      	bne.n	800549c <__cvt+0x8c>
 8005486:	2200      	movs	r2, #0
 8005488:	2300      	movs	r3, #0
 800548a:	4620      	mov	r0, r4
 800548c:	4629      	mov	r1, r5
 800548e:	f7fb fb2b 	bl	8000ae8 <__aeabi_dcmpeq>
 8005492:	b918      	cbnz	r0, 800549c <__cvt+0x8c>
 8005494:	f1c6 0601 	rsb	r6, r6, #1
 8005498:	f8ca 6000 	str.w	r6, [sl]
 800549c:	f8da 3000 	ldr.w	r3, [sl]
 80054a0:	4499      	add	r9, r3
 80054a2:	2200      	movs	r2, #0
 80054a4:	2300      	movs	r3, #0
 80054a6:	4620      	mov	r0, r4
 80054a8:	4629      	mov	r1, r5
 80054aa:	f7fb fb1d 	bl	8000ae8 <__aeabi_dcmpeq>
 80054ae:	b108      	cbz	r0, 80054b4 <__cvt+0xa4>
 80054b0:	f8cd 900c 	str.w	r9, [sp, #12]
 80054b4:	2230      	movs	r2, #48	; 0x30
 80054b6:	9b03      	ldr	r3, [sp, #12]
 80054b8:	454b      	cmp	r3, r9
 80054ba:	d307      	bcc.n	80054cc <__cvt+0xbc>
 80054bc:	9b03      	ldr	r3, [sp, #12]
 80054be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80054c0:	1bdb      	subs	r3, r3, r7
 80054c2:	4638      	mov	r0, r7
 80054c4:	6013      	str	r3, [r2, #0]
 80054c6:	b004      	add	sp, #16
 80054c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054cc:	1c59      	adds	r1, r3, #1
 80054ce:	9103      	str	r1, [sp, #12]
 80054d0:	701a      	strb	r2, [r3, #0]
 80054d2:	e7f0      	b.n	80054b6 <__cvt+0xa6>

080054d4 <__exponent>:
 80054d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80054d6:	4603      	mov	r3, r0
 80054d8:	2900      	cmp	r1, #0
 80054da:	bfb8      	it	lt
 80054dc:	4249      	neglt	r1, r1
 80054de:	f803 2b02 	strb.w	r2, [r3], #2
 80054e2:	bfb4      	ite	lt
 80054e4:	222d      	movlt	r2, #45	; 0x2d
 80054e6:	222b      	movge	r2, #43	; 0x2b
 80054e8:	2909      	cmp	r1, #9
 80054ea:	7042      	strb	r2, [r0, #1]
 80054ec:	dd2a      	ble.n	8005544 <__exponent+0x70>
 80054ee:	f10d 0407 	add.w	r4, sp, #7
 80054f2:	46a4      	mov	ip, r4
 80054f4:	270a      	movs	r7, #10
 80054f6:	46a6      	mov	lr, r4
 80054f8:	460a      	mov	r2, r1
 80054fa:	fb91 f6f7 	sdiv	r6, r1, r7
 80054fe:	fb07 1516 	mls	r5, r7, r6, r1
 8005502:	3530      	adds	r5, #48	; 0x30
 8005504:	2a63      	cmp	r2, #99	; 0x63
 8005506:	f104 34ff 	add.w	r4, r4, #4294967295
 800550a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800550e:	4631      	mov	r1, r6
 8005510:	dcf1      	bgt.n	80054f6 <__exponent+0x22>
 8005512:	3130      	adds	r1, #48	; 0x30
 8005514:	f1ae 0502 	sub.w	r5, lr, #2
 8005518:	f804 1c01 	strb.w	r1, [r4, #-1]
 800551c:	1c44      	adds	r4, r0, #1
 800551e:	4629      	mov	r1, r5
 8005520:	4561      	cmp	r1, ip
 8005522:	d30a      	bcc.n	800553a <__exponent+0x66>
 8005524:	f10d 0209 	add.w	r2, sp, #9
 8005528:	eba2 020e 	sub.w	r2, r2, lr
 800552c:	4565      	cmp	r5, ip
 800552e:	bf88      	it	hi
 8005530:	2200      	movhi	r2, #0
 8005532:	4413      	add	r3, r2
 8005534:	1a18      	subs	r0, r3, r0
 8005536:	b003      	add	sp, #12
 8005538:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800553a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800553e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005542:	e7ed      	b.n	8005520 <__exponent+0x4c>
 8005544:	2330      	movs	r3, #48	; 0x30
 8005546:	3130      	adds	r1, #48	; 0x30
 8005548:	7083      	strb	r3, [r0, #2]
 800554a:	70c1      	strb	r1, [r0, #3]
 800554c:	1d03      	adds	r3, r0, #4
 800554e:	e7f1      	b.n	8005534 <__exponent+0x60>

08005550 <_printf_float>:
 8005550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005554:	ed2d 8b02 	vpush	{d8}
 8005558:	b08d      	sub	sp, #52	; 0x34
 800555a:	460c      	mov	r4, r1
 800555c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005560:	4616      	mov	r6, r2
 8005562:	461f      	mov	r7, r3
 8005564:	4605      	mov	r5, r0
 8005566:	f003 f98f 	bl	8008888 <_localeconv_r>
 800556a:	f8d0 a000 	ldr.w	sl, [r0]
 800556e:	4650      	mov	r0, sl
 8005570:	f7fa fe3e 	bl	80001f0 <strlen>
 8005574:	2300      	movs	r3, #0
 8005576:	930a      	str	r3, [sp, #40]	; 0x28
 8005578:	6823      	ldr	r3, [r4, #0]
 800557a:	9305      	str	r3, [sp, #20]
 800557c:	f8d8 3000 	ldr.w	r3, [r8]
 8005580:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005584:	3307      	adds	r3, #7
 8005586:	f023 0307 	bic.w	r3, r3, #7
 800558a:	f103 0208 	add.w	r2, r3, #8
 800558e:	f8c8 2000 	str.w	r2, [r8]
 8005592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005596:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800559a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800559e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80055a2:	9307      	str	r3, [sp, #28]
 80055a4:	f8cd 8018 	str.w	r8, [sp, #24]
 80055a8:	ee08 0a10 	vmov	s16, r0
 80055ac:	4b9f      	ldr	r3, [pc, #636]	; (800582c <_printf_float+0x2dc>)
 80055ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80055b2:	f04f 32ff 	mov.w	r2, #4294967295
 80055b6:	f7fb fac9 	bl	8000b4c <__aeabi_dcmpun>
 80055ba:	bb88      	cbnz	r0, 8005620 <_printf_float+0xd0>
 80055bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80055c0:	4b9a      	ldr	r3, [pc, #616]	; (800582c <_printf_float+0x2dc>)
 80055c2:	f04f 32ff 	mov.w	r2, #4294967295
 80055c6:	f7fb faa3 	bl	8000b10 <__aeabi_dcmple>
 80055ca:	bb48      	cbnz	r0, 8005620 <_printf_float+0xd0>
 80055cc:	2200      	movs	r2, #0
 80055ce:	2300      	movs	r3, #0
 80055d0:	4640      	mov	r0, r8
 80055d2:	4649      	mov	r1, r9
 80055d4:	f7fb fa92 	bl	8000afc <__aeabi_dcmplt>
 80055d8:	b110      	cbz	r0, 80055e0 <_printf_float+0x90>
 80055da:	232d      	movs	r3, #45	; 0x2d
 80055dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055e0:	4b93      	ldr	r3, [pc, #588]	; (8005830 <_printf_float+0x2e0>)
 80055e2:	4894      	ldr	r0, [pc, #592]	; (8005834 <_printf_float+0x2e4>)
 80055e4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80055e8:	bf94      	ite	ls
 80055ea:	4698      	movls	r8, r3
 80055ec:	4680      	movhi	r8, r0
 80055ee:	2303      	movs	r3, #3
 80055f0:	6123      	str	r3, [r4, #16]
 80055f2:	9b05      	ldr	r3, [sp, #20]
 80055f4:	f023 0204 	bic.w	r2, r3, #4
 80055f8:	6022      	str	r2, [r4, #0]
 80055fa:	f04f 0900 	mov.w	r9, #0
 80055fe:	9700      	str	r7, [sp, #0]
 8005600:	4633      	mov	r3, r6
 8005602:	aa0b      	add	r2, sp, #44	; 0x2c
 8005604:	4621      	mov	r1, r4
 8005606:	4628      	mov	r0, r5
 8005608:	f000 f9d8 	bl	80059bc <_printf_common>
 800560c:	3001      	adds	r0, #1
 800560e:	f040 8090 	bne.w	8005732 <_printf_float+0x1e2>
 8005612:	f04f 30ff 	mov.w	r0, #4294967295
 8005616:	b00d      	add	sp, #52	; 0x34
 8005618:	ecbd 8b02 	vpop	{d8}
 800561c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005620:	4642      	mov	r2, r8
 8005622:	464b      	mov	r3, r9
 8005624:	4640      	mov	r0, r8
 8005626:	4649      	mov	r1, r9
 8005628:	f7fb fa90 	bl	8000b4c <__aeabi_dcmpun>
 800562c:	b140      	cbz	r0, 8005640 <_printf_float+0xf0>
 800562e:	464b      	mov	r3, r9
 8005630:	2b00      	cmp	r3, #0
 8005632:	bfbc      	itt	lt
 8005634:	232d      	movlt	r3, #45	; 0x2d
 8005636:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800563a:	487f      	ldr	r0, [pc, #508]	; (8005838 <_printf_float+0x2e8>)
 800563c:	4b7f      	ldr	r3, [pc, #508]	; (800583c <_printf_float+0x2ec>)
 800563e:	e7d1      	b.n	80055e4 <_printf_float+0x94>
 8005640:	6863      	ldr	r3, [r4, #4]
 8005642:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005646:	9206      	str	r2, [sp, #24]
 8005648:	1c5a      	adds	r2, r3, #1
 800564a:	d13f      	bne.n	80056cc <_printf_float+0x17c>
 800564c:	2306      	movs	r3, #6
 800564e:	6063      	str	r3, [r4, #4]
 8005650:	9b05      	ldr	r3, [sp, #20]
 8005652:	6861      	ldr	r1, [r4, #4]
 8005654:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005658:	2300      	movs	r3, #0
 800565a:	9303      	str	r3, [sp, #12]
 800565c:	ab0a      	add	r3, sp, #40	; 0x28
 800565e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005662:	ab09      	add	r3, sp, #36	; 0x24
 8005664:	ec49 8b10 	vmov	d0, r8, r9
 8005668:	9300      	str	r3, [sp, #0]
 800566a:	6022      	str	r2, [r4, #0]
 800566c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005670:	4628      	mov	r0, r5
 8005672:	f7ff fecd 	bl	8005410 <__cvt>
 8005676:	9b06      	ldr	r3, [sp, #24]
 8005678:	9909      	ldr	r1, [sp, #36]	; 0x24
 800567a:	2b47      	cmp	r3, #71	; 0x47
 800567c:	4680      	mov	r8, r0
 800567e:	d108      	bne.n	8005692 <_printf_float+0x142>
 8005680:	1cc8      	adds	r0, r1, #3
 8005682:	db02      	blt.n	800568a <_printf_float+0x13a>
 8005684:	6863      	ldr	r3, [r4, #4]
 8005686:	4299      	cmp	r1, r3
 8005688:	dd41      	ble.n	800570e <_printf_float+0x1be>
 800568a:	f1ab 0b02 	sub.w	fp, fp, #2
 800568e:	fa5f fb8b 	uxtb.w	fp, fp
 8005692:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005696:	d820      	bhi.n	80056da <_printf_float+0x18a>
 8005698:	3901      	subs	r1, #1
 800569a:	465a      	mov	r2, fp
 800569c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80056a0:	9109      	str	r1, [sp, #36]	; 0x24
 80056a2:	f7ff ff17 	bl	80054d4 <__exponent>
 80056a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80056a8:	1813      	adds	r3, r2, r0
 80056aa:	2a01      	cmp	r2, #1
 80056ac:	4681      	mov	r9, r0
 80056ae:	6123      	str	r3, [r4, #16]
 80056b0:	dc02      	bgt.n	80056b8 <_printf_float+0x168>
 80056b2:	6822      	ldr	r2, [r4, #0]
 80056b4:	07d2      	lsls	r2, r2, #31
 80056b6:	d501      	bpl.n	80056bc <_printf_float+0x16c>
 80056b8:	3301      	adds	r3, #1
 80056ba:	6123      	str	r3, [r4, #16]
 80056bc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d09c      	beq.n	80055fe <_printf_float+0xae>
 80056c4:	232d      	movs	r3, #45	; 0x2d
 80056c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056ca:	e798      	b.n	80055fe <_printf_float+0xae>
 80056cc:	9a06      	ldr	r2, [sp, #24]
 80056ce:	2a47      	cmp	r2, #71	; 0x47
 80056d0:	d1be      	bne.n	8005650 <_printf_float+0x100>
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d1bc      	bne.n	8005650 <_printf_float+0x100>
 80056d6:	2301      	movs	r3, #1
 80056d8:	e7b9      	b.n	800564e <_printf_float+0xfe>
 80056da:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80056de:	d118      	bne.n	8005712 <_printf_float+0x1c2>
 80056e0:	2900      	cmp	r1, #0
 80056e2:	6863      	ldr	r3, [r4, #4]
 80056e4:	dd0b      	ble.n	80056fe <_printf_float+0x1ae>
 80056e6:	6121      	str	r1, [r4, #16]
 80056e8:	b913      	cbnz	r3, 80056f0 <_printf_float+0x1a0>
 80056ea:	6822      	ldr	r2, [r4, #0]
 80056ec:	07d0      	lsls	r0, r2, #31
 80056ee:	d502      	bpl.n	80056f6 <_printf_float+0x1a6>
 80056f0:	3301      	adds	r3, #1
 80056f2:	440b      	add	r3, r1
 80056f4:	6123      	str	r3, [r4, #16]
 80056f6:	65a1      	str	r1, [r4, #88]	; 0x58
 80056f8:	f04f 0900 	mov.w	r9, #0
 80056fc:	e7de      	b.n	80056bc <_printf_float+0x16c>
 80056fe:	b913      	cbnz	r3, 8005706 <_printf_float+0x1b6>
 8005700:	6822      	ldr	r2, [r4, #0]
 8005702:	07d2      	lsls	r2, r2, #31
 8005704:	d501      	bpl.n	800570a <_printf_float+0x1ba>
 8005706:	3302      	adds	r3, #2
 8005708:	e7f4      	b.n	80056f4 <_printf_float+0x1a4>
 800570a:	2301      	movs	r3, #1
 800570c:	e7f2      	b.n	80056f4 <_printf_float+0x1a4>
 800570e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005712:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005714:	4299      	cmp	r1, r3
 8005716:	db05      	blt.n	8005724 <_printf_float+0x1d4>
 8005718:	6823      	ldr	r3, [r4, #0]
 800571a:	6121      	str	r1, [r4, #16]
 800571c:	07d8      	lsls	r0, r3, #31
 800571e:	d5ea      	bpl.n	80056f6 <_printf_float+0x1a6>
 8005720:	1c4b      	adds	r3, r1, #1
 8005722:	e7e7      	b.n	80056f4 <_printf_float+0x1a4>
 8005724:	2900      	cmp	r1, #0
 8005726:	bfd4      	ite	le
 8005728:	f1c1 0202 	rsble	r2, r1, #2
 800572c:	2201      	movgt	r2, #1
 800572e:	4413      	add	r3, r2
 8005730:	e7e0      	b.n	80056f4 <_printf_float+0x1a4>
 8005732:	6823      	ldr	r3, [r4, #0]
 8005734:	055a      	lsls	r2, r3, #21
 8005736:	d407      	bmi.n	8005748 <_printf_float+0x1f8>
 8005738:	6923      	ldr	r3, [r4, #16]
 800573a:	4642      	mov	r2, r8
 800573c:	4631      	mov	r1, r6
 800573e:	4628      	mov	r0, r5
 8005740:	47b8      	blx	r7
 8005742:	3001      	adds	r0, #1
 8005744:	d12c      	bne.n	80057a0 <_printf_float+0x250>
 8005746:	e764      	b.n	8005612 <_printf_float+0xc2>
 8005748:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800574c:	f240 80e0 	bls.w	8005910 <_printf_float+0x3c0>
 8005750:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005754:	2200      	movs	r2, #0
 8005756:	2300      	movs	r3, #0
 8005758:	f7fb f9c6 	bl	8000ae8 <__aeabi_dcmpeq>
 800575c:	2800      	cmp	r0, #0
 800575e:	d034      	beq.n	80057ca <_printf_float+0x27a>
 8005760:	4a37      	ldr	r2, [pc, #220]	; (8005840 <_printf_float+0x2f0>)
 8005762:	2301      	movs	r3, #1
 8005764:	4631      	mov	r1, r6
 8005766:	4628      	mov	r0, r5
 8005768:	47b8      	blx	r7
 800576a:	3001      	adds	r0, #1
 800576c:	f43f af51 	beq.w	8005612 <_printf_float+0xc2>
 8005770:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005774:	429a      	cmp	r2, r3
 8005776:	db02      	blt.n	800577e <_printf_float+0x22e>
 8005778:	6823      	ldr	r3, [r4, #0]
 800577a:	07d8      	lsls	r0, r3, #31
 800577c:	d510      	bpl.n	80057a0 <_printf_float+0x250>
 800577e:	ee18 3a10 	vmov	r3, s16
 8005782:	4652      	mov	r2, sl
 8005784:	4631      	mov	r1, r6
 8005786:	4628      	mov	r0, r5
 8005788:	47b8      	blx	r7
 800578a:	3001      	adds	r0, #1
 800578c:	f43f af41 	beq.w	8005612 <_printf_float+0xc2>
 8005790:	f04f 0800 	mov.w	r8, #0
 8005794:	f104 091a 	add.w	r9, r4, #26
 8005798:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800579a:	3b01      	subs	r3, #1
 800579c:	4543      	cmp	r3, r8
 800579e:	dc09      	bgt.n	80057b4 <_printf_float+0x264>
 80057a0:	6823      	ldr	r3, [r4, #0]
 80057a2:	079b      	lsls	r3, r3, #30
 80057a4:	f100 8105 	bmi.w	80059b2 <_printf_float+0x462>
 80057a8:	68e0      	ldr	r0, [r4, #12]
 80057aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057ac:	4298      	cmp	r0, r3
 80057ae:	bfb8      	it	lt
 80057b0:	4618      	movlt	r0, r3
 80057b2:	e730      	b.n	8005616 <_printf_float+0xc6>
 80057b4:	2301      	movs	r3, #1
 80057b6:	464a      	mov	r2, r9
 80057b8:	4631      	mov	r1, r6
 80057ba:	4628      	mov	r0, r5
 80057bc:	47b8      	blx	r7
 80057be:	3001      	adds	r0, #1
 80057c0:	f43f af27 	beq.w	8005612 <_printf_float+0xc2>
 80057c4:	f108 0801 	add.w	r8, r8, #1
 80057c8:	e7e6      	b.n	8005798 <_printf_float+0x248>
 80057ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	dc39      	bgt.n	8005844 <_printf_float+0x2f4>
 80057d0:	4a1b      	ldr	r2, [pc, #108]	; (8005840 <_printf_float+0x2f0>)
 80057d2:	2301      	movs	r3, #1
 80057d4:	4631      	mov	r1, r6
 80057d6:	4628      	mov	r0, r5
 80057d8:	47b8      	blx	r7
 80057da:	3001      	adds	r0, #1
 80057dc:	f43f af19 	beq.w	8005612 <_printf_float+0xc2>
 80057e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80057e4:	4313      	orrs	r3, r2
 80057e6:	d102      	bne.n	80057ee <_printf_float+0x29e>
 80057e8:	6823      	ldr	r3, [r4, #0]
 80057ea:	07d9      	lsls	r1, r3, #31
 80057ec:	d5d8      	bpl.n	80057a0 <_printf_float+0x250>
 80057ee:	ee18 3a10 	vmov	r3, s16
 80057f2:	4652      	mov	r2, sl
 80057f4:	4631      	mov	r1, r6
 80057f6:	4628      	mov	r0, r5
 80057f8:	47b8      	blx	r7
 80057fa:	3001      	adds	r0, #1
 80057fc:	f43f af09 	beq.w	8005612 <_printf_float+0xc2>
 8005800:	f04f 0900 	mov.w	r9, #0
 8005804:	f104 0a1a 	add.w	sl, r4, #26
 8005808:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800580a:	425b      	negs	r3, r3
 800580c:	454b      	cmp	r3, r9
 800580e:	dc01      	bgt.n	8005814 <_printf_float+0x2c4>
 8005810:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005812:	e792      	b.n	800573a <_printf_float+0x1ea>
 8005814:	2301      	movs	r3, #1
 8005816:	4652      	mov	r2, sl
 8005818:	4631      	mov	r1, r6
 800581a:	4628      	mov	r0, r5
 800581c:	47b8      	blx	r7
 800581e:	3001      	adds	r0, #1
 8005820:	f43f aef7 	beq.w	8005612 <_printf_float+0xc2>
 8005824:	f109 0901 	add.w	r9, r9, #1
 8005828:	e7ee      	b.n	8005808 <_printf_float+0x2b8>
 800582a:	bf00      	nop
 800582c:	7fefffff 	.word	0x7fefffff
 8005830:	08009e70 	.word	0x08009e70
 8005834:	08009e74 	.word	0x08009e74
 8005838:	08009e7c 	.word	0x08009e7c
 800583c:	08009e78 	.word	0x08009e78
 8005840:	08009e80 	.word	0x08009e80
 8005844:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005846:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005848:	429a      	cmp	r2, r3
 800584a:	bfa8      	it	ge
 800584c:	461a      	movge	r2, r3
 800584e:	2a00      	cmp	r2, #0
 8005850:	4691      	mov	r9, r2
 8005852:	dc37      	bgt.n	80058c4 <_printf_float+0x374>
 8005854:	f04f 0b00 	mov.w	fp, #0
 8005858:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800585c:	f104 021a 	add.w	r2, r4, #26
 8005860:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005862:	9305      	str	r3, [sp, #20]
 8005864:	eba3 0309 	sub.w	r3, r3, r9
 8005868:	455b      	cmp	r3, fp
 800586a:	dc33      	bgt.n	80058d4 <_printf_float+0x384>
 800586c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005870:	429a      	cmp	r2, r3
 8005872:	db3b      	blt.n	80058ec <_printf_float+0x39c>
 8005874:	6823      	ldr	r3, [r4, #0]
 8005876:	07da      	lsls	r2, r3, #31
 8005878:	d438      	bmi.n	80058ec <_printf_float+0x39c>
 800587a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800587c:	9a05      	ldr	r2, [sp, #20]
 800587e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005880:	1a9a      	subs	r2, r3, r2
 8005882:	eba3 0901 	sub.w	r9, r3, r1
 8005886:	4591      	cmp	r9, r2
 8005888:	bfa8      	it	ge
 800588a:	4691      	movge	r9, r2
 800588c:	f1b9 0f00 	cmp.w	r9, #0
 8005890:	dc35      	bgt.n	80058fe <_printf_float+0x3ae>
 8005892:	f04f 0800 	mov.w	r8, #0
 8005896:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800589a:	f104 0a1a 	add.w	sl, r4, #26
 800589e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80058a2:	1a9b      	subs	r3, r3, r2
 80058a4:	eba3 0309 	sub.w	r3, r3, r9
 80058a8:	4543      	cmp	r3, r8
 80058aa:	f77f af79 	ble.w	80057a0 <_printf_float+0x250>
 80058ae:	2301      	movs	r3, #1
 80058b0:	4652      	mov	r2, sl
 80058b2:	4631      	mov	r1, r6
 80058b4:	4628      	mov	r0, r5
 80058b6:	47b8      	blx	r7
 80058b8:	3001      	adds	r0, #1
 80058ba:	f43f aeaa 	beq.w	8005612 <_printf_float+0xc2>
 80058be:	f108 0801 	add.w	r8, r8, #1
 80058c2:	e7ec      	b.n	800589e <_printf_float+0x34e>
 80058c4:	4613      	mov	r3, r2
 80058c6:	4631      	mov	r1, r6
 80058c8:	4642      	mov	r2, r8
 80058ca:	4628      	mov	r0, r5
 80058cc:	47b8      	blx	r7
 80058ce:	3001      	adds	r0, #1
 80058d0:	d1c0      	bne.n	8005854 <_printf_float+0x304>
 80058d2:	e69e      	b.n	8005612 <_printf_float+0xc2>
 80058d4:	2301      	movs	r3, #1
 80058d6:	4631      	mov	r1, r6
 80058d8:	4628      	mov	r0, r5
 80058da:	9205      	str	r2, [sp, #20]
 80058dc:	47b8      	blx	r7
 80058de:	3001      	adds	r0, #1
 80058e0:	f43f ae97 	beq.w	8005612 <_printf_float+0xc2>
 80058e4:	9a05      	ldr	r2, [sp, #20]
 80058e6:	f10b 0b01 	add.w	fp, fp, #1
 80058ea:	e7b9      	b.n	8005860 <_printf_float+0x310>
 80058ec:	ee18 3a10 	vmov	r3, s16
 80058f0:	4652      	mov	r2, sl
 80058f2:	4631      	mov	r1, r6
 80058f4:	4628      	mov	r0, r5
 80058f6:	47b8      	blx	r7
 80058f8:	3001      	adds	r0, #1
 80058fa:	d1be      	bne.n	800587a <_printf_float+0x32a>
 80058fc:	e689      	b.n	8005612 <_printf_float+0xc2>
 80058fe:	9a05      	ldr	r2, [sp, #20]
 8005900:	464b      	mov	r3, r9
 8005902:	4442      	add	r2, r8
 8005904:	4631      	mov	r1, r6
 8005906:	4628      	mov	r0, r5
 8005908:	47b8      	blx	r7
 800590a:	3001      	adds	r0, #1
 800590c:	d1c1      	bne.n	8005892 <_printf_float+0x342>
 800590e:	e680      	b.n	8005612 <_printf_float+0xc2>
 8005910:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005912:	2a01      	cmp	r2, #1
 8005914:	dc01      	bgt.n	800591a <_printf_float+0x3ca>
 8005916:	07db      	lsls	r3, r3, #31
 8005918:	d538      	bpl.n	800598c <_printf_float+0x43c>
 800591a:	2301      	movs	r3, #1
 800591c:	4642      	mov	r2, r8
 800591e:	4631      	mov	r1, r6
 8005920:	4628      	mov	r0, r5
 8005922:	47b8      	blx	r7
 8005924:	3001      	adds	r0, #1
 8005926:	f43f ae74 	beq.w	8005612 <_printf_float+0xc2>
 800592a:	ee18 3a10 	vmov	r3, s16
 800592e:	4652      	mov	r2, sl
 8005930:	4631      	mov	r1, r6
 8005932:	4628      	mov	r0, r5
 8005934:	47b8      	blx	r7
 8005936:	3001      	adds	r0, #1
 8005938:	f43f ae6b 	beq.w	8005612 <_printf_float+0xc2>
 800593c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005940:	2200      	movs	r2, #0
 8005942:	2300      	movs	r3, #0
 8005944:	f7fb f8d0 	bl	8000ae8 <__aeabi_dcmpeq>
 8005948:	b9d8      	cbnz	r0, 8005982 <_printf_float+0x432>
 800594a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800594c:	f108 0201 	add.w	r2, r8, #1
 8005950:	3b01      	subs	r3, #1
 8005952:	4631      	mov	r1, r6
 8005954:	4628      	mov	r0, r5
 8005956:	47b8      	blx	r7
 8005958:	3001      	adds	r0, #1
 800595a:	d10e      	bne.n	800597a <_printf_float+0x42a>
 800595c:	e659      	b.n	8005612 <_printf_float+0xc2>
 800595e:	2301      	movs	r3, #1
 8005960:	4652      	mov	r2, sl
 8005962:	4631      	mov	r1, r6
 8005964:	4628      	mov	r0, r5
 8005966:	47b8      	blx	r7
 8005968:	3001      	adds	r0, #1
 800596a:	f43f ae52 	beq.w	8005612 <_printf_float+0xc2>
 800596e:	f108 0801 	add.w	r8, r8, #1
 8005972:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005974:	3b01      	subs	r3, #1
 8005976:	4543      	cmp	r3, r8
 8005978:	dcf1      	bgt.n	800595e <_printf_float+0x40e>
 800597a:	464b      	mov	r3, r9
 800597c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005980:	e6dc      	b.n	800573c <_printf_float+0x1ec>
 8005982:	f04f 0800 	mov.w	r8, #0
 8005986:	f104 0a1a 	add.w	sl, r4, #26
 800598a:	e7f2      	b.n	8005972 <_printf_float+0x422>
 800598c:	2301      	movs	r3, #1
 800598e:	4642      	mov	r2, r8
 8005990:	e7df      	b.n	8005952 <_printf_float+0x402>
 8005992:	2301      	movs	r3, #1
 8005994:	464a      	mov	r2, r9
 8005996:	4631      	mov	r1, r6
 8005998:	4628      	mov	r0, r5
 800599a:	47b8      	blx	r7
 800599c:	3001      	adds	r0, #1
 800599e:	f43f ae38 	beq.w	8005612 <_printf_float+0xc2>
 80059a2:	f108 0801 	add.w	r8, r8, #1
 80059a6:	68e3      	ldr	r3, [r4, #12]
 80059a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80059aa:	1a5b      	subs	r3, r3, r1
 80059ac:	4543      	cmp	r3, r8
 80059ae:	dcf0      	bgt.n	8005992 <_printf_float+0x442>
 80059b0:	e6fa      	b.n	80057a8 <_printf_float+0x258>
 80059b2:	f04f 0800 	mov.w	r8, #0
 80059b6:	f104 0919 	add.w	r9, r4, #25
 80059ba:	e7f4      	b.n	80059a6 <_printf_float+0x456>

080059bc <_printf_common>:
 80059bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059c0:	4616      	mov	r6, r2
 80059c2:	4699      	mov	r9, r3
 80059c4:	688a      	ldr	r2, [r1, #8]
 80059c6:	690b      	ldr	r3, [r1, #16]
 80059c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80059cc:	4293      	cmp	r3, r2
 80059ce:	bfb8      	it	lt
 80059d0:	4613      	movlt	r3, r2
 80059d2:	6033      	str	r3, [r6, #0]
 80059d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80059d8:	4607      	mov	r7, r0
 80059da:	460c      	mov	r4, r1
 80059dc:	b10a      	cbz	r2, 80059e2 <_printf_common+0x26>
 80059de:	3301      	adds	r3, #1
 80059e0:	6033      	str	r3, [r6, #0]
 80059e2:	6823      	ldr	r3, [r4, #0]
 80059e4:	0699      	lsls	r1, r3, #26
 80059e6:	bf42      	ittt	mi
 80059e8:	6833      	ldrmi	r3, [r6, #0]
 80059ea:	3302      	addmi	r3, #2
 80059ec:	6033      	strmi	r3, [r6, #0]
 80059ee:	6825      	ldr	r5, [r4, #0]
 80059f0:	f015 0506 	ands.w	r5, r5, #6
 80059f4:	d106      	bne.n	8005a04 <_printf_common+0x48>
 80059f6:	f104 0a19 	add.w	sl, r4, #25
 80059fa:	68e3      	ldr	r3, [r4, #12]
 80059fc:	6832      	ldr	r2, [r6, #0]
 80059fe:	1a9b      	subs	r3, r3, r2
 8005a00:	42ab      	cmp	r3, r5
 8005a02:	dc26      	bgt.n	8005a52 <_printf_common+0x96>
 8005a04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005a08:	1e13      	subs	r3, r2, #0
 8005a0a:	6822      	ldr	r2, [r4, #0]
 8005a0c:	bf18      	it	ne
 8005a0e:	2301      	movne	r3, #1
 8005a10:	0692      	lsls	r2, r2, #26
 8005a12:	d42b      	bmi.n	8005a6c <_printf_common+0xb0>
 8005a14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a18:	4649      	mov	r1, r9
 8005a1a:	4638      	mov	r0, r7
 8005a1c:	47c0      	blx	r8
 8005a1e:	3001      	adds	r0, #1
 8005a20:	d01e      	beq.n	8005a60 <_printf_common+0xa4>
 8005a22:	6823      	ldr	r3, [r4, #0]
 8005a24:	68e5      	ldr	r5, [r4, #12]
 8005a26:	6832      	ldr	r2, [r6, #0]
 8005a28:	f003 0306 	and.w	r3, r3, #6
 8005a2c:	2b04      	cmp	r3, #4
 8005a2e:	bf08      	it	eq
 8005a30:	1aad      	subeq	r5, r5, r2
 8005a32:	68a3      	ldr	r3, [r4, #8]
 8005a34:	6922      	ldr	r2, [r4, #16]
 8005a36:	bf0c      	ite	eq
 8005a38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a3c:	2500      	movne	r5, #0
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	bfc4      	itt	gt
 8005a42:	1a9b      	subgt	r3, r3, r2
 8005a44:	18ed      	addgt	r5, r5, r3
 8005a46:	2600      	movs	r6, #0
 8005a48:	341a      	adds	r4, #26
 8005a4a:	42b5      	cmp	r5, r6
 8005a4c:	d11a      	bne.n	8005a84 <_printf_common+0xc8>
 8005a4e:	2000      	movs	r0, #0
 8005a50:	e008      	b.n	8005a64 <_printf_common+0xa8>
 8005a52:	2301      	movs	r3, #1
 8005a54:	4652      	mov	r2, sl
 8005a56:	4649      	mov	r1, r9
 8005a58:	4638      	mov	r0, r7
 8005a5a:	47c0      	blx	r8
 8005a5c:	3001      	adds	r0, #1
 8005a5e:	d103      	bne.n	8005a68 <_printf_common+0xac>
 8005a60:	f04f 30ff 	mov.w	r0, #4294967295
 8005a64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a68:	3501      	adds	r5, #1
 8005a6a:	e7c6      	b.n	80059fa <_printf_common+0x3e>
 8005a6c:	18e1      	adds	r1, r4, r3
 8005a6e:	1c5a      	adds	r2, r3, #1
 8005a70:	2030      	movs	r0, #48	; 0x30
 8005a72:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a76:	4422      	add	r2, r4
 8005a78:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005a7c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005a80:	3302      	adds	r3, #2
 8005a82:	e7c7      	b.n	8005a14 <_printf_common+0x58>
 8005a84:	2301      	movs	r3, #1
 8005a86:	4622      	mov	r2, r4
 8005a88:	4649      	mov	r1, r9
 8005a8a:	4638      	mov	r0, r7
 8005a8c:	47c0      	blx	r8
 8005a8e:	3001      	adds	r0, #1
 8005a90:	d0e6      	beq.n	8005a60 <_printf_common+0xa4>
 8005a92:	3601      	adds	r6, #1
 8005a94:	e7d9      	b.n	8005a4a <_printf_common+0x8e>
	...

08005a98 <_printf_i>:
 8005a98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a9c:	7e0f      	ldrb	r7, [r1, #24]
 8005a9e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005aa0:	2f78      	cmp	r7, #120	; 0x78
 8005aa2:	4691      	mov	r9, r2
 8005aa4:	4680      	mov	r8, r0
 8005aa6:	460c      	mov	r4, r1
 8005aa8:	469a      	mov	sl, r3
 8005aaa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005aae:	d807      	bhi.n	8005ac0 <_printf_i+0x28>
 8005ab0:	2f62      	cmp	r7, #98	; 0x62
 8005ab2:	d80a      	bhi.n	8005aca <_printf_i+0x32>
 8005ab4:	2f00      	cmp	r7, #0
 8005ab6:	f000 80d8 	beq.w	8005c6a <_printf_i+0x1d2>
 8005aba:	2f58      	cmp	r7, #88	; 0x58
 8005abc:	f000 80a3 	beq.w	8005c06 <_printf_i+0x16e>
 8005ac0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ac4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005ac8:	e03a      	b.n	8005b40 <_printf_i+0xa8>
 8005aca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005ace:	2b15      	cmp	r3, #21
 8005ad0:	d8f6      	bhi.n	8005ac0 <_printf_i+0x28>
 8005ad2:	a101      	add	r1, pc, #4	; (adr r1, 8005ad8 <_printf_i+0x40>)
 8005ad4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ad8:	08005b31 	.word	0x08005b31
 8005adc:	08005b45 	.word	0x08005b45
 8005ae0:	08005ac1 	.word	0x08005ac1
 8005ae4:	08005ac1 	.word	0x08005ac1
 8005ae8:	08005ac1 	.word	0x08005ac1
 8005aec:	08005ac1 	.word	0x08005ac1
 8005af0:	08005b45 	.word	0x08005b45
 8005af4:	08005ac1 	.word	0x08005ac1
 8005af8:	08005ac1 	.word	0x08005ac1
 8005afc:	08005ac1 	.word	0x08005ac1
 8005b00:	08005ac1 	.word	0x08005ac1
 8005b04:	08005c51 	.word	0x08005c51
 8005b08:	08005b75 	.word	0x08005b75
 8005b0c:	08005c33 	.word	0x08005c33
 8005b10:	08005ac1 	.word	0x08005ac1
 8005b14:	08005ac1 	.word	0x08005ac1
 8005b18:	08005c73 	.word	0x08005c73
 8005b1c:	08005ac1 	.word	0x08005ac1
 8005b20:	08005b75 	.word	0x08005b75
 8005b24:	08005ac1 	.word	0x08005ac1
 8005b28:	08005ac1 	.word	0x08005ac1
 8005b2c:	08005c3b 	.word	0x08005c3b
 8005b30:	682b      	ldr	r3, [r5, #0]
 8005b32:	1d1a      	adds	r2, r3, #4
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	602a      	str	r2, [r5, #0]
 8005b38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b40:	2301      	movs	r3, #1
 8005b42:	e0a3      	b.n	8005c8c <_printf_i+0x1f4>
 8005b44:	6820      	ldr	r0, [r4, #0]
 8005b46:	6829      	ldr	r1, [r5, #0]
 8005b48:	0606      	lsls	r6, r0, #24
 8005b4a:	f101 0304 	add.w	r3, r1, #4
 8005b4e:	d50a      	bpl.n	8005b66 <_printf_i+0xce>
 8005b50:	680e      	ldr	r6, [r1, #0]
 8005b52:	602b      	str	r3, [r5, #0]
 8005b54:	2e00      	cmp	r6, #0
 8005b56:	da03      	bge.n	8005b60 <_printf_i+0xc8>
 8005b58:	232d      	movs	r3, #45	; 0x2d
 8005b5a:	4276      	negs	r6, r6
 8005b5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b60:	485e      	ldr	r0, [pc, #376]	; (8005cdc <_printf_i+0x244>)
 8005b62:	230a      	movs	r3, #10
 8005b64:	e019      	b.n	8005b9a <_printf_i+0x102>
 8005b66:	680e      	ldr	r6, [r1, #0]
 8005b68:	602b      	str	r3, [r5, #0]
 8005b6a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005b6e:	bf18      	it	ne
 8005b70:	b236      	sxthne	r6, r6
 8005b72:	e7ef      	b.n	8005b54 <_printf_i+0xbc>
 8005b74:	682b      	ldr	r3, [r5, #0]
 8005b76:	6820      	ldr	r0, [r4, #0]
 8005b78:	1d19      	adds	r1, r3, #4
 8005b7a:	6029      	str	r1, [r5, #0]
 8005b7c:	0601      	lsls	r1, r0, #24
 8005b7e:	d501      	bpl.n	8005b84 <_printf_i+0xec>
 8005b80:	681e      	ldr	r6, [r3, #0]
 8005b82:	e002      	b.n	8005b8a <_printf_i+0xf2>
 8005b84:	0646      	lsls	r6, r0, #25
 8005b86:	d5fb      	bpl.n	8005b80 <_printf_i+0xe8>
 8005b88:	881e      	ldrh	r6, [r3, #0]
 8005b8a:	4854      	ldr	r0, [pc, #336]	; (8005cdc <_printf_i+0x244>)
 8005b8c:	2f6f      	cmp	r7, #111	; 0x6f
 8005b8e:	bf0c      	ite	eq
 8005b90:	2308      	moveq	r3, #8
 8005b92:	230a      	movne	r3, #10
 8005b94:	2100      	movs	r1, #0
 8005b96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005b9a:	6865      	ldr	r5, [r4, #4]
 8005b9c:	60a5      	str	r5, [r4, #8]
 8005b9e:	2d00      	cmp	r5, #0
 8005ba0:	bfa2      	ittt	ge
 8005ba2:	6821      	ldrge	r1, [r4, #0]
 8005ba4:	f021 0104 	bicge.w	r1, r1, #4
 8005ba8:	6021      	strge	r1, [r4, #0]
 8005baa:	b90e      	cbnz	r6, 8005bb0 <_printf_i+0x118>
 8005bac:	2d00      	cmp	r5, #0
 8005bae:	d04d      	beq.n	8005c4c <_printf_i+0x1b4>
 8005bb0:	4615      	mov	r5, r2
 8005bb2:	fbb6 f1f3 	udiv	r1, r6, r3
 8005bb6:	fb03 6711 	mls	r7, r3, r1, r6
 8005bba:	5dc7      	ldrb	r7, [r0, r7]
 8005bbc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005bc0:	4637      	mov	r7, r6
 8005bc2:	42bb      	cmp	r3, r7
 8005bc4:	460e      	mov	r6, r1
 8005bc6:	d9f4      	bls.n	8005bb2 <_printf_i+0x11a>
 8005bc8:	2b08      	cmp	r3, #8
 8005bca:	d10b      	bne.n	8005be4 <_printf_i+0x14c>
 8005bcc:	6823      	ldr	r3, [r4, #0]
 8005bce:	07de      	lsls	r6, r3, #31
 8005bd0:	d508      	bpl.n	8005be4 <_printf_i+0x14c>
 8005bd2:	6923      	ldr	r3, [r4, #16]
 8005bd4:	6861      	ldr	r1, [r4, #4]
 8005bd6:	4299      	cmp	r1, r3
 8005bd8:	bfde      	ittt	le
 8005bda:	2330      	movle	r3, #48	; 0x30
 8005bdc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005be0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005be4:	1b52      	subs	r2, r2, r5
 8005be6:	6122      	str	r2, [r4, #16]
 8005be8:	f8cd a000 	str.w	sl, [sp]
 8005bec:	464b      	mov	r3, r9
 8005bee:	aa03      	add	r2, sp, #12
 8005bf0:	4621      	mov	r1, r4
 8005bf2:	4640      	mov	r0, r8
 8005bf4:	f7ff fee2 	bl	80059bc <_printf_common>
 8005bf8:	3001      	adds	r0, #1
 8005bfa:	d14c      	bne.n	8005c96 <_printf_i+0x1fe>
 8005bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8005c00:	b004      	add	sp, #16
 8005c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c06:	4835      	ldr	r0, [pc, #212]	; (8005cdc <_printf_i+0x244>)
 8005c08:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005c0c:	6829      	ldr	r1, [r5, #0]
 8005c0e:	6823      	ldr	r3, [r4, #0]
 8005c10:	f851 6b04 	ldr.w	r6, [r1], #4
 8005c14:	6029      	str	r1, [r5, #0]
 8005c16:	061d      	lsls	r5, r3, #24
 8005c18:	d514      	bpl.n	8005c44 <_printf_i+0x1ac>
 8005c1a:	07df      	lsls	r7, r3, #31
 8005c1c:	bf44      	itt	mi
 8005c1e:	f043 0320 	orrmi.w	r3, r3, #32
 8005c22:	6023      	strmi	r3, [r4, #0]
 8005c24:	b91e      	cbnz	r6, 8005c2e <_printf_i+0x196>
 8005c26:	6823      	ldr	r3, [r4, #0]
 8005c28:	f023 0320 	bic.w	r3, r3, #32
 8005c2c:	6023      	str	r3, [r4, #0]
 8005c2e:	2310      	movs	r3, #16
 8005c30:	e7b0      	b.n	8005b94 <_printf_i+0xfc>
 8005c32:	6823      	ldr	r3, [r4, #0]
 8005c34:	f043 0320 	orr.w	r3, r3, #32
 8005c38:	6023      	str	r3, [r4, #0]
 8005c3a:	2378      	movs	r3, #120	; 0x78
 8005c3c:	4828      	ldr	r0, [pc, #160]	; (8005ce0 <_printf_i+0x248>)
 8005c3e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005c42:	e7e3      	b.n	8005c0c <_printf_i+0x174>
 8005c44:	0659      	lsls	r1, r3, #25
 8005c46:	bf48      	it	mi
 8005c48:	b2b6      	uxthmi	r6, r6
 8005c4a:	e7e6      	b.n	8005c1a <_printf_i+0x182>
 8005c4c:	4615      	mov	r5, r2
 8005c4e:	e7bb      	b.n	8005bc8 <_printf_i+0x130>
 8005c50:	682b      	ldr	r3, [r5, #0]
 8005c52:	6826      	ldr	r6, [r4, #0]
 8005c54:	6961      	ldr	r1, [r4, #20]
 8005c56:	1d18      	adds	r0, r3, #4
 8005c58:	6028      	str	r0, [r5, #0]
 8005c5a:	0635      	lsls	r5, r6, #24
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	d501      	bpl.n	8005c64 <_printf_i+0x1cc>
 8005c60:	6019      	str	r1, [r3, #0]
 8005c62:	e002      	b.n	8005c6a <_printf_i+0x1d2>
 8005c64:	0670      	lsls	r0, r6, #25
 8005c66:	d5fb      	bpl.n	8005c60 <_printf_i+0x1c8>
 8005c68:	8019      	strh	r1, [r3, #0]
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	6123      	str	r3, [r4, #16]
 8005c6e:	4615      	mov	r5, r2
 8005c70:	e7ba      	b.n	8005be8 <_printf_i+0x150>
 8005c72:	682b      	ldr	r3, [r5, #0]
 8005c74:	1d1a      	adds	r2, r3, #4
 8005c76:	602a      	str	r2, [r5, #0]
 8005c78:	681d      	ldr	r5, [r3, #0]
 8005c7a:	6862      	ldr	r2, [r4, #4]
 8005c7c:	2100      	movs	r1, #0
 8005c7e:	4628      	mov	r0, r5
 8005c80:	f7fa fabe 	bl	8000200 <memchr>
 8005c84:	b108      	cbz	r0, 8005c8a <_printf_i+0x1f2>
 8005c86:	1b40      	subs	r0, r0, r5
 8005c88:	6060      	str	r0, [r4, #4]
 8005c8a:	6863      	ldr	r3, [r4, #4]
 8005c8c:	6123      	str	r3, [r4, #16]
 8005c8e:	2300      	movs	r3, #0
 8005c90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c94:	e7a8      	b.n	8005be8 <_printf_i+0x150>
 8005c96:	6923      	ldr	r3, [r4, #16]
 8005c98:	462a      	mov	r2, r5
 8005c9a:	4649      	mov	r1, r9
 8005c9c:	4640      	mov	r0, r8
 8005c9e:	47d0      	blx	sl
 8005ca0:	3001      	adds	r0, #1
 8005ca2:	d0ab      	beq.n	8005bfc <_printf_i+0x164>
 8005ca4:	6823      	ldr	r3, [r4, #0]
 8005ca6:	079b      	lsls	r3, r3, #30
 8005ca8:	d413      	bmi.n	8005cd2 <_printf_i+0x23a>
 8005caa:	68e0      	ldr	r0, [r4, #12]
 8005cac:	9b03      	ldr	r3, [sp, #12]
 8005cae:	4298      	cmp	r0, r3
 8005cb0:	bfb8      	it	lt
 8005cb2:	4618      	movlt	r0, r3
 8005cb4:	e7a4      	b.n	8005c00 <_printf_i+0x168>
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	4632      	mov	r2, r6
 8005cba:	4649      	mov	r1, r9
 8005cbc:	4640      	mov	r0, r8
 8005cbe:	47d0      	blx	sl
 8005cc0:	3001      	adds	r0, #1
 8005cc2:	d09b      	beq.n	8005bfc <_printf_i+0x164>
 8005cc4:	3501      	adds	r5, #1
 8005cc6:	68e3      	ldr	r3, [r4, #12]
 8005cc8:	9903      	ldr	r1, [sp, #12]
 8005cca:	1a5b      	subs	r3, r3, r1
 8005ccc:	42ab      	cmp	r3, r5
 8005cce:	dcf2      	bgt.n	8005cb6 <_printf_i+0x21e>
 8005cd0:	e7eb      	b.n	8005caa <_printf_i+0x212>
 8005cd2:	2500      	movs	r5, #0
 8005cd4:	f104 0619 	add.w	r6, r4, #25
 8005cd8:	e7f5      	b.n	8005cc6 <_printf_i+0x22e>
 8005cda:	bf00      	nop
 8005cdc:	08009e82 	.word	0x08009e82
 8005ce0:	08009e93 	.word	0x08009e93

08005ce4 <_scanf_float>:
 8005ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ce8:	b087      	sub	sp, #28
 8005cea:	4617      	mov	r7, r2
 8005cec:	9303      	str	r3, [sp, #12]
 8005cee:	688b      	ldr	r3, [r1, #8]
 8005cf0:	1e5a      	subs	r2, r3, #1
 8005cf2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005cf6:	bf83      	ittte	hi
 8005cf8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005cfc:	195b      	addhi	r3, r3, r5
 8005cfe:	9302      	strhi	r3, [sp, #8]
 8005d00:	2300      	movls	r3, #0
 8005d02:	bf86      	itte	hi
 8005d04:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005d08:	608b      	strhi	r3, [r1, #8]
 8005d0a:	9302      	strls	r3, [sp, #8]
 8005d0c:	680b      	ldr	r3, [r1, #0]
 8005d0e:	468b      	mov	fp, r1
 8005d10:	2500      	movs	r5, #0
 8005d12:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005d16:	f84b 3b1c 	str.w	r3, [fp], #28
 8005d1a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005d1e:	4680      	mov	r8, r0
 8005d20:	460c      	mov	r4, r1
 8005d22:	465e      	mov	r6, fp
 8005d24:	46aa      	mov	sl, r5
 8005d26:	46a9      	mov	r9, r5
 8005d28:	9501      	str	r5, [sp, #4]
 8005d2a:	68a2      	ldr	r2, [r4, #8]
 8005d2c:	b152      	cbz	r2, 8005d44 <_scanf_float+0x60>
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	781b      	ldrb	r3, [r3, #0]
 8005d32:	2b4e      	cmp	r3, #78	; 0x4e
 8005d34:	d864      	bhi.n	8005e00 <_scanf_float+0x11c>
 8005d36:	2b40      	cmp	r3, #64	; 0x40
 8005d38:	d83c      	bhi.n	8005db4 <_scanf_float+0xd0>
 8005d3a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005d3e:	b2c8      	uxtb	r0, r1
 8005d40:	280e      	cmp	r0, #14
 8005d42:	d93a      	bls.n	8005dba <_scanf_float+0xd6>
 8005d44:	f1b9 0f00 	cmp.w	r9, #0
 8005d48:	d003      	beq.n	8005d52 <_scanf_float+0x6e>
 8005d4a:	6823      	ldr	r3, [r4, #0]
 8005d4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d50:	6023      	str	r3, [r4, #0]
 8005d52:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005d56:	f1ba 0f01 	cmp.w	sl, #1
 8005d5a:	f200 8113 	bhi.w	8005f84 <_scanf_float+0x2a0>
 8005d5e:	455e      	cmp	r6, fp
 8005d60:	f200 8105 	bhi.w	8005f6e <_scanf_float+0x28a>
 8005d64:	2501      	movs	r5, #1
 8005d66:	4628      	mov	r0, r5
 8005d68:	b007      	add	sp, #28
 8005d6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d6e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005d72:	2a0d      	cmp	r2, #13
 8005d74:	d8e6      	bhi.n	8005d44 <_scanf_float+0x60>
 8005d76:	a101      	add	r1, pc, #4	; (adr r1, 8005d7c <_scanf_float+0x98>)
 8005d78:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005d7c:	08005ebb 	.word	0x08005ebb
 8005d80:	08005d45 	.word	0x08005d45
 8005d84:	08005d45 	.word	0x08005d45
 8005d88:	08005d45 	.word	0x08005d45
 8005d8c:	08005f1b 	.word	0x08005f1b
 8005d90:	08005ef3 	.word	0x08005ef3
 8005d94:	08005d45 	.word	0x08005d45
 8005d98:	08005d45 	.word	0x08005d45
 8005d9c:	08005ec9 	.word	0x08005ec9
 8005da0:	08005d45 	.word	0x08005d45
 8005da4:	08005d45 	.word	0x08005d45
 8005da8:	08005d45 	.word	0x08005d45
 8005dac:	08005d45 	.word	0x08005d45
 8005db0:	08005e81 	.word	0x08005e81
 8005db4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005db8:	e7db      	b.n	8005d72 <_scanf_float+0x8e>
 8005dba:	290e      	cmp	r1, #14
 8005dbc:	d8c2      	bhi.n	8005d44 <_scanf_float+0x60>
 8005dbe:	a001      	add	r0, pc, #4	; (adr r0, 8005dc4 <_scanf_float+0xe0>)
 8005dc0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005dc4:	08005e73 	.word	0x08005e73
 8005dc8:	08005d45 	.word	0x08005d45
 8005dcc:	08005e73 	.word	0x08005e73
 8005dd0:	08005f07 	.word	0x08005f07
 8005dd4:	08005d45 	.word	0x08005d45
 8005dd8:	08005e21 	.word	0x08005e21
 8005ddc:	08005e5d 	.word	0x08005e5d
 8005de0:	08005e5d 	.word	0x08005e5d
 8005de4:	08005e5d 	.word	0x08005e5d
 8005de8:	08005e5d 	.word	0x08005e5d
 8005dec:	08005e5d 	.word	0x08005e5d
 8005df0:	08005e5d 	.word	0x08005e5d
 8005df4:	08005e5d 	.word	0x08005e5d
 8005df8:	08005e5d 	.word	0x08005e5d
 8005dfc:	08005e5d 	.word	0x08005e5d
 8005e00:	2b6e      	cmp	r3, #110	; 0x6e
 8005e02:	d809      	bhi.n	8005e18 <_scanf_float+0x134>
 8005e04:	2b60      	cmp	r3, #96	; 0x60
 8005e06:	d8b2      	bhi.n	8005d6e <_scanf_float+0x8a>
 8005e08:	2b54      	cmp	r3, #84	; 0x54
 8005e0a:	d077      	beq.n	8005efc <_scanf_float+0x218>
 8005e0c:	2b59      	cmp	r3, #89	; 0x59
 8005e0e:	d199      	bne.n	8005d44 <_scanf_float+0x60>
 8005e10:	2d07      	cmp	r5, #7
 8005e12:	d197      	bne.n	8005d44 <_scanf_float+0x60>
 8005e14:	2508      	movs	r5, #8
 8005e16:	e029      	b.n	8005e6c <_scanf_float+0x188>
 8005e18:	2b74      	cmp	r3, #116	; 0x74
 8005e1a:	d06f      	beq.n	8005efc <_scanf_float+0x218>
 8005e1c:	2b79      	cmp	r3, #121	; 0x79
 8005e1e:	e7f6      	b.n	8005e0e <_scanf_float+0x12a>
 8005e20:	6821      	ldr	r1, [r4, #0]
 8005e22:	05c8      	lsls	r0, r1, #23
 8005e24:	d51a      	bpl.n	8005e5c <_scanf_float+0x178>
 8005e26:	9b02      	ldr	r3, [sp, #8]
 8005e28:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005e2c:	6021      	str	r1, [r4, #0]
 8005e2e:	f109 0901 	add.w	r9, r9, #1
 8005e32:	b11b      	cbz	r3, 8005e3c <_scanf_float+0x158>
 8005e34:	3b01      	subs	r3, #1
 8005e36:	3201      	adds	r2, #1
 8005e38:	9302      	str	r3, [sp, #8]
 8005e3a:	60a2      	str	r2, [r4, #8]
 8005e3c:	68a3      	ldr	r3, [r4, #8]
 8005e3e:	3b01      	subs	r3, #1
 8005e40:	60a3      	str	r3, [r4, #8]
 8005e42:	6923      	ldr	r3, [r4, #16]
 8005e44:	3301      	adds	r3, #1
 8005e46:	6123      	str	r3, [r4, #16]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	3b01      	subs	r3, #1
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	607b      	str	r3, [r7, #4]
 8005e50:	f340 8084 	ble.w	8005f5c <_scanf_float+0x278>
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	3301      	adds	r3, #1
 8005e58:	603b      	str	r3, [r7, #0]
 8005e5a:	e766      	b.n	8005d2a <_scanf_float+0x46>
 8005e5c:	eb1a 0f05 	cmn.w	sl, r5
 8005e60:	f47f af70 	bne.w	8005d44 <_scanf_float+0x60>
 8005e64:	6822      	ldr	r2, [r4, #0]
 8005e66:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005e6a:	6022      	str	r2, [r4, #0]
 8005e6c:	f806 3b01 	strb.w	r3, [r6], #1
 8005e70:	e7e4      	b.n	8005e3c <_scanf_float+0x158>
 8005e72:	6822      	ldr	r2, [r4, #0]
 8005e74:	0610      	lsls	r0, r2, #24
 8005e76:	f57f af65 	bpl.w	8005d44 <_scanf_float+0x60>
 8005e7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e7e:	e7f4      	b.n	8005e6a <_scanf_float+0x186>
 8005e80:	f1ba 0f00 	cmp.w	sl, #0
 8005e84:	d10e      	bne.n	8005ea4 <_scanf_float+0x1c0>
 8005e86:	f1b9 0f00 	cmp.w	r9, #0
 8005e8a:	d10e      	bne.n	8005eaa <_scanf_float+0x1c6>
 8005e8c:	6822      	ldr	r2, [r4, #0]
 8005e8e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005e92:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005e96:	d108      	bne.n	8005eaa <_scanf_float+0x1c6>
 8005e98:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005e9c:	6022      	str	r2, [r4, #0]
 8005e9e:	f04f 0a01 	mov.w	sl, #1
 8005ea2:	e7e3      	b.n	8005e6c <_scanf_float+0x188>
 8005ea4:	f1ba 0f02 	cmp.w	sl, #2
 8005ea8:	d055      	beq.n	8005f56 <_scanf_float+0x272>
 8005eaa:	2d01      	cmp	r5, #1
 8005eac:	d002      	beq.n	8005eb4 <_scanf_float+0x1d0>
 8005eae:	2d04      	cmp	r5, #4
 8005eb0:	f47f af48 	bne.w	8005d44 <_scanf_float+0x60>
 8005eb4:	3501      	adds	r5, #1
 8005eb6:	b2ed      	uxtb	r5, r5
 8005eb8:	e7d8      	b.n	8005e6c <_scanf_float+0x188>
 8005eba:	f1ba 0f01 	cmp.w	sl, #1
 8005ebe:	f47f af41 	bne.w	8005d44 <_scanf_float+0x60>
 8005ec2:	f04f 0a02 	mov.w	sl, #2
 8005ec6:	e7d1      	b.n	8005e6c <_scanf_float+0x188>
 8005ec8:	b97d      	cbnz	r5, 8005eea <_scanf_float+0x206>
 8005eca:	f1b9 0f00 	cmp.w	r9, #0
 8005ece:	f47f af3c 	bne.w	8005d4a <_scanf_float+0x66>
 8005ed2:	6822      	ldr	r2, [r4, #0]
 8005ed4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005ed8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005edc:	f47f af39 	bne.w	8005d52 <_scanf_float+0x6e>
 8005ee0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005ee4:	6022      	str	r2, [r4, #0]
 8005ee6:	2501      	movs	r5, #1
 8005ee8:	e7c0      	b.n	8005e6c <_scanf_float+0x188>
 8005eea:	2d03      	cmp	r5, #3
 8005eec:	d0e2      	beq.n	8005eb4 <_scanf_float+0x1d0>
 8005eee:	2d05      	cmp	r5, #5
 8005ef0:	e7de      	b.n	8005eb0 <_scanf_float+0x1cc>
 8005ef2:	2d02      	cmp	r5, #2
 8005ef4:	f47f af26 	bne.w	8005d44 <_scanf_float+0x60>
 8005ef8:	2503      	movs	r5, #3
 8005efa:	e7b7      	b.n	8005e6c <_scanf_float+0x188>
 8005efc:	2d06      	cmp	r5, #6
 8005efe:	f47f af21 	bne.w	8005d44 <_scanf_float+0x60>
 8005f02:	2507      	movs	r5, #7
 8005f04:	e7b2      	b.n	8005e6c <_scanf_float+0x188>
 8005f06:	6822      	ldr	r2, [r4, #0]
 8005f08:	0591      	lsls	r1, r2, #22
 8005f0a:	f57f af1b 	bpl.w	8005d44 <_scanf_float+0x60>
 8005f0e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005f12:	6022      	str	r2, [r4, #0]
 8005f14:	f8cd 9004 	str.w	r9, [sp, #4]
 8005f18:	e7a8      	b.n	8005e6c <_scanf_float+0x188>
 8005f1a:	6822      	ldr	r2, [r4, #0]
 8005f1c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005f20:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005f24:	d006      	beq.n	8005f34 <_scanf_float+0x250>
 8005f26:	0550      	lsls	r0, r2, #21
 8005f28:	f57f af0c 	bpl.w	8005d44 <_scanf_float+0x60>
 8005f2c:	f1b9 0f00 	cmp.w	r9, #0
 8005f30:	f43f af0f 	beq.w	8005d52 <_scanf_float+0x6e>
 8005f34:	0591      	lsls	r1, r2, #22
 8005f36:	bf58      	it	pl
 8005f38:	9901      	ldrpl	r1, [sp, #4]
 8005f3a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005f3e:	bf58      	it	pl
 8005f40:	eba9 0101 	subpl.w	r1, r9, r1
 8005f44:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005f48:	bf58      	it	pl
 8005f4a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005f4e:	6022      	str	r2, [r4, #0]
 8005f50:	f04f 0900 	mov.w	r9, #0
 8005f54:	e78a      	b.n	8005e6c <_scanf_float+0x188>
 8005f56:	f04f 0a03 	mov.w	sl, #3
 8005f5a:	e787      	b.n	8005e6c <_scanf_float+0x188>
 8005f5c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005f60:	4639      	mov	r1, r7
 8005f62:	4640      	mov	r0, r8
 8005f64:	4798      	blx	r3
 8005f66:	2800      	cmp	r0, #0
 8005f68:	f43f aedf 	beq.w	8005d2a <_scanf_float+0x46>
 8005f6c:	e6ea      	b.n	8005d44 <_scanf_float+0x60>
 8005f6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005f72:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005f76:	463a      	mov	r2, r7
 8005f78:	4640      	mov	r0, r8
 8005f7a:	4798      	blx	r3
 8005f7c:	6923      	ldr	r3, [r4, #16]
 8005f7e:	3b01      	subs	r3, #1
 8005f80:	6123      	str	r3, [r4, #16]
 8005f82:	e6ec      	b.n	8005d5e <_scanf_float+0x7a>
 8005f84:	1e6b      	subs	r3, r5, #1
 8005f86:	2b06      	cmp	r3, #6
 8005f88:	d825      	bhi.n	8005fd6 <_scanf_float+0x2f2>
 8005f8a:	2d02      	cmp	r5, #2
 8005f8c:	d836      	bhi.n	8005ffc <_scanf_float+0x318>
 8005f8e:	455e      	cmp	r6, fp
 8005f90:	f67f aee8 	bls.w	8005d64 <_scanf_float+0x80>
 8005f94:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005f98:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005f9c:	463a      	mov	r2, r7
 8005f9e:	4640      	mov	r0, r8
 8005fa0:	4798      	blx	r3
 8005fa2:	6923      	ldr	r3, [r4, #16]
 8005fa4:	3b01      	subs	r3, #1
 8005fa6:	6123      	str	r3, [r4, #16]
 8005fa8:	e7f1      	b.n	8005f8e <_scanf_float+0x2aa>
 8005faa:	9802      	ldr	r0, [sp, #8]
 8005fac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005fb0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005fb4:	9002      	str	r0, [sp, #8]
 8005fb6:	463a      	mov	r2, r7
 8005fb8:	4640      	mov	r0, r8
 8005fba:	4798      	blx	r3
 8005fbc:	6923      	ldr	r3, [r4, #16]
 8005fbe:	3b01      	subs	r3, #1
 8005fc0:	6123      	str	r3, [r4, #16]
 8005fc2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005fc6:	fa5f fa8a 	uxtb.w	sl, sl
 8005fca:	f1ba 0f02 	cmp.w	sl, #2
 8005fce:	d1ec      	bne.n	8005faa <_scanf_float+0x2c6>
 8005fd0:	3d03      	subs	r5, #3
 8005fd2:	b2ed      	uxtb	r5, r5
 8005fd4:	1b76      	subs	r6, r6, r5
 8005fd6:	6823      	ldr	r3, [r4, #0]
 8005fd8:	05da      	lsls	r2, r3, #23
 8005fda:	d52f      	bpl.n	800603c <_scanf_float+0x358>
 8005fdc:	055b      	lsls	r3, r3, #21
 8005fde:	d510      	bpl.n	8006002 <_scanf_float+0x31e>
 8005fe0:	455e      	cmp	r6, fp
 8005fe2:	f67f aebf 	bls.w	8005d64 <_scanf_float+0x80>
 8005fe6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005fea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005fee:	463a      	mov	r2, r7
 8005ff0:	4640      	mov	r0, r8
 8005ff2:	4798      	blx	r3
 8005ff4:	6923      	ldr	r3, [r4, #16]
 8005ff6:	3b01      	subs	r3, #1
 8005ff8:	6123      	str	r3, [r4, #16]
 8005ffa:	e7f1      	b.n	8005fe0 <_scanf_float+0x2fc>
 8005ffc:	46aa      	mov	sl, r5
 8005ffe:	9602      	str	r6, [sp, #8]
 8006000:	e7df      	b.n	8005fc2 <_scanf_float+0x2de>
 8006002:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006006:	6923      	ldr	r3, [r4, #16]
 8006008:	2965      	cmp	r1, #101	; 0x65
 800600a:	f103 33ff 	add.w	r3, r3, #4294967295
 800600e:	f106 35ff 	add.w	r5, r6, #4294967295
 8006012:	6123      	str	r3, [r4, #16]
 8006014:	d00c      	beq.n	8006030 <_scanf_float+0x34c>
 8006016:	2945      	cmp	r1, #69	; 0x45
 8006018:	d00a      	beq.n	8006030 <_scanf_float+0x34c>
 800601a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800601e:	463a      	mov	r2, r7
 8006020:	4640      	mov	r0, r8
 8006022:	4798      	blx	r3
 8006024:	6923      	ldr	r3, [r4, #16]
 8006026:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800602a:	3b01      	subs	r3, #1
 800602c:	1eb5      	subs	r5, r6, #2
 800602e:	6123      	str	r3, [r4, #16]
 8006030:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006034:	463a      	mov	r2, r7
 8006036:	4640      	mov	r0, r8
 8006038:	4798      	blx	r3
 800603a:	462e      	mov	r6, r5
 800603c:	6825      	ldr	r5, [r4, #0]
 800603e:	f015 0510 	ands.w	r5, r5, #16
 8006042:	d159      	bne.n	80060f8 <_scanf_float+0x414>
 8006044:	7035      	strb	r5, [r6, #0]
 8006046:	6823      	ldr	r3, [r4, #0]
 8006048:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800604c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006050:	d11b      	bne.n	800608a <_scanf_float+0x3a6>
 8006052:	9b01      	ldr	r3, [sp, #4]
 8006054:	454b      	cmp	r3, r9
 8006056:	eba3 0209 	sub.w	r2, r3, r9
 800605a:	d123      	bne.n	80060a4 <_scanf_float+0x3c0>
 800605c:	2200      	movs	r2, #0
 800605e:	4659      	mov	r1, fp
 8006060:	4640      	mov	r0, r8
 8006062:	f000 ff27 	bl	8006eb4 <_strtod_r>
 8006066:	6822      	ldr	r2, [r4, #0]
 8006068:	9b03      	ldr	r3, [sp, #12]
 800606a:	f012 0f02 	tst.w	r2, #2
 800606e:	ec57 6b10 	vmov	r6, r7, d0
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	d021      	beq.n	80060ba <_scanf_float+0x3d6>
 8006076:	9903      	ldr	r1, [sp, #12]
 8006078:	1d1a      	adds	r2, r3, #4
 800607a:	600a      	str	r2, [r1, #0]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	e9c3 6700 	strd	r6, r7, [r3]
 8006082:	68e3      	ldr	r3, [r4, #12]
 8006084:	3301      	adds	r3, #1
 8006086:	60e3      	str	r3, [r4, #12]
 8006088:	e66d      	b.n	8005d66 <_scanf_float+0x82>
 800608a:	9b04      	ldr	r3, [sp, #16]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d0e5      	beq.n	800605c <_scanf_float+0x378>
 8006090:	9905      	ldr	r1, [sp, #20]
 8006092:	230a      	movs	r3, #10
 8006094:	462a      	mov	r2, r5
 8006096:	3101      	adds	r1, #1
 8006098:	4640      	mov	r0, r8
 800609a:	f000 ff93 	bl	8006fc4 <_strtol_r>
 800609e:	9b04      	ldr	r3, [sp, #16]
 80060a0:	9e05      	ldr	r6, [sp, #20]
 80060a2:	1ac2      	subs	r2, r0, r3
 80060a4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80060a8:	429e      	cmp	r6, r3
 80060aa:	bf28      	it	cs
 80060ac:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80060b0:	4912      	ldr	r1, [pc, #72]	; (80060fc <_scanf_float+0x418>)
 80060b2:	4630      	mov	r0, r6
 80060b4:	f000 f8ba 	bl	800622c <siprintf>
 80060b8:	e7d0      	b.n	800605c <_scanf_float+0x378>
 80060ba:	9903      	ldr	r1, [sp, #12]
 80060bc:	f012 0f04 	tst.w	r2, #4
 80060c0:	f103 0204 	add.w	r2, r3, #4
 80060c4:	600a      	str	r2, [r1, #0]
 80060c6:	d1d9      	bne.n	800607c <_scanf_float+0x398>
 80060c8:	f8d3 8000 	ldr.w	r8, [r3]
 80060cc:	ee10 2a10 	vmov	r2, s0
 80060d0:	ee10 0a10 	vmov	r0, s0
 80060d4:	463b      	mov	r3, r7
 80060d6:	4639      	mov	r1, r7
 80060d8:	f7fa fd38 	bl	8000b4c <__aeabi_dcmpun>
 80060dc:	b128      	cbz	r0, 80060ea <_scanf_float+0x406>
 80060de:	4808      	ldr	r0, [pc, #32]	; (8006100 <_scanf_float+0x41c>)
 80060e0:	f000 f89e 	bl	8006220 <nanf>
 80060e4:	ed88 0a00 	vstr	s0, [r8]
 80060e8:	e7cb      	b.n	8006082 <_scanf_float+0x39e>
 80060ea:	4630      	mov	r0, r6
 80060ec:	4639      	mov	r1, r7
 80060ee:	f7fa fd8b 	bl	8000c08 <__aeabi_d2f>
 80060f2:	f8c8 0000 	str.w	r0, [r8]
 80060f6:	e7c4      	b.n	8006082 <_scanf_float+0x39e>
 80060f8:	2500      	movs	r5, #0
 80060fa:	e634      	b.n	8005d66 <_scanf_float+0x82>
 80060fc:	08009ea4 	.word	0x08009ea4
 8006100:	0800a318 	.word	0x0800a318

08006104 <iprintf>:
 8006104:	b40f      	push	{r0, r1, r2, r3}
 8006106:	4b0a      	ldr	r3, [pc, #40]	; (8006130 <iprintf+0x2c>)
 8006108:	b513      	push	{r0, r1, r4, lr}
 800610a:	681c      	ldr	r4, [r3, #0]
 800610c:	b124      	cbz	r4, 8006118 <iprintf+0x14>
 800610e:	69a3      	ldr	r3, [r4, #24]
 8006110:	b913      	cbnz	r3, 8006118 <iprintf+0x14>
 8006112:	4620      	mov	r0, r4
 8006114:	f001 ffac 	bl	8008070 <__sinit>
 8006118:	ab05      	add	r3, sp, #20
 800611a:	9a04      	ldr	r2, [sp, #16]
 800611c:	68a1      	ldr	r1, [r4, #8]
 800611e:	9301      	str	r3, [sp, #4]
 8006120:	4620      	mov	r0, r4
 8006122:	f003 fb83 	bl	800982c <_vfiprintf_r>
 8006126:	b002      	add	sp, #8
 8006128:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800612c:	b004      	add	sp, #16
 800612e:	4770      	bx	lr
 8006130:	2000000c 	.word	0x2000000c

08006134 <_puts_r>:
 8006134:	b570      	push	{r4, r5, r6, lr}
 8006136:	460e      	mov	r6, r1
 8006138:	4605      	mov	r5, r0
 800613a:	b118      	cbz	r0, 8006144 <_puts_r+0x10>
 800613c:	6983      	ldr	r3, [r0, #24]
 800613e:	b90b      	cbnz	r3, 8006144 <_puts_r+0x10>
 8006140:	f001 ff96 	bl	8008070 <__sinit>
 8006144:	69ab      	ldr	r3, [r5, #24]
 8006146:	68ac      	ldr	r4, [r5, #8]
 8006148:	b913      	cbnz	r3, 8006150 <_puts_r+0x1c>
 800614a:	4628      	mov	r0, r5
 800614c:	f001 ff90 	bl	8008070 <__sinit>
 8006150:	4b2c      	ldr	r3, [pc, #176]	; (8006204 <_puts_r+0xd0>)
 8006152:	429c      	cmp	r4, r3
 8006154:	d120      	bne.n	8006198 <_puts_r+0x64>
 8006156:	686c      	ldr	r4, [r5, #4]
 8006158:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800615a:	07db      	lsls	r3, r3, #31
 800615c:	d405      	bmi.n	800616a <_puts_r+0x36>
 800615e:	89a3      	ldrh	r3, [r4, #12]
 8006160:	0598      	lsls	r0, r3, #22
 8006162:	d402      	bmi.n	800616a <_puts_r+0x36>
 8006164:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006166:	f002 fb94 	bl	8008892 <__retarget_lock_acquire_recursive>
 800616a:	89a3      	ldrh	r3, [r4, #12]
 800616c:	0719      	lsls	r1, r3, #28
 800616e:	d51d      	bpl.n	80061ac <_puts_r+0x78>
 8006170:	6923      	ldr	r3, [r4, #16]
 8006172:	b1db      	cbz	r3, 80061ac <_puts_r+0x78>
 8006174:	3e01      	subs	r6, #1
 8006176:	68a3      	ldr	r3, [r4, #8]
 8006178:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800617c:	3b01      	subs	r3, #1
 800617e:	60a3      	str	r3, [r4, #8]
 8006180:	bb39      	cbnz	r1, 80061d2 <_puts_r+0x9e>
 8006182:	2b00      	cmp	r3, #0
 8006184:	da38      	bge.n	80061f8 <_puts_r+0xc4>
 8006186:	4622      	mov	r2, r4
 8006188:	210a      	movs	r1, #10
 800618a:	4628      	mov	r0, r5
 800618c:	f000 ff1c 	bl	8006fc8 <__swbuf_r>
 8006190:	3001      	adds	r0, #1
 8006192:	d011      	beq.n	80061b8 <_puts_r+0x84>
 8006194:	250a      	movs	r5, #10
 8006196:	e011      	b.n	80061bc <_puts_r+0x88>
 8006198:	4b1b      	ldr	r3, [pc, #108]	; (8006208 <_puts_r+0xd4>)
 800619a:	429c      	cmp	r4, r3
 800619c:	d101      	bne.n	80061a2 <_puts_r+0x6e>
 800619e:	68ac      	ldr	r4, [r5, #8]
 80061a0:	e7da      	b.n	8006158 <_puts_r+0x24>
 80061a2:	4b1a      	ldr	r3, [pc, #104]	; (800620c <_puts_r+0xd8>)
 80061a4:	429c      	cmp	r4, r3
 80061a6:	bf08      	it	eq
 80061a8:	68ec      	ldreq	r4, [r5, #12]
 80061aa:	e7d5      	b.n	8006158 <_puts_r+0x24>
 80061ac:	4621      	mov	r1, r4
 80061ae:	4628      	mov	r0, r5
 80061b0:	f000 ff5c 	bl	800706c <__swsetup_r>
 80061b4:	2800      	cmp	r0, #0
 80061b6:	d0dd      	beq.n	8006174 <_puts_r+0x40>
 80061b8:	f04f 35ff 	mov.w	r5, #4294967295
 80061bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80061be:	07da      	lsls	r2, r3, #31
 80061c0:	d405      	bmi.n	80061ce <_puts_r+0x9a>
 80061c2:	89a3      	ldrh	r3, [r4, #12]
 80061c4:	059b      	lsls	r3, r3, #22
 80061c6:	d402      	bmi.n	80061ce <_puts_r+0x9a>
 80061c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80061ca:	f002 fb63 	bl	8008894 <__retarget_lock_release_recursive>
 80061ce:	4628      	mov	r0, r5
 80061d0:	bd70      	pop	{r4, r5, r6, pc}
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	da04      	bge.n	80061e0 <_puts_r+0xac>
 80061d6:	69a2      	ldr	r2, [r4, #24]
 80061d8:	429a      	cmp	r2, r3
 80061da:	dc06      	bgt.n	80061ea <_puts_r+0xb6>
 80061dc:	290a      	cmp	r1, #10
 80061de:	d004      	beq.n	80061ea <_puts_r+0xb6>
 80061e0:	6823      	ldr	r3, [r4, #0]
 80061e2:	1c5a      	adds	r2, r3, #1
 80061e4:	6022      	str	r2, [r4, #0]
 80061e6:	7019      	strb	r1, [r3, #0]
 80061e8:	e7c5      	b.n	8006176 <_puts_r+0x42>
 80061ea:	4622      	mov	r2, r4
 80061ec:	4628      	mov	r0, r5
 80061ee:	f000 feeb 	bl	8006fc8 <__swbuf_r>
 80061f2:	3001      	adds	r0, #1
 80061f4:	d1bf      	bne.n	8006176 <_puts_r+0x42>
 80061f6:	e7df      	b.n	80061b8 <_puts_r+0x84>
 80061f8:	6823      	ldr	r3, [r4, #0]
 80061fa:	250a      	movs	r5, #10
 80061fc:	1c5a      	adds	r2, r3, #1
 80061fe:	6022      	str	r2, [r4, #0]
 8006200:	701d      	strb	r5, [r3, #0]
 8006202:	e7db      	b.n	80061bc <_puts_r+0x88>
 8006204:	0800a0b4 	.word	0x0800a0b4
 8006208:	0800a0d4 	.word	0x0800a0d4
 800620c:	0800a094 	.word	0x0800a094

08006210 <puts>:
 8006210:	4b02      	ldr	r3, [pc, #8]	; (800621c <puts+0xc>)
 8006212:	4601      	mov	r1, r0
 8006214:	6818      	ldr	r0, [r3, #0]
 8006216:	f7ff bf8d 	b.w	8006134 <_puts_r>
 800621a:	bf00      	nop
 800621c:	2000000c 	.word	0x2000000c

08006220 <nanf>:
 8006220:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006228 <nanf+0x8>
 8006224:	4770      	bx	lr
 8006226:	bf00      	nop
 8006228:	7fc00000 	.word	0x7fc00000

0800622c <siprintf>:
 800622c:	b40e      	push	{r1, r2, r3}
 800622e:	b500      	push	{lr}
 8006230:	b09c      	sub	sp, #112	; 0x70
 8006232:	ab1d      	add	r3, sp, #116	; 0x74
 8006234:	9002      	str	r0, [sp, #8]
 8006236:	9006      	str	r0, [sp, #24]
 8006238:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800623c:	4809      	ldr	r0, [pc, #36]	; (8006264 <siprintf+0x38>)
 800623e:	9107      	str	r1, [sp, #28]
 8006240:	9104      	str	r1, [sp, #16]
 8006242:	4909      	ldr	r1, [pc, #36]	; (8006268 <siprintf+0x3c>)
 8006244:	f853 2b04 	ldr.w	r2, [r3], #4
 8006248:	9105      	str	r1, [sp, #20]
 800624a:	6800      	ldr	r0, [r0, #0]
 800624c:	9301      	str	r3, [sp, #4]
 800624e:	a902      	add	r1, sp, #8
 8006250:	f003 f9c2 	bl	80095d8 <_svfiprintf_r>
 8006254:	9b02      	ldr	r3, [sp, #8]
 8006256:	2200      	movs	r2, #0
 8006258:	701a      	strb	r2, [r3, #0]
 800625a:	b01c      	add	sp, #112	; 0x70
 800625c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006260:	b003      	add	sp, #12
 8006262:	4770      	bx	lr
 8006264:	2000000c 	.word	0x2000000c
 8006268:	ffff0208 	.word	0xffff0208

0800626c <sulp>:
 800626c:	b570      	push	{r4, r5, r6, lr}
 800626e:	4604      	mov	r4, r0
 8006270:	460d      	mov	r5, r1
 8006272:	ec45 4b10 	vmov	d0, r4, r5
 8006276:	4616      	mov	r6, r2
 8006278:	f002 ff0c 	bl	8009094 <__ulp>
 800627c:	ec51 0b10 	vmov	r0, r1, d0
 8006280:	b17e      	cbz	r6, 80062a2 <sulp+0x36>
 8006282:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006286:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800628a:	2b00      	cmp	r3, #0
 800628c:	dd09      	ble.n	80062a2 <sulp+0x36>
 800628e:	051b      	lsls	r3, r3, #20
 8006290:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006294:	2400      	movs	r4, #0
 8006296:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800629a:	4622      	mov	r2, r4
 800629c:	462b      	mov	r3, r5
 800629e:	f7fa f9bb 	bl	8000618 <__aeabi_dmul>
 80062a2:	bd70      	pop	{r4, r5, r6, pc}
 80062a4:	0000      	movs	r0, r0
	...

080062a8 <_strtod_l>:
 80062a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062ac:	ed2d 8b02 	vpush	{d8}
 80062b0:	b09d      	sub	sp, #116	; 0x74
 80062b2:	461f      	mov	r7, r3
 80062b4:	2300      	movs	r3, #0
 80062b6:	9318      	str	r3, [sp, #96]	; 0x60
 80062b8:	4ba2      	ldr	r3, [pc, #648]	; (8006544 <_strtod_l+0x29c>)
 80062ba:	9213      	str	r2, [sp, #76]	; 0x4c
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	9305      	str	r3, [sp, #20]
 80062c0:	4604      	mov	r4, r0
 80062c2:	4618      	mov	r0, r3
 80062c4:	4688      	mov	r8, r1
 80062c6:	f7f9 ff93 	bl	80001f0 <strlen>
 80062ca:	f04f 0a00 	mov.w	sl, #0
 80062ce:	4605      	mov	r5, r0
 80062d0:	f04f 0b00 	mov.w	fp, #0
 80062d4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80062d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80062da:	781a      	ldrb	r2, [r3, #0]
 80062dc:	2a2b      	cmp	r2, #43	; 0x2b
 80062de:	d04e      	beq.n	800637e <_strtod_l+0xd6>
 80062e0:	d83b      	bhi.n	800635a <_strtod_l+0xb2>
 80062e2:	2a0d      	cmp	r2, #13
 80062e4:	d834      	bhi.n	8006350 <_strtod_l+0xa8>
 80062e6:	2a08      	cmp	r2, #8
 80062e8:	d834      	bhi.n	8006354 <_strtod_l+0xac>
 80062ea:	2a00      	cmp	r2, #0
 80062ec:	d03e      	beq.n	800636c <_strtod_l+0xc4>
 80062ee:	2300      	movs	r3, #0
 80062f0:	930a      	str	r3, [sp, #40]	; 0x28
 80062f2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80062f4:	7833      	ldrb	r3, [r6, #0]
 80062f6:	2b30      	cmp	r3, #48	; 0x30
 80062f8:	f040 80b0 	bne.w	800645c <_strtod_l+0x1b4>
 80062fc:	7873      	ldrb	r3, [r6, #1]
 80062fe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006302:	2b58      	cmp	r3, #88	; 0x58
 8006304:	d168      	bne.n	80063d8 <_strtod_l+0x130>
 8006306:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006308:	9301      	str	r3, [sp, #4]
 800630a:	ab18      	add	r3, sp, #96	; 0x60
 800630c:	9702      	str	r7, [sp, #8]
 800630e:	9300      	str	r3, [sp, #0]
 8006310:	4a8d      	ldr	r2, [pc, #564]	; (8006548 <_strtod_l+0x2a0>)
 8006312:	ab19      	add	r3, sp, #100	; 0x64
 8006314:	a917      	add	r1, sp, #92	; 0x5c
 8006316:	4620      	mov	r0, r4
 8006318:	f001 ffae 	bl	8008278 <__gethex>
 800631c:	f010 0707 	ands.w	r7, r0, #7
 8006320:	4605      	mov	r5, r0
 8006322:	d005      	beq.n	8006330 <_strtod_l+0x88>
 8006324:	2f06      	cmp	r7, #6
 8006326:	d12c      	bne.n	8006382 <_strtod_l+0xda>
 8006328:	3601      	adds	r6, #1
 800632a:	2300      	movs	r3, #0
 800632c:	9617      	str	r6, [sp, #92]	; 0x5c
 800632e:	930a      	str	r3, [sp, #40]	; 0x28
 8006330:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006332:	2b00      	cmp	r3, #0
 8006334:	f040 8590 	bne.w	8006e58 <_strtod_l+0xbb0>
 8006338:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800633a:	b1eb      	cbz	r3, 8006378 <_strtod_l+0xd0>
 800633c:	4652      	mov	r2, sl
 800633e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006342:	ec43 2b10 	vmov	d0, r2, r3
 8006346:	b01d      	add	sp, #116	; 0x74
 8006348:	ecbd 8b02 	vpop	{d8}
 800634c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006350:	2a20      	cmp	r2, #32
 8006352:	d1cc      	bne.n	80062ee <_strtod_l+0x46>
 8006354:	3301      	adds	r3, #1
 8006356:	9317      	str	r3, [sp, #92]	; 0x5c
 8006358:	e7be      	b.n	80062d8 <_strtod_l+0x30>
 800635a:	2a2d      	cmp	r2, #45	; 0x2d
 800635c:	d1c7      	bne.n	80062ee <_strtod_l+0x46>
 800635e:	2201      	movs	r2, #1
 8006360:	920a      	str	r2, [sp, #40]	; 0x28
 8006362:	1c5a      	adds	r2, r3, #1
 8006364:	9217      	str	r2, [sp, #92]	; 0x5c
 8006366:	785b      	ldrb	r3, [r3, #1]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d1c2      	bne.n	80062f2 <_strtod_l+0x4a>
 800636c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800636e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006372:	2b00      	cmp	r3, #0
 8006374:	f040 856e 	bne.w	8006e54 <_strtod_l+0xbac>
 8006378:	4652      	mov	r2, sl
 800637a:	465b      	mov	r3, fp
 800637c:	e7e1      	b.n	8006342 <_strtod_l+0x9a>
 800637e:	2200      	movs	r2, #0
 8006380:	e7ee      	b.n	8006360 <_strtod_l+0xb8>
 8006382:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006384:	b13a      	cbz	r2, 8006396 <_strtod_l+0xee>
 8006386:	2135      	movs	r1, #53	; 0x35
 8006388:	a81a      	add	r0, sp, #104	; 0x68
 800638a:	f002 ff8e 	bl	80092aa <__copybits>
 800638e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006390:	4620      	mov	r0, r4
 8006392:	f002 fb4d 	bl	8008a30 <_Bfree>
 8006396:	3f01      	subs	r7, #1
 8006398:	2f04      	cmp	r7, #4
 800639a:	d806      	bhi.n	80063aa <_strtod_l+0x102>
 800639c:	e8df f007 	tbb	[pc, r7]
 80063a0:	1714030a 	.word	0x1714030a
 80063a4:	0a          	.byte	0x0a
 80063a5:	00          	.byte	0x00
 80063a6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80063aa:	0728      	lsls	r0, r5, #28
 80063ac:	d5c0      	bpl.n	8006330 <_strtod_l+0x88>
 80063ae:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80063b2:	e7bd      	b.n	8006330 <_strtod_l+0x88>
 80063b4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80063b8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80063ba:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80063be:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80063c2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80063c6:	e7f0      	b.n	80063aa <_strtod_l+0x102>
 80063c8:	f8df b180 	ldr.w	fp, [pc, #384]	; 800654c <_strtod_l+0x2a4>
 80063cc:	e7ed      	b.n	80063aa <_strtod_l+0x102>
 80063ce:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80063d2:	f04f 3aff 	mov.w	sl, #4294967295
 80063d6:	e7e8      	b.n	80063aa <_strtod_l+0x102>
 80063d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80063da:	1c5a      	adds	r2, r3, #1
 80063dc:	9217      	str	r2, [sp, #92]	; 0x5c
 80063de:	785b      	ldrb	r3, [r3, #1]
 80063e0:	2b30      	cmp	r3, #48	; 0x30
 80063e2:	d0f9      	beq.n	80063d8 <_strtod_l+0x130>
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d0a3      	beq.n	8006330 <_strtod_l+0x88>
 80063e8:	2301      	movs	r3, #1
 80063ea:	f04f 0900 	mov.w	r9, #0
 80063ee:	9304      	str	r3, [sp, #16]
 80063f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80063f2:	9308      	str	r3, [sp, #32]
 80063f4:	f8cd 901c 	str.w	r9, [sp, #28]
 80063f8:	464f      	mov	r7, r9
 80063fa:	220a      	movs	r2, #10
 80063fc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80063fe:	7806      	ldrb	r6, [r0, #0]
 8006400:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006404:	b2d9      	uxtb	r1, r3
 8006406:	2909      	cmp	r1, #9
 8006408:	d92a      	bls.n	8006460 <_strtod_l+0x1b8>
 800640a:	9905      	ldr	r1, [sp, #20]
 800640c:	462a      	mov	r2, r5
 800640e:	f003 fb9a 	bl	8009b46 <strncmp>
 8006412:	b398      	cbz	r0, 800647c <_strtod_l+0x1d4>
 8006414:	2000      	movs	r0, #0
 8006416:	4632      	mov	r2, r6
 8006418:	463d      	mov	r5, r7
 800641a:	9005      	str	r0, [sp, #20]
 800641c:	4603      	mov	r3, r0
 800641e:	2a65      	cmp	r2, #101	; 0x65
 8006420:	d001      	beq.n	8006426 <_strtod_l+0x17e>
 8006422:	2a45      	cmp	r2, #69	; 0x45
 8006424:	d118      	bne.n	8006458 <_strtod_l+0x1b0>
 8006426:	b91d      	cbnz	r5, 8006430 <_strtod_l+0x188>
 8006428:	9a04      	ldr	r2, [sp, #16]
 800642a:	4302      	orrs	r2, r0
 800642c:	d09e      	beq.n	800636c <_strtod_l+0xc4>
 800642e:	2500      	movs	r5, #0
 8006430:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8006434:	f108 0201 	add.w	r2, r8, #1
 8006438:	9217      	str	r2, [sp, #92]	; 0x5c
 800643a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800643e:	2a2b      	cmp	r2, #43	; 0x2b
 8006440:	d075      	beq.n	800652e <_strtod_l+0x286>
 8006442:	2a2d      	cmp	r2, #45	; 0x2d
 8006444:	d07b      	beq.n	800653e <_strtod_l+0x296>
 8006446:	f04f 0c00 	mov.w	ip, #0
 800644a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800644e:	2909      	cmp	r1, #9
 8006450:	f240 8082 	bls.w	8006558 <_strtod_l+0x2b0>
 8006454:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006458:	2600      	movs	r6, #0
 800645a:	e09d      	b.n	8006598 <_strtod_l+0x2f0>
 800645c:	2300      	movs	r3, #0
 800645e:	e7c4      	b.n	80063ea <_strtod_l+0x142>
 8006460:	2f08      	cmp	r7, #8
 8006462:	bfd8      	it	le
 8006464:	9907      	ldrle	r1, [sp, #28]
 8006466:	f100 0001 	add.w	r0, r0, #1
 800646a:	bfda      	itte	le
 800646c:	fb02 3301 	mlale	r3, r2, r1, r3
 8006470:	9307      	strle	r3, [sp, #28]
 8006472:	fb02 3909 	mlagt	r9, r2, r9, r3
 8006476:	3701      	adds	r7, #1
 8006478:	9017      	str	r0, [sp, #92]	; 0x5c
 800647a:	e7bf      	b.n	80063fc <_strtod_l+0x154>
 800647c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800647e:	195a      	adds	r2, r3, r5
 8006480:	9217      	str	r2, [sp, #92]	; 0x5c
 8006482:	5d5a      	ldrb	r2, [r3, r5]
 8006484:	2f00      	cmp	r7, #0
 8006486:	d037      	beq.n	80064f8 <_strtod_l+0x250>
 8006488:	9005      	str	r0, [sp, #20]
 800648a:	463d      	mov	r5, r7
 800648c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006490:	2b09      	cmp	r3, #9
 8006492:	d912      	bls.n	80064ba <_strtod_l+0x212>
 8006494:	2301      	movs	r3, #1
 8006496:	e7c2      	b.n	800641e <_strtod_l+0x176>
 8006498:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800649a:	1c5a      	adds	r2, r3, #1
 800649c:	9217      	str	r2, [sp, #92]	; 0x5c
 800649e:	785a      	ldrb	r2, [r3, #1]
 80064a0:	3001      	adds	r0, #1
 80064a2:	2a30      	cmp	r2, #48	; 0x30
 80064a4:	d0f8      	beq.n	8006498 <_strtod_l+0x1f0>
 80064a6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80064aa:	2b08      	cmp	r3, #8
 80064ac:	f200 84d9 	bhi.w	8006e62 <_strtod_l+0xbba>
 80064b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80064b2:	9005      	str	r0, [sp, #20]
 80064b4:	2000      	movs	r0, #0
 80064b6:	9308      	str	r3, [sp, #32]
 80064b8:	4605      	mov	r5, r0
 80064ba:	3a30      	subs	r2, #48	; 0x30
 80064bc:	f100 0301 	add.w	r3, r0, #1
 80064c0:	d014      	beq.n	80064ec <_strtod_l+0x244>
 80064c2:	9905      	ldr	r1, [sp, #20]
 80064c4:	4419      	add	r1, r3
 80064c6:	9105      	str	r1, [sp, #20]
 80064c8:	462b      	mov	r3, r5
 80064ca:	eb00 0e05 	add.w	lr, r0, r5
 80064ce:	210a      	movs	r1, #10
 80064d0:	4573      	cmp	r3, lr
 80064d2:	d113      	bne.n	80064fc <_strtod_l+0x254>
 80064d4:	182b      	adds	r3, r5, r0
 80064d6:	2b08      	cmp	r3, #8
 80064d8:	f105 0501 	add.w	r5, r5, #1
 80064dc:	4405      	add	r5, r0
 80064de:	dc1c      	bgt.n	800651a <_strtod_l+0x272>
 80064e0:	9907      	ldr	r1, [sp, #28]
 80064e2:	230a      	movs	r3, #10
 80064e4:	fb03 2301 	mla	r3, r3, r1, r2
 80064e8:	9307      	str	r3, [sp, #28]
 80064ea:	2300      	movs	r3, #0
 80064ec:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80064ee:	1c51      	adds	r1, r2, #1
 80064f0:	9117      	str	r1, [sp, #92]	; 0x5c
 80064f2:	7852      	ldrb	r2, [r2, #1]
 80064f4:	4618      	mov	r0, r3
 80064f6:	e7c9      	b.n	800648c <_strtod_l+0x1e4>
 80064f8:	4638      	mov	r0, r7
 80064fa:	e7d2      	b.n	80064a2 <_strtod_l+0x1fa>
 80064fc:	2b08      	cmp	r3, #8
 80064fe:	dc04      	bgt.n	800650a <_strtod_l+0x262>
 8006500:	9e07      	ldr	r6, [sp, #28]
 8006502:	434e      	muls	r6, r1
 8006504:	9607      	str	r6, [sp, #28]
 8006506:	3301      	adds	r3, #1
 8006508:	e7e2      	b.n	80064d0 <_strtod_l+0x228>
 800650a:	f103 0c01 	add.w	ip, r3, #1
 800650e:	f1bc 0f10 	cmp.w	ip, #16
 8006512:	bfd8      	it	le
 8006514:	fb01 f909 	mulle.w	r9, r1, r9
 8006518:	e7f5      	b.n	8006506 <_strtod_l+0x25e>
 800651a:	2d10      	cmp	r5, #16
 800651c:	bfdc      	itt	le
 800651e:	230a      	movle	r3, #10
 8006520:	fb03 2909 	mlale	r9, r3, r9, r2
 8006524:	e7e1      	b.n	80064ea <_strtod_l+0x242>
 8006526:	2300      	movs	r3, #0
 8006528:	9305      	str	r3, [sp, #20]
 800652a:	2301      	movs	r3, #1
 800652c:	e77c      	b.n	8006428 <_strtod_l+0x180>
 800652e:	f04f 0c00 	mov.w	ip, #0
 8006532:	f108 0202 	add.w	r2, r8, #2
 8006536:	9217      	str	r2, [sp, #92]	; 0x5c
 8006538:	f898 2002 	ldrb.w	r2, [r8, #2]
 800653c:	e785      	b.n	800644a <_strtod_l+0x1a2>
 800653e:	f04f 0c01 	mov.w	ip, #1
 8006542:	e7f6      	b.n	8006532 <_strtod_l+0x28a>
 8006544:	0800a15c 	.word	0x0800a15c
 8006548:	08009eac 	.word	0x08009eac
 800654c:	7ff00000 	.word	0x7ff00000
 8006550:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006552:	1c51      	adds	r1, r2, #1
 8006554:	9117      	str	r1, [sp, #92]	; 0x5c
 8006556:	7852      	ldrb	r2, [r2, #1]
 8006558:	2a30      	cmp	r2, #48	; 0x30
 800655a:	d0f9      	beq.n	8006550 <_strtod_l+0x2a8>
 800655c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006560:	2908      	cmp	r1, #8
 8006562:	f63f af79 	bhi.w	8006458 <_strtod_l+0x1b0>
 8006566:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800656a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800656c:	9206      	str	r2, [sp, #24]
 800656e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006570:	1c51      	adds	r1, r2, #1
 8006572:	9117      	str	r1, [sp, #92]	; 0x5c
 8006574:	7852      	ldrb	r2, [r2, #1]
 8006576:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800657a:	2e09      	cmp	r6, #9
 800657c:	d937      	bls.n	80065ee <_strtod_l+0x346>
 800657e:	9e06      	ldr	r6, [sp, #24]
 8006580:	1b89      	subs	r1, r1, r6
 8006582:	2908      	cmp	r1, #8
 8006584:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8006588:	dc02      	bgt.n	8006590 <_strtod_l+0x2e8>
 800658a:	4576      	cmp	r6, lr
 800658c:	bfa8      	it	ge
 800658e:	4676      	movge	r6, lr
 8006590:	f1bc 0f00 	cmp.w	ip, #0
 8006594:	d000      	beq.n	8006598 <_strtod_l+0x2f0>
 8006596:	4276      	negs	r6, r6
 8006598:	2d00      	cmp	r5, #0
 800659a:	d14d      	bne.n	8006638 <_strtod_l+0x390>
 800659c:	9904      	ldr	r1, [sp, #16]
 800659e:	4301      	orrs	r1, r0
 80065a0:	f47f aec6 	bne.w	8006330 <_strtod_l+0x88>
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	f47f aee1 	bne.w	800636c <_strtod_l+0xc4>
 80065aa:	2a69      	cmp	r2, #105	; 0x69
 80065ac:	d027      	beq.n	80065fe <_strtod_l+0x356>
 80065ae:	dc24      	bgt.n	80065fa <_strtod_l+0x352>
 80065b0:	2a49      	cmp	r2, #73	; 0x49
 80065b2:	d024      	beq.n	80065fe <_strtod_l+0x356>
 80065b4:	2a4e      	cmp	r2, #78	; 0x4e
 80065b6:	f47f aed9 	bne.w	800636c <_strtod_l+0xc4>
 80065ba:	499f      	ldr	r1, [pc, #636]	; (8006838 <_strtod_l+0x590>)
 80065bc:	a817      	add	r0, sp, #92	; 0x5c
 80065be:	f002 f8b3 	bl	8008728 <__match>
 80065c2:	2800      	cmp	r0, #0
 80065c4:	f43f aed2 	beq.w	800636c <_strtod_l+0xc4>
 80065c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80065ca:	781b      	ldrb	r3, [r3, #0]
 80065cc:	2b28      	cmp	r3, #40	; 0x28
 80065ce:	d12d      	bne.n	800662c <_strtod_l+0x384>
 80065d0:	499a      	ldr	r1, [pc, #616]	; (800683c <_strtod_l+0x594>)
 80065d2:	aa1a      	add	r2, sp, #104	; 0x68
 80065d4:	a817      	add	r0, sp, #92	; 0x5c
 80065d6:	f002 f8bb 	bl	8008750 <__hexnan>
 80065da:	2805      	cmp	r0, #5
 80065dc:	d126      	bne.n	800662c <_strtod_l+0x384>
 80065de:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80065e0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80065e4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80065e8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80065ec:	e6a0      	b.n	8006330 <_strtod_l+0x88>
 80065ee:	210a      	movs	r1, #10
 80065f0:	fb01 2e0e 	mla	lr, r1, lr, r2
 80065f4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80065f8:	e7b9      	b.n	800656e <_strtod_l+0x2c6>
 80065fa:	2a6e      	cmp	r2, #110	; 0x6e
 80065fc:	e7db      	b.n	80065b6 <_strtod_l+0x30e>
 80065fe:	4990      	ldr	r1, [pc, #576]	; (8006840 <_strtod_l+0x598>)
 8006600:	a817      	add	r0, sp, #92	; 0x5c
 8006602:	f002 f891 	bl	8008728 <__match>
 8006606:	2800      	cmp	r0, #0
 8006608:	f43f aeb0 	beq.w	800636c <_strtod_l+0xc4>
 800660c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800660e:	498d      	ldr	r1, [pc, #564]	; (8006844 <_strtod_l+0x59c>)
 8006610:	3b01      	subs	r3, #1
 8006612:	a817      	add	r0, sp, #92	; 0x5c
 8006614:	9317      	str	r3, [sp, #92]	; 0x5c
 8006616:	f002 f887 	bl	8008728 <__match>
 800661a:	b910      	cbnz	r0, 8006622 <_strtod_l+0x37a>
 800661c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800661e:	3301      	adds	r3, #1
 8006620:	9317      	str	r3, [sp, #92]	; 0x5c
 8006622:	f8df b230 	ldr.w	fp, [pc, #560]	; 8006854 <_strtod_l+0x5ac>
 8006626:	f04f 0a00 	mov.w	sl, #0
 800662a:	e681      	b.n	8006330 <_strtod_l+0x88>
 800662c:	4886      	ldr	r0, [pc, #536]	; (8006848 <_strtod_l+0x5a0>)
 800662e:	f003 fa2f 	bl	8009a90 <nan>
 8006632:	ec5b ab10 	vmov	sl, fp, d0
 8006636:	e67b      	b.n	8006330 <_strtod_l+0x88>
 8006638:	9b05      	ldr	r3, [sp, #20]
 800663a:	9807      	ldr	r0, [sp, #28]
 800663c:	1af3      	subs	r3, r6, r3
 800663e:	2f00      	cmp	r7, #0
 8006640:	bf08      	it	eq
 8006642:	462f      	moveq	r7, r5
 8006644:	2d10      	cmp	r5, #16
 8006646:	9306      	str	r3, [sp, #24]
 8006648:	46a8      	mov	r8, r5
 800664a:	bfa8      	it	ge
 800664c:	f04f 0810 	movge.w	r8, #16
 8006650:	f7f9 ff68 	bl	8000524 <__aeabi_ui2d>
 8006654:	2d09      	cmp	r5, #9
 8006656:	4682      	mov	sl, r0
 8006658:	468b      	mov	fp, r1
 800665a:	dd13      	ble.n	8006684 <_strtod_l+0x3dc>
 800665c:	4b7b      	ldr	r3, [pc, #492]	; (800684c <_strtod_l+0x5a4>)
 800665e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006662:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006666:	f7f9 ffd7 	bl	8000618 <__aeabi_dmul>
 800666a:	4682      	mov	sl, r0
 800666c:	4648      	mov	r0, r9
 800666e:	468b      	mov	fp, r1
 8006670:	f7f9 ff58 	bl	8000524 <__aeabi_ui2d>
 8006674:	4602      	mov	r2, r0
 8006676:	460b      	mov	r3, r1
 8006678:	4650      	mov	r0, sl
 800667a:	4659      	mov	r1, fp
 800667c:	f7f9 fe16 	bl	80002ac <__adddf3>
 8006680:	4682      	mov	sl, r0
 8006682:	468b      	mov	fp, r1
 8006684:	2d0f      	cmp	r5, #15
 8006686:	dc38      	bgt.n	80066fa <_strtod_l+0x452>
 8006688:	9b06      	ldr	r3, [sp, #24]
 800668a:	2b00      	cmp	r3, #0
 800668c:	f43f ae50 	beq.w	8006330 <_strtod_l+0x88>
 8006690:	dd24      	ble.n	80066dc <_strtod_l+0x434>
 8006692:	2b16      	cmp	r3, #22
 8006694:	dc0b      	bgt.n	80066ae <_strtod_l+0x406>
 8006696:	496d      	ldr	r1, [pc, #436]	; (800684c <_strtod_l+0x5a4>)
 8006698:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800669c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80066a0:	4652      	mov	r2, sl
 80066a2:	465b      	mov	r3, fp
 80066a4:	f7f9 ffb8 	bl	8000618 <__aeabi_dmul>
 80066a8:	4682      	mov	sl, r0
 80066aa:	468b      	mov	fp, r1
 80066ac:	e640      	b.n	8006330 <_strtod_l+0x88>
 80066ae:	9a06      	ldr	r2, [sp, #24]
 80066b0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80066b4:	4293      	cmp	r3, r2
 80066b6:	db20      	blt.n	80066fa <_strtod_l+0x452>
 80066b8:	4c64      	ldr	r4, [pc, #400]	; (800684c <_strtod_l+0x5a4>)
 80066ba:	f1c5 050f 	rsb	r5, r5, #15
 80066be:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80066c2:	4652      	mov	r2, sl
 80066c4:	465b      	mov	r3, fp
 80066c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80066ca:	f7f9 ffa5 	bl	8000618 <__aeabi_dmul>
 80066ce:	9b06      	ldr	r3, [sp, #24]
 80066d0:	1b5d      	subs	r5, r3, r5
 80066d2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80066d6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80066da:	e7e3      	b.n	80066a4 <_strtod_l+0x3fc>
 80066dc:	9b06      	ldr	r3, [sp, #24]
 80066de:	3316      	adds	r3, #22
 80066e0:	db0b      	blt.n	80066fa <_strtod_l+0x452>
 80066e2:	9b05      	ldr	r3, [sp, #20]
 80066e4:	1b9e      	subs	r6, r3, r6
 80066e6:	4b59      	ldr	r3, [pc, #356]	; (800684c <_strtod_l+0x5a4>)
 80066e8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80066ec:	e9d6 2300 	ldrd	r2, r3, [r6]
 80066f0:	4650      	mov	r0, sl
 80066f2:	4659      	mov	r1, fp
 80066f4:	f7fa f8ba 	bl	800086c <__aeabi_ddiv>
 80066f8:	e7d6      	b.n	80066a8 <_strtod_l+0x400>
 80066fa:	9b06      	ldr	r3, [sp, #24]
 80066fc:	eba5 0808 	sub.w	r8, r5, r8
 8006700:	4498      	add	r8, r3
 8006702:	f1b8 0f00 	cmp.w	r8, #0
 8006706:	dd74      	ble.n	80067f2 <_strtod_l+0x54a>
 8006708:	f018 030f 	ands.w	r3, r8, #15
 800670c:	d00a      	beq.n	8006724 <_strtod_l+0x47c>
 800670e:	494f      	ldr	r1, [pc, #316]	; (800684c <_strtod_l+0x5a4>)
 8006710:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006714:	4652      	mov	r2, sl
 8006716:	465b      	mov	r3, fp
 8006718:	e9d1 0100 	ldrd	r0, r1, [r1]
 800671c:	f7f9 ff7c 	bl	8000618 <__aeabi_dmul>
 8006720:	4682      	mov	sl, r0
 8006722:	468b      	mov	fp, r1
 8006724:	f038 080f 	bics.w	r8, r8, #15
 8006728:	d04f      	beq.n	80067ca <_strtod_l+0x522>
 800672a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800672e:	dd22      	ble.n	8006776 <_strtod_l+0x4ce>
 8006730:	2500      	movs	r5, #0
 8006732:	462e      	mov	r6, r5
 8006734:	9507      	str	r5, [sp, #28]
 8006736:	9505      	str	r5, [sp, #20]
 8006738:	2322      	movs	r3, #34	; 0x22
 800673a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8006854 <_strtod_l+0x5ac>
 800673e:	6023      	str	r3, [r4, #0]
 8006740:	f04f 0a00 	mov.w	sl, #0
 8006744:	9b07      	ldr	r3, [sp, #28]
 8006746:	2b00      	cmp	r3, #0
 8006748:	f43f adf2 	beq.w	8006330 <_strtod_l+0x88>
 800674c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800674e:	4620      	mov	r0, r4
 8006750:	f002 f96e 	bl	8008a30 <_Bfree>
 8006754:	9905      	ldr	r1, [sp, #20]
 8006756:	4620      	mov	r0, r4
 8006758:	f002 f96a 	bl	8008a30 <_Bfree>
 800675c:	4631      	mov	r1, r6
 800675e:	4620      	mov	r0, r4
 8006760:	f002 f966 	bl	8008a30 <_Bfree>
 8006764:	9907      	ldr	r1, [sp, #28]
 8006766:	4620      	mov	r0, r4
 8006768:	f002 f962 	bl	8008a30 <_Bfree>
 800676c:	4629      	mov	r1, r5
 800676e:	4620      	mov	r0, r4
 8006770:	f002 f95e 	bl	8008a30 <_Bfree>
 8006774:	e5dc      	b.n	8006330 <_strtod_l+0x88>
 8006776:	4b36      	ldr	r3, [pc, #216]	; (8006850 <_strtod_l+0x5a8>)
 8006778:	9304      	str	r3, [sp, #16]
 800677a:	2300      	movs	r3, #0
 800677c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8006780:	4650      	mov	r0, sl
 8006782:	4659      	mov	r1, fp
 8006784:	4699      	mov	r9, r3
 8006786:	f1b8 0f01 	cmp.w	r8, #1
 800678a:	dc21      	bgt.n	80067d0 <_strtod_l+0x528>
 800678c:	b10b      	cbz	r3, 8006792 <_strtod_l+0x4ea>
 800678e:	4682      	mov	sl, r0
 8006790:	468b      	mov	fp, r1
 8006792:	4b2f      	ldr	r3, [pc, #188]	; (8006850 <_strtod_l+0x5a8>)
 8006794:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006798:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800679c:	4652      	mov	r2, sl
 800679e:	465b      	mov	r3, fp
 80067a0:	e9d9 0100 	ldrd	r0, r1, [r9]
 80067a4:	f7f9 ff38 	bl	8000618 <__aeabi_dmul>
 80067a8:	4b2a      	ldr	r3, [pc, #168]	; (8006854 <_strtod_l+0x5ac>)
 80067aa:	460a      	mov	r2, r1
 80067ac:	400b      	ands	r3, r1
 80067ae:	492a      	ldr	r1, [pc, #168]	; (8006858 <_strtod_l+0x5b0>)
 80067b0:	428b      	cmp	r3, r1
 80067b2:	4682      	mov	sl, r0
 80067b4:	d8bc      	bhi.n	8006730 <_strtod_l+0x488>
 80067b6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80067ba:	428b      	cmp	r3, r1
 80067bc:	bf86      	itte	hi
 80067be:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800685c <_strtod_l+0x5b4>
 80067c2:	f04f 3aff 	movhi.w	sl, #4294967295
 80067c6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80067ca:	2300      	movs	r3, #0
 80067cc:	9304      	str	r3, [sp, #16]
 80067ce:	e084      	b.n	80068da <_strtod_l+0x632>
 80067d0:	f018 0f01 	tst.w	r8, #1
 80067d4:	d005      	beq.n	80067e2 <_strtod_l+0x53a>
 80067d6:	9b04      	ldr	r3, [sp, #16]
 80067d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067dc:	f7f9 ff1c 	bl	8000618 <__aeabi_dmul>
 80067e0:	2301      	movs	r3, #1
 80067e2:	9a04      	ldr	r2, [sp, #16]
 80067e4:	3208      	adds	r2, #8
 80067e6:	f109 0901 	add.w	r9, r9, #1
 80067ea:	ea4f 0868 	mov.w	r8, r8, asr #1
 80067ee:	9204      	str	r2, [sp, #16]
 80067f0:	e7c9      	b.n	8006786 <_strtod_l+0x4de>
 80067f2:	d0ea      	beq.n	80067ca <_strtod_l+0x522>
 80067f4:	f1c8 0800 	rsb	r8, r8, #0
 80067f8:	f018 020f 	ands.w	r2, r8, #15
 80067fc:	d00a      	beq.n	8006814 <_strtod_l+0x56c>
 80067fe:	4b13      	ldr	r3, [pc, #76]	; (800684c <_strtod_l+0x5a4>)
 8006800:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006804:	4650      	mov	r0, sl
 8006806:	4659      	mov	r1, fp
 8006808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800680c:	f7fa f82e 	bl	800086c <__aeabi_ddiv>
 8006810:	4682      	mov	sl, r0
 8006812:	468b      	mov	fp, r1
 8006814:	ea5f 1828 	movs.w	r8, r8, asr #4
 8006818:	d0d7      	beq.n	80067ca <_strtod_l+0x522>
 800681a:	f1b8 0f1f 	cmp.w	r8, #31
 800681e:	dd1f      	ble.n	8006860 <_strtod_l+0x5b8>
 8006820:	2500      	movs	r5, #0
 8006822:	462e      	mov	r6, r5
 8006824:	9507      	str	r5, [sp, #28]
 8006826:	9505      	str	r5, [sp, #20]
 8006828:	2322      	movs	r3, #34	; 0x22
 800682a:	f04f 0a00 	mov.w	sl, #0
 800682e:	f04f 0b00 	mov.w	fp, #0
 8006832:	6023      	str	r3, [r4, #0]
 8006834:	e786      	b.n	8006744 <_strtod_l+0x49c>
 8006836:	bf00      	nop
 8006838:	08009e7d 	.word	0x08009e7d
 800683c:	08009ec0 	.word	0x08009ec0
 8006840:	08009e75 	.word	0x08009e75
 8006844:	0800a004 	.word	0x0800a004
 8006848:	0800a318 	.word	0x0800a318
 800684c:	0800a1f8 	.word	0x0800a1f8
 8006850:	0800a1d0 	.word	0x0800a1d0
 8006854:	7ff00000 	.word	0x7ff00000
 8006858:	7ca00000 	.word	0x7ca00000
 800685c:	7fefffff 	.word	0x7fefffff
 8006860:	f018 0310 	ands.w	r3, r8, #16
 8006864:	bf18      	it	ne
 8006866:	236a      	movne	r3, #106	; 0x6a
 8006868:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8006c18 <_strtod_l+0x970>
 800686c:	9304      	str	r3, [sp, #16]
 800686e:	4650      	mov	r0, sl
 8006870:	4659      	mov	r1, fp
 8006872:	2300      	movs	r3, #0
 8006874:	f018 0f01 	tst.w	r8, #1
 8006878:	d004      	beq.n	8006884 <_strtod_l+0x5dc>
 800687a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800687e:	f7f9 fecb 	bl	8000618 <__aeabi_dmul>
 8006882:	2301      	movs	r3, #1
 8006884:	ea5f 0868 	movs.w	r8, r8, asr #1
 8006888:	f109 0908 	add.w	r9, r9, #8
 800688c:	d1f2      	bne.n	8006874 <_strtod_l+0x5cc>
 800688e:	b10b      	cbz	r3, 8006894 <_strtod_l+0x5ec>
 8006890:	4682      	mov	sl, r0
 8006892:	468b      	mov	fp, r1
 8006894:	9b04      	ldr	r3, [sp, #16]
 8006896:	b1c3      	cbz	r3, 80068ca <_strtod_l+0x622>
 8006898:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800689c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	4659      	mov	r1, fp
 80068a4:	dd11      	ble.n	80068ca <_strtod_l+0x622>
 80068a6:	2b1f      	cmp	r3, #31
 80068a8:	f340 8124 	ble.w	8006af4 <_strtod_l+0x84c>
 80068ac:	2b34      	cmp	r3, #52	; 0x34
 80068ae:	bfde      	ittt	le
 80068b0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80068b4:	f04f 33ff 	movle.w	r3, #4294967295
 80068b8:	fa03 f202 	lslle.w	r2, r3, r2
 80068bc:	f04f 0a00 	mov.w	sl, #0
 80068c0:	bfcc      	ite	gt
 80068c2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80068c6:	ea02 0b01 	andle.w	fp, r2, r1
 80068ca:	2200      	movs	r2, #0
 80068cc:	2300      	movs	r3, #0
 80068ce:	4650      	mov	r0, sl
 80068d0:	4659      	mov	r1, fp
 80068d2:	f7fa f909 	bl	8000ae8 <__aeabi_dcmpeq>
 80068d6:	2800      	cmp	r0, #0
 80068d8:	d1a2      	bne.n	8006820 <_strtod_l+0x578>
 80068da:	9b07      	ldr	r3, [sp, #28]
 80068dc:	9300      	str	r3, [sp, #0]
 80068de:	9908      	ldr	r1, [sp, #32]
 80068e0:	462b      	mov	r3, r5
 80068e2:	463a      	mov	r2, r7
 80068e4:	4620      	mov	r0, r4
 80068e6:	f002 f90b 	bl	8008b00 <__s2b>
 80068ea:	9007      	str	r0, [sp, #28]
 80068ec:	2800      	cmp	r0, #0
 80068ee:	f43f af1f 	beq.w	8006730 <_strtod_l+0x488>
 80068f2:	9b05      	ldr	r3, [sp, #20]
 80068f4:	1b9e      	subs	r6, r3, r6
 80068f6:	9b06      	ldr	r3, [sp, #24]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	bfb4      	ite	lt
 80068fc:	4633      	movlt	r3, r6
 80068fe:	2300      	movge	r3, #0
 8006900:	930c      	str	r3, [sp, #48]	; 0x30
 8006902:	9b06      	ldr	r3, [sp, #24]
 8006904:	2500      	movs	r5, #0
 8006906:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800690a:	9312      	str	r3, [sp, #72]	; 0x48
 800690c:	462e      	mov	r6, r5
 800690e:	9b07      	ldr	r3, [sp, #28]
 8006910:	4620      	mov	r0, r4
 8006912:	6859      	ldr	r1, [r3, #4]
 8006914:	f002 f84c 	bl	80089b0 <_Balloc>
 8006918:	9005      	str	r0, [sp, #20]
 800691a:	2800      	cmp	r0, #0
 800691c:	f43f af0c 	beq.w	8006738 <_strtod_l+0x490>
 8006920:	9b07      	ldr	r3, [sp, #28]
 8006922:	691a      	ldr	r2, [r3, #16]
 8006924:	3202      	adds	r2, #2
 8006926:	f103 010c 	add.w	r1, r3, #12
 800692a:	0092      	lsls	r2, r2, #2
 800692c:	300c      	adds	r0, #12
 800692e:	f002 f831 	bl	8008994 <memcpy>
 8006932:	ec4b ab10 	vmov	d0, sl, fp
 8006936:	aa1a      	add	r2, sp, #104	; 0x68
 8006938:	a919      	add	r1, sp, #100	; 0x64
 800693a:	4620      	mov	r0, r4
 800693c:	f002 fc26 	bl	800918c <__d2b>
 8006940:	ec4b ab18 	vmov	d8, sl, fp
 8006944:	9018      	str	r0, [sp, #96]	; 0x60
 8006946:	2800      	cmp	r0, #0
 8006948:	f43f aef6 	beq.w	8006738 <_strtod_l+0x490>
 800694c:	2101      	movs	r1, #1
 800694e:	4620      	mov	r0, r4
 8006950:	f002 f970 	bl	8008c34 <__i2b>
 8006954:	4606      	mov	r6, r0
 8006956:	2800      	cmp	r0, #0
 8006958:	f43f aeee 	beq.w	8006738 <_strtod_l+0x490>
 800695c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800695e:	9904      	ldr	r1, [sp, #16]
 8006960:	2b00      	cmp	r3, #0
 8006962:	bfab      	itete	ge
 8006964:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8006966:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8006968:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800696a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800696e:	bfac      	ite	ge
 8006970:	eb03 0902 	addge.w	r9, r3, r2
 8006974:	1ad7      	sublt	r7, r2, r3
 8006976:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006978:	eba3 0801 	sub.w	r8, r3, r1
 800697c:	4490      	add	r8, r2
 800697e:	4ba1      	ldr	r3, [pc, #644]	; (8006c04 <_strtod_l+0x95c>)
 8006980:	f108 38ff 	add.w	r8, r8, #4294967295
 8006984:	4598      	cmp	r8, r3
 8006986:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800698a:	f280 80c7 	bge.w	8006b1c <_strtod_l+0x874>
 800698e:	eba3 0308 	sub.w	r3, r3, r8
 8006992:	2b1f      	cmp	r3, #31
 8006994:	eba2 0203 	sub.w	r2, r2, r3
 8006998:	f04f 0101 	mov.w	r1, #1
 800699c:	f300 80b1 	bgt.w	8006b02 <_strtod_l+0x85a>
 80069a0:	fa01 f303 	lsl.w	r3, r1, r3
 80069a4:	930d      	str	r3, [sp, #52]	; 0x34
 80069a6:	2300      	movs	r3, #0
 80069a8:	9308      	str	r3, [sp, #32]
 80069aa:	eb09 0802 	add.w	r8, r9, r2
 80069ae:	9b04      	ldr	r3, [sp, #16]
 80069b0:	45c1      	cmp	r9, r8
 80069b2:	4417      	add	r7, r2
 80069b4:	441f      	add	r7, r3
 80069b6:	464b      	mov	r3, r9
 80069b8:	bfa8      	it	ge
 80069ba:	4643      	movge	r3, r8
 80069bc:	42bb      	cmp	r3, r7
 80069be:	bfa8      	it	ge
 80069c0:	463b      	movge	r3, r7
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	bfc2      	ittt	gt
 80069c6:	eba8 0803 	subgt.w	r8, r8, r3
 80069ca:	1aff      	subgt	r7, r7, r3
 80069cc:	eba9 0903 	subgt.w	r9, r9, r3
 80069d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	dd17      	ble.n	8006a06 <_strtod_l+0x75e>
 80069d6:	4631      	mov	r1, r6
 80069d8:	461a      	mov	r2, r3
 80069da:	4620      	mov	r0, r4
 80069dc:	f002 f9ea 	bl	8008db4 <__pow5mult>
 80069e0:	4606      	mov	r6, r0
 80069e2:	2800      	cmp	r0, #0
 80069e4:	f43f aea8 	beq.w	8006738 <_strtod_l+0x490>
 80069e8:	4601      	mov	r1, r0
 80069ea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80069ec:	4620      	mov	r0, r4
 80069ee:	f002 f937 	bl	8008c60 <__multiply>
 80069f2:	900b      	str	r0, [sp, #44]	; 0x2c
 80069f4:	2800      	cmp	r0, #0
 80069f6:	f43f ae9f 	beq.w	8006738 <_strtod_l+0x490>
 80069fa:	9918      	ldr	r1, [sp, #96]	; 0x60
 80069fc:	4620      	mov	r0, r4
 80069fe:	f002 f817 	bl	8008a30 <_Bfree>
 8006a02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a04:	9318      	str	r3, [sp, #96]	; 0x60
 8006a06:	f1b8 0f00 	cmp.w	r8, #0
 8006a0a:	f300 808c 	bgt.w	8006b26 <_strtod_l+0x87e>
 8006a0e:	9b06      	ldr	r3, [sp, #24]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	dd08      	ble.n	8006a26 <_strtod_l+0x77e>
 8006a14:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006a16:	9905      	ldr	r1, [sp, #20]
 8006a18:	4620      	mov	r0, r4
 8006a1a:	f002 f9cb 	bl	8008db4 <__pow5mult>
 8006a1e:	9005      	str	r0, [sp, #20]
 8006a20:	2800      	cmp	r0, #0
 8006a22:	f43f ae89 	beq.w	8006738 <_strtod_l+0x490>
 8006a26:	2f00      	cmp	r7, #0
 8006a28:	dd08      	ble.n	8006a3c <_strtod_l+0x794>
 8006a2a:	9905      	ldr	r1, [sp, #20]
 8006a2c:	463a      	mov	r2, r7
 8006a2e:	4620      	mov	r0, r4
 8006a30:	f002 fa1a 	bl	8008e68 <__lshift>
 8006a34:	9005      	str	r0, [sp, #20]
 8006a36:	2800      	cmp	r0, #0
 8006a38:	f43f ae7e 	beq.w	8006738 <_strtod_l+0x490>
 8006a3c:	f1b9 0f00 	cmp.w	r9, #0
 8006a40:	dd08      	ble.n	8006a54 <_strtod_l+0x7ac>
 8006a42:	4631      	mov	r1, r6
 8006a44:	464a      	mov	r2, r9
 8006a46:	4620      	mov	r0, r4
 8006a48:	f002 fa0e 	bl	8008e68 <__lshift>
 8006a4c:	4606      	mov	r6, r0
 8006a4e:	2800      	cmp	r0, #0
 8006a50:	f43f ae72 	beq.w	8006738 <_strtod_l+0x490>
 8006a54:	9a05      	ldr	r2, [sp, #20]
 8006a56:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006a58:	4620      	mov	r0, r4
 8006a5a:	f002 fa91 	bl	8008f80 <__mdiff>
 8006a5e:	4605      	mov	r5, r0
 8006a60:	2800      	cmp	r0, #0
 8006a62:	f43f ae69 	beq.w	8006738 <_strtod_l+0x490>
 8006a66:	68c3      	ldr	r3, [r0, #12]
 8006a68:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	60c3      	str	r3, [r0, #12]
 8006a6e:	4631      	mov	r1, r6
 8006a70:	f002 fa6a 	bl	8008f48 <__mcmp>
 8006a74:	2800      	cmp	r0, #0
 8006a76:	da60      	bge.n	8006b3a <_strtod_l+0x892>
 8006a78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a7a:	ea53 030a 	orrs.w	r3, r3, sl
 8006a7e:	f040 8082 	bne.w	8006b86 <_strtod_l+0x8de>
 8006a82:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d17d      	bne.n	8006b86 <_strtod_l+0x8de>
 8006a8a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006a8e:	0d1b      	lsrs	r3, r3, #20
 8006a90:	051b      	lsls	r3, r3, #20
 8006a92:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006a96:	d976      	bls.n	8006b86 <_strtod_l+0x8de>
 8006a98:	696b      	ldr	r3, [r5, #20]
 8006a9a:	b913      	cbnz	r3, 8006aa2 <_strtod_l+0x7fa>
 8006a9c:	692b      	ldr	r3, [r5, #16]
 8006a9e:	2b01      	cmp	r3, #1
 8006aa0:	dd71      	ble.n	8006b86 <_strtod_l+0x8de>
 8006aa2:	4629      	mov	r1, r5
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	4620      	mov	r0, r4
 8006aa8:	f002 f9de 	bl	8008e68 <__lshift>
 8006aac:	4631      	mov	r1, r6
 8006aae:	4605      	mov	r5, r0
 8006ab0:	f002 fa4a 	bl	8008f48 <__mcmp>
 8006ab4:	2800      	cmp	r0, #0
 8006ab6:	dd66      	ble.n	8006b86 <_strtod_l+0x8de>
 8006ab8:	9904      	ldr	r1, [sp, #16]
 8006aba:	4a53      	ldr	r2, [pc, #332]	; (8006c08 <_strtod_l+0x960>)
 8006abc:	465b      	mov	r3, fp
 8006abe:	2900      	cmp	r1, #0
 8006ac0:	f000 8081 	beq.w	8006bc6 <_strtod_l+0x91e>
 8006ac4:	ea02 010b 	and.w	r1, r2, fp
 8006ac8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006acc:	dc7b      	bgt.n	8006bc6 <_strtod_l+0x91e>
 8006ace:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006ad2:	f77f aea9 	ble.w	8006828 <_strtod_l+0x580>
 8006ad6:	4b4d      	ldr	r3, [pc, #308]	; (8006c0c <_strtod_l+0x964>)
 8006ad8:	4650      	mov	r0, sl
 8006ada:	4659      	mov	r1, fp
 8006adc:	2200      	movs	r2, #0
 8006ade:	f7f9 fd9b 	bl	8000618 <__aeabi_dmul>
 8006ae2:	460b      	mov	r3, r1
 8006ae4:	4303      	orrs	r3, r0
 8006ae6:	bf08      	it	eq
 8006ae8:	2322      	moveq	r3, #34	; 0x22
 8006aea:	4682      	mov	sl, r0
 8006aec:	468b      	mov	fp, r1
 8006aee:	bf08      	it	eq
 8006af0:	6023      	streq	r3, [r4, #0]
 8006af2:	e62b      	b.n	800674c <_strtod_l+0x4a4>
 8006af4:	f04f 32ff 	mov.w	r2, #4294967295
 8006af8:	fa02 f303 	lsl.w	r3, r2, r3
 8006afc:	ea03 0a0a 	and.w	sl, r3, sl
 8006b00:	e6e3      	b.n	80068ca <_strtod_l+0x622>
 8006b02:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8006b06:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8006b0a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8006b0e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8006b12:	fa01 f308 	lsl.w	r3, r1, r8
 8006b16:	9308      	str	r3, [sp, #32]
 8006b18:	910d      	str	r1, [sp, #52]	; 0x34
 8006b1a:	e746      	b.n	80069aa <_strtod_l+0x702>
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	9308      	str	r3, [sp, #32]
 8006b20:	2301      	movs	r3, #1
 8006b22:	930d      	str	r3, [sp, #52]	; 0x34
 8006b24:	e741      	b.n	80069aa <_strtod_l+0x702>
 8006b26:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006b28:	4642      	mov	r2, r8
 8006b2a:	4620      	mov	r0, r4
 8006b2c:	f002 f99c 	bl	8008e68 <__lshift>
 8006b30:	9018      	str	r0, [sp, #96]	; 0x60
 8006b32:	2800      	cmp	r0, #0
 8006b34:	f47f af6b 	bne.w	8006a0e <_strtod_l+0x766>
 8006b38:	e5fe      	b.n	8006738 <_strtod_l+0x490>
 8006b3a:	465f      	mov	r7, fp
 8006b3c:	d16e      	bne.n	8006c1c <_strtod_l+0x974>
 8006b3e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006b40:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006b44:	b342      	cbz	r2, 8006b98 <_strtod_l+0x8f0>
 8006b46:	4a32      	ldr	r2, [pc, #200]	; (8006c10 <_strtod_l+0x968>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d128      	bne.n	8006b9e <_strtod_l+0x8f6>
 8006b4c:	9b04      	ldr	r3, [sp, #16]
 8006b4e:	4651      	mov	r1, sl
 8006b50:	b1eb      	cbz	r3, 8006b8e <_strtod_l+0x8e6>
 8006b52:	4b2d      	ldr	r3, [pc, #180]	; (8006c08 <_strtod_l+0x960>)
 8006b54:	403b      	ands	r3, r7
 8006b56:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006b5a:	f04f 32ff 	mov.w	r2, #4294967295
 8006b5e:	d819      	bhi.n	8006b94 <_strtod_l+0x8ec>
 8006b60:	0d1b      	lsrs	r3, r3, #20
 8006b62:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006b66:	fa02 f303 	lsl.w	r3, r2, r3
 8006b6a:	4299      	cmp	r1, r3
 8006b6c:	d117      	bne.n	8006b9e <_strtod_l+0x8f6>
 8006b6e:	4b29      	ldr	r3, [pc, #164]	; (8006c14 <_strtod_l+0x96c>)
 8006b70:	429f      	cmp	r7, r3
 8006b72:	d102      	bne.n	8006b7a <_strtod_l+0x8d2>
 8006b74:	3101      	adds	r1, #1
 8006b76:	f43f addf 	beq.w	8006738 <_strtod_l+0x490>
 8006b7a:	4b23      	ldr	r3, [pc, #140]	; (8006c08 <_strtod_l+0x960>)
 8006b7c:	403b      	ands	r3, r7
 8006b7e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8006b82:	f04f 0a00 	mov.w	sl, #0
 8006b86:	9b04      	ldr	r3, [sp, #16]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d1a4      	bne.n	8006ad6 <_strtod_l+0x82e>
 8006b8c:	e5de      	b.n	800674c <_strtod_l+0x4a4>
 8006b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8006b92:	e7ea      	b.n	8006b6a <_strtod_l+0x8c2>
 8006b94:	4613      	mov	r3, r2
 8006b96:	e7e8      	b.n	8006b6a <_strtod_l+0x8c2>
 8006b98:	ea53 030a 	orrs.w	r3, r3, sl
 8006b9c:	d08c      	beq.n	8006ab8 <_strtod_l+0x810>
 8006b9e:	9b08      	ldr	r3, [sp, #32]
 8006ba0:	b1db      	cbz	r3, 8006bda <_strtod_l+0x932>
 8006ba2:	423b      	tst	r3, r7
 8006ba4:	d0ef      	beq.n	8006b86 <_strtod_l+0x8de>
 8006ba6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ba8:	9a04      	ldr	r2, [sp, #16]
 8006baa:	4650      	mov	r0, sl
 8006bac:	4659      	mov	r1, fp
 8006bae:	b1c3      	cbz	r3, 8006be2 <_strtod_l+0x93a>
 8006bb0:	f7ff fb5c 	bl	800626c <sulp>
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	460b      	mov	r3, r1
 8006bb8:	ec51 0b18 	vmov	r0, r1, d8
 8006bbc:	f7f9 fb76 	bl	80002ac <__adddf3>
 8006bc0:	4682      	mov	sl, r0
 8006bc2:	468b      	mov	fp, r1
 8006bc4:	e7df      	b.n	8006b86 <_strtod_l+0x8de>
 8006bc6:	4013      	ands	r3, r2
 8006bc8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006bcc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006bd0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006bd4:	f04f 3aff 	mov.w	sl, #4294967295
 8006bd8:	e7d5      	b.n	8006b86 <_strtod_l+0x8de>
 8006bda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006bdc:	ea13 0f0a 	tst.w	r3, sl
 8006be0:	e7e0      	b.n	8006ba4 <_strtod_l+0x8fc>
 8006be2:	f7ff fb43 	bl	800626c <sulp>
 8006be6:	4602      	mov	r2, r0
 8006be8:	460b      	mov	r3, r1
 8006bea:	ec51 0b18 	vmov	r0, r1, d8
 8006bee:	f7f9 fb5b 	bl	80002a8 <__aeabi_dsub>
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	4682      	mov	sl, r0
 8006bf8:	468b      	mov	fp, r1
 8006bfa:	f7f9 ff75 	bl	8000ae8 <__aeabi_dcmpeq>
 8006bfe:	2800      	cmp	r0, #0
 8006c00:	d0c1      	beq.n	8006b86 <_strtod_l+0x8de>
 8006c02:	e611      	b.n	8006828 <_strtod_l+0x580>
 8006c04:	fffffc02 	.word	0xfffffc02
 8006c08:	7ff00000 	.word	0x7ff00000
 8006c0c:	39500000 	.word	0x39500000
 8006c10:	000fffff 	.word	0x000fffff
 8006c14:	7fefffff 	.word	0x7fefffff
 8006c18:	08009ed8 	.word	0x08009ed8
 8006c1c:	4631      	mov	r1, r6
 8006c1e:	4628      	mov	r0, r5
 8006c20:	f002 fb10 	bl	8009244 <__ratio>
 8006c24:	ec59 8b10 	vmov	r8, r9, d0
 8006c28:	ee10 0a10 	vmov	r0, s0
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006c32:	4649      	mov	r1, r9
 8006c34:	f7f9 ff6c 	bl	8000b10 <__aeabi_dcmple>
 8006c38:	2800      	cmp	r0, #0
 8006c3a:	d07a      	beq.n	8006d32 <_strtod_l+0xa8a>
 8006c3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d04a      	beq.n	8006cd8 <_strtod_l+0xa30>
 8006c42:	4b95      	ldr	r3, [pc, #596]	; (8006e98 <_strtod_l+0xbf0>)
 8006c44:	2200      	movs	r2, #0
 8006c46:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006c4a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8006e98 <_strtod_l+0xbf0>
 8006c4e:	f04f 0800 	mov.w	r8, #0
 8006c52:	4b92      	ldr	r3, [pc, #584]	; (8006e9c <_strtod_l+0xbf4>)
 8006c54:	403b      	ands	r3, r7
 8006c56:	930d      	str	r3, [sp, #52]	; 0x34
 8006c58:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006c5a:	4b91      	ldr	r3, [pc, #580]	; (8006ea0 <_strtod_l+0xbf8>)
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	f040 80b0 	bne.w	8006dc2 <_strtod_l+0xb1a>
 8006c62:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006c66:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8006c6a:	ec4b ab10 	vmov	d0, sl, fp
 8006c6e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006c72:	f002 fa0f 	bl	8009094 <__ulp>
 8006c76:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006c7a:	ec53 2b10 	vmov	r2, r3, d0
 8006c7e:	f7f9 fccb 	bl	8000618 <__aeabi_dmul>
 8006c82:	4652      	mov	r2, sl
 8006c84:	465b      	mov	r3, fp
 8006c86:	f7f9 fb11 	bl	80002ac <__adddf3>
 8006c8a:	460b      	mov	r3, r1
 8006c8c:	4983      	ldr	r1, [pc, #524]	; (8006e9c <_strtod_l+0xbf4>)
 8006c8e:	4a85      	ldr	r2, [pc, #532]	; (8006ea4 <_strtod_l+0xbfc>)
 8006c90:	4019      	ands	r1, r3
 8006c92:	4291      	cmp	r1, r2
 8006c94:	4682      	mov	sl, r0
 8006c96:	d960      	bls.n	8006d5a <_strtod_l+0xab2>
 8006c98:	ee18 3a90 	vmov	r3, s17
 8006c9c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d104      	bne.n	8006cae <_strtod_l+0xa06>
 8006ca4:	ee18 3a10 	vmov	r3, s16
 8006ca8:	3301      	adds	r3, #1
 8006caa:	f43f ad45 	beq.w	8006738 <_strtod_l+0x490>
 8006cae:	f8df b200 	ldr.w	fp, [pc, #512]	; 8006eb0 <_strtod_l+0xc08>
 8006cb2:	f04f 3aff 	mov.w	sl, #4294967295
 8006cb6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006cb8:	4620      	mov	r0, r4
 8006cba:	f001 feb9 	bl	8008a30 <_Bfree>
 8006cbe:	9905      	ldr	r1, [sp, #20]
 8006cc0:	4620      	mov	r0, r4
 8006cc2:	f001 feb5 	bl	8008a30 <_Bfree>
 8006cc6:	4631      	mov	r1, r6
 8006cc8:	4620      	mov	r0, r4
 8006cca:	f001 feb1 	bl	8008a30 <_Bfree>
 8006cce:	4629      	mov	r1, r5
 8006cd0:	4620      	mov	r0, r4
 8006cd2:	f001 fead 	bl	8008a30 <_Bfree>
 8006cd6:	e61a      	b.n	800690e <_strtod_l+0x666>
 8006cd8:	f1ba 0f00 	cmp.w	sl, #0
 8006cdc:	d11b      	bne.n	8006d16 <_strtod_l+0xa6e>
 8006cde:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006ce2:	b9f3      	cbnz	r3, 8006d22 <_strtod_l+0xa7a>
 8006ce4:	4b6c      	ldr	r3, [pc, #432]	; (8006e98 <_strtod_l+0xbf0>)
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	4640      	mov	r0, r8
 8006cea:	4649      	mov	r1, r9
 8006cec:	f7f9 ff06 	bl	8000afc <__aeabi_dcmplt>
 8006cf0:	b9d0      	cbnz	r0, 8006d28 <_strtod_l+0xa80>
 8006cf2:	4640      	mov	r0, r8
 8006cf4:	4649      	mov	r1, r9
 8006cf6:	4b6c      	ldr	r3, [pc, #432]	; (8006ea8 <_strtod_l+0xc00>)
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	f7f9 fc8d 	bl	8000618 <__aeabi_dmul>
 8006cfe:	4680      	mov	r8, r0
 8006d00:	4689      	mov	r9, r1
 8006d02:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006d06:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8006d0a:	9315      	str	r3, [sp, #84]	; 0x54
 8006d0c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006d10:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006d14:	e79d      	b.n	8006c52 <_strtod_l+0x9aa>
 8006d16:	f1ba 0f01 	cmp.w	sl, #1
 8006d1a:	d102      	bne.n	8006d22 <_strtod_l+0xa7a>
 8006d1c:	2f00      	cmp	r7, #0
 8006d1e:	f43f ad83 	beq.w	8006828 <_strtod_l+0x580>
 8006d22:	4b62      	ldr	r3, [pc, #392]	; (8006eac <_strtod_l+0xc04>)
 8006d24:	2200      	movs	r2, #0
 8006d26:	e78e      	b.n	8006c46 <_strtod_l+0x99e>
 8006d28:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8006ea8 <_strtod_l+0xc00>
 8006d2c:	f04f 0800 	mov.w	r8, #0
 8006d30:	e7e7      	b.n	8006d02 <_strtod_l+0xa5a>
 8006d32:	4b5d      	ldr	r3, [pc, #372]	; (8006ea8 <_strtod_l+0xc00>)
 8006d34:	4640      	mov	r0, r8
 8006d36:	4649      	mov	r1, r9
 8006d38:	2200      	movs	r2, #0
 8006d3a:	f7f9 fc6d 	bl	8000618 <__aeabi_dmul>
 8006d3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d40:	4680      	mov	r8, r0
 8006d42:	4689      	mov	r9, r1
 8006d44:	b933      	cbnz	r3, 8006d54 <_strtod_l+0xaac>
 8006d46:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006d4a:	900e      	str	r0, [sp, #56]	; 0x38
 8006d4c:	930f      	str	r3, [sp, #60]	; 0x3c
 8006d4e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006d52:	e7dd      	b.n	8006d10 <_strtod_l+0xa68>
 8006d54:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8006d58:	e7f9      	b.n	8006d4e <_strtod_l+0xaa6>
 8006d5a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8006d5e:	9b04      	ldr	r3, [sp, #16]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d1a8      	bne.n	8006cb6 <_strtod_l+0xa0e>
 8006d64:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006d68:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006d6a:	0d1b      	lsrs	r3, r3, #20
 8006d6c:	051b      	lsls	r3, r3, #20
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	d1a1      	bne.n	8006cb6 <_strtod_l+0xa0e>
 8006d72:	4640      	mov	r0, r8
 8006d74:	4649      	mov	r1, r9
 8006d76:	f7f9 ffaf 	bl	8000cd8 <__aeabi_d2lz>
 8006d7a:	f7f9 fc1f 	bl	80005bc <__aeabi_l2d>
 8006d7e:	4602      	mov	r2, r0
 8006d80:	460b      	mov	r3, r1
 8006d82:	4640      	mov	r0, r8
 8006d84:	4649      	mov	r1, r9
 8006d86:	f7f9 fa8f 	bl	80002a8 <__aeabi_dsub>
 8006d8a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006d8c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006d90:	ea43 030a 	orr.w	r3, r3, sl
 8006d94:	4313      	orrs	r3, r2
 8006d96:	4680      	mov	r8, r0
 8006d98:	4689      	mov	r9, r1
 8006d9a:	d055      	beq.n	8006e48 <_strtod_l+0xba0>
 8006d9c:	a336      	add	r3, pc, #216	; (adr r3, 8006e78 <_strtod_l+0xbd0>)
 8006d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006da2:	f7f9 feab 	bl	8000afc <__aeabi_dcmplt>
 8006da6:	2800      	cmp	r0, #0
 8006da8:	f47f acd0 	bne.w	800674c <_strtod_l+0x4a4>
 8006dac:	a334      	add	r3, pc, #208	; (adr r3, 8006e80 <_strtod_l+0xbd8>)
 8006dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006db2:	4640      	mov	r0, r8
 8006db4:	4649      	mov	r1, r9
 8006db6:	f7f9 febf 	bl	8000b38 <__aeabi_dcmpgt>
 8006dba:	2800      	cmp	r0, #0
 8006dbc:	f43f af7b 	beq.w	8006cb6 <_strtod_l+0xa0e>
 8006dc0:	e4c4      	b.n	800674c <_strtod_l+0x4a4>
 8006dc2:	9b04      	ldr	r3, [sp, #16]
 8006dc4:	b333      	cbz	r3, 8006e14 <_strtod_l+0xb6c>
 8006dc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006dc8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006dcc:	d822      	bhi.n	8006e14 <_strtod_l+0xb6c>
 8006dce:	a32e      	add	r3, pc, #184	; (adr r3, 8006e88 <_strtod_l+0xbe0>)
 8006dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd4:	4640      	mov	r0, r8
 8006dd6:	4649      	mov	r1, r9
 8006dd8:	f7f9 fe9a 	bl	8000b10 <__aeabi_dcmple>
 8006ddc:	b1a0      	cbz	r0, 8006e08 <_strtod_l+0xb60>
 8006dde:	4649      	mov	r1, r9
 8006de0:	4640      	mov	r0, r8
 8006de2:	f7f9 fef1 	bl	8000bc8 <__aeabi_d2uiz>
 8006de6:	2801      	cmp	r0, #1
 8006de8:	bf38      	it	cc
 8006dea:	2001      	movcc	r0, #1
 8006dec:	f7f9 fb9a 	bl	8000524 <__aeabi_ui2d>
 8006df0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006df2:	4680      	mov	r8, r0
 8006df4:	4689      	mov	r9, r1
 8006df6:	bb23      	cbnz	r3, 8006e42 <_strtod_l+0xb9a>
 8006df8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006dfc:	9010      	str	r0, [sp, #64]	; 0x40
 8006dfe:	9311      	str	r3, [sp, #68]	; 0x44
 8006e00:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006e04:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006e08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e0a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006e0c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8006e10:	1a9b      	subs	r3, r3, r2
 8006e12:	9309      	str	r3, [sp, #36]	; 0x24
 8006e14:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006e18:	eeb0 0a48 	vmov.f32	s0, s16
 8006e1c:	eef0 0a68 	vmov.f32	s1, s17
 8006e20:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006e24:	f002 f936 	bl	8009094 <__ulp>
 8006e28:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006e2c:	ec53 2b10 	vmov	r2, r3, d0
 8006e30:	f7f9 fbf2 	bl	8000618 <__aeabi_dmul>
 8006e34:	ec53 2b18 	vmov	r2, r3, d8
 8006e38:	f7f9 fa38 	bl	80002ac <__adddf3>
 8006e3c:	4682      	mov	sl, r0
 8006e3e:	468b      	mov	fp, r1
 8006e40:	e78d      	b.n	8006d5e <_strtod_l+0xab6>
 8006e42:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8006e46:	e7db      	b.n	8006e00 <_strtod_l+0xb58>
 8006e48:	a311      	add	r3, pc, #68	; (adr r3, 8006e90 <_strtod_l+0xbe8>)
 8006e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e4e:	f7f9 fe55 	bl	8000afc <__aeabi_dcmplt>
 8006e52:	e7b2      	b.n	8006dba <_strtod_l+0xb12>
 8006e54:	2300      	movs	r3, #0
 8006e56:	930a      	str	r3, [sp, #40]	; 0x28
 8006e58:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006e5a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006e5c:	6013      	str	r3, [r2, #0]
 8006e5e:	f7ff ba6b 	b.w	8006338 <_strtod_l+0x90>
 8006e62:	2a65      	cmp	r2, #101	; 0x65
 8006e64:	f43f ab5f 	beq.w	8006526 <_strtod_l+0x27e>
 8006e68:	2a45      	cmp	r2, #69	; 0x45
 8006e6a:	f43f ab5c 	beq.w	8006526 <_strtod_l+0x27e>
 8006e6e:	2301      	movs	r3, #1
 8006e70:	f7ff bb94 	b.w	800659c <_strtod_l+0x2f4>
 8006e74:	f3af 8000 	nop.w
 8006e78:	94a03595 	.word	0x94a03595
 8006e7c:	3fdfffff 	.word	0x3fdfffff
 8006e80:	35afe535 	.word	0x35afe535
 8006e84:	3fe00000 	.word	0x3fe00000
 8006e88:	ffc00000 	.word	0xffc00000
 8006e8c:	41dfffff 	.word	0x41dfffff
 8006e90:	94a03595 	.word	0x94a03595
 8006e94:	3fcfffff 	.word	0x3fcfffff
 8006e98:	3ff00000 	.word	0x3ff00000
 8006e9c:	7ff00000 	.word	0x7ff00000
 8006ea0:	7fe00000 	.word	0x7fe00000
 8006ea4:	7c9fffff 	.word	0x7c9fffff
 8006ea8:	3fe00000 	.word	0x3fe00000
 8006eac:	bff00000 	.word	0xbff00000
 8006eb0:	7fefffff 	.word	0x7fefffff

08006eb4 <_strtod_r>:
 8006eb4:	4b01      	ldr	r3, [pc, #4]	; (8006ebc <_strtod_r+0x8>)
 8006eb6:	f7ff b9f7 	b.w	80062a8 <_strtod_l>
 8006eba:	bf00      	nop
 8006ebc:	20000074 	.word	0x20000074

08006ec0 <_strtol_l.constprop.0>:
 8006ec0:	2b01      	cmp	r3, #1
 8006ec2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ec6:	d001      	beq.n	8006ecc <_strtol_l.constprop.0+0xc>
 8006ec8:	2b24      	cmp	r3, #36	; 0x24
 8006eca:	d906      	bls.n	8006eda <_strtol_l.constprop.0+0x1a>
 8006ecc:	f7fe fa6e 	bl	80053ac <__errno>
 8006ed0:	2316      	movs	r3, #22
 8006ed2:	6003      	str	r3, [r0, #0]
 8006ed4:	2000      	movs	r0, #0
 8006ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006eda:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006fc0 <_strtol_l.constprop.0+0x100>
 8006ede:	460d      	mov	r5, r1
 8006ee0:	462e      	mov	r6, r5
 8006ee2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006ee6:	f814 700c 	ldrb.w	r7, [r4, ip]
 8006eea:	f017 0708 	ands.w	r7, r7, #8
 8006eee:	d1f7      	bne.n	8006ee0 <_strtol_l.constprop.0+0x20>
 8006ef0:	2c2d      	cmp	r4, #45	; 0x2d
 8006ef2:	d132      	bne.n	8006f5a <_strtol_l.constprop.0+0x9a>
 8006ef4:	782c      	ldrb	r4, [r5, #0]
 8006ef6:	2701      	movs	r7, #1
 8006ef8:	1cb5      	adds	r5, r6, #2
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d05b      	beq.n	8006fb6 <_strtol_l.constprop.0+0xf6>
 8006efe:	2b10      	cmp	r3, #16
 8006f00:	d109      	bne.n	8006f16 <_strtol_l.constprop.0+0x56>
 8006f02:	2c30      	cmp	r4, #48	; 0x30
 8006f04:	d107      	bne.n	8006f16 <_strtol_l.constprop.0+0x56>
 8006f06:	782c      	ldrb	r4, [r5, #0]
 8006f08:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006f0c:	2c58      	cmp	r4, #88	; 0x58
 8006f0e:	d14d      	bne.n	8006fac <_strtol_l.constprop.0+0xec>
 8006f10:	786c      	ldrb	r4, [r5, #1]
 8006f12:	2310      	movs	r3, #16
 8006f14:	3502      	adds	r5, #2
 8006f16:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006f1a:	f108 38ff 	add.w	r8, r8, #4294967295
 8006f1e:	f04f 0c00 	mov.w	ip, #0
 8006f22:	fbb8 f9f3 	udiv	r9, r8, r3
 8006f26:	4666      	mov	r6, ip
 8006f28:	fb03 8a19 	mls	sl, r3, r9, r8
 8006f2c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006f30:	f1be 0f09 	cmp.w	lr, #9
 8006f34:	d816      	bhi.n	8006f64 <_strtol_l.constprop.0+0xa4>
 8006f36:	4674      	mov	r4, lr
 8006f38:	42a3      	cmp	r3, r4
 8006f3a:	dd24      	ble.n	8006f86 <_strtol_l.constprop.0+0xc6>
 8006f3c:	f1bc 0f00 	cmp.w	ip, #0
 8006f40:	db1e      	blt.n	8006f80 <_strtol_l.constprop.0+0xc0>
 8006f42:	45b1      	cmp	r9, r6
 8006f44:	d31c      	bcc.n	8006f80 <_strtol_l.constprop.0+0xc0>
 8006f46:	d101      	bne.n	8006f4c <_strtol_l.constprop.0+0x8c>
 8006f48:	45a2      	cmp	sl, r4
 8006f4a:	db19      	blt.n	8006f80 <_strtol_l.constprop.0+0xc0>
 8006f4c:	fb06 4603 	mla	r6, r6, r3, r4
 8006f50:	f04f 0c01 	mov.w	ip, #1
 8006f54:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006f58:	e7e8      	b.n	8006f2c <_strtol_l.constprop.0+0x6c>
 8006f5a:	2c2b      	cmp	r4, #43	; 0x2b
 8006f5c:	bf04      	itt	eq
 8006f5e:	782c      	ldrbeq	r4, [r5, #0]
 8006f60:	1cb5      	addeq	r5, r6, #2
 8006f62:	e7ca      	b.n	8006efa <_strtol_l.constprop.0+0x3a>
 8006f64:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006f68:	f1be 0f19 	cmp.w	lr, #25
 8006f6c:	d801      	bhi.n	8006f72 <_strtol_l.constprop.0+0xb2>
 8006f6e:	3c37      	subs	r4, #55	; 0x37
 8006f70:	e7e2      	b.n	8006f38 <_strtol_l.constprop.0+0x78>
 8006f72:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8006f76:	f1be 0f19 	cmp.w	lr, #25
 8006f7a:	d804      	bhi.n	8006f86 <_strtol_l.constprop.0+0xc6>
 8006f7c:	3c57      	subs	r4, #87	; 0x57
 8006f7e:	e7db      	b.n	8006f38 <_strtol_l.constprop.0+0x78>
 8006f80:	f04f 3cff 	mov.w	ip, #4294967295
 8006f84:	e7e6      	b.n	8006f54 <_strtol_l.constprop.0+0x94>
 8006f86:	f1bc 0f00 	cmp.w	ip, #0
 8006f8a:	da05      	bge.n	8006f98 <_strtol_l.constprop.0+0xd8>
 8006f8c:	2322      	movs	r3, #34	; 0x22
 8006f8e:	6003      	str	r3, [r0, #0]
 8006f90:	4646      	mov	r6, r8
 8006f92:	b942      	cbnz	r2, 8006fa6 <_strtol_l.constprop.0+0xe6>
 8006f94:	4630      	mov	r0, r6
 8006f96:	e79e      	b.n	8006ed6 <_strtol_l.constprop.0+0x16>
 8006f98:	b107      	cbz	r7, 8006f9c <_strtol_l.constprop.0+0xdc>
 8006f9a:	4276      	negs	r6, r6
 8006f9c:	2a00      	cmp	r2, #0
 8006f9e:	d0f9      	beq.n	8006f94 <_strtol_l.constprop.0+0xd4>
 8006fa0:	f1bc 0f00 	cmp.w	ip, #0
 8006fa4:	d000      	beq.n	8006fa8 <_strtol_l.constprop.0+0xe8>
 8006fa6:	1e69      	subs	r1, r5, #1
 8006fa8:	6011      	str	r1, [r2, #0]
 8006faa:	e7f3      	b.n	8006f94 <_strtol_l.constprop.0+0xd4>
 8006fac:	2430      	movs	r4, #48	; 0x30
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d1b1      	bne.n	8006f16 <_strtol_l.constprop.0+0x56>
 8006fb2:	2308      	movs	r3, #8
 8006fb4:	e7af      	b.n	8006f16 <_strtol_l.constprop.0+0x56>
 8006fb6:	2c30      	cmp	r4, #48	; 0x30
 8006fb8:	d0a5      	beq.n	8006f06 <_strtol_l.constprop.0+0x46>
 8006fba:	230a      	movs	r3, #10
 8006fbc:	e7ab      	b.n	8006f16 <_strtol_l.constprop.0+0x56>
 8006fbe:	bf00      	nop
 8006fc0:	08009f01 	.word	0x08009f01

08006fc4 <_strtol_r>:
 8006fc4:	f7ff bf7c 	b.w	8006ec0 <_strtol_l.constprop.0>

08006fc8 <__swbuf_r>:
 8006fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fca:	460e      	mov	r6, r1
 8006fcc:	4614      	mov	r4, r2
 8006fce:	4605      	mov	r5, r0
 8006fd0:	b118      	cbz	r0, 8006fda <__swbuf_r+0x12>
 8006fd2:	6983      	ldr	r3, [r0, #24]
 8006fd4:	b90b      	cbnz	r3, 8006fda <__swbuf_r+0x12>
 8006fd6:	f001 f84b 	bl	8008070 <__sinit>
 8006fda:	4b21      	ldr	r3, [pc, #132]	; (8007060 <__swbuf_r+0x98>)
 8006fdc:	429c      	cmp	r4, r3
 8006fde:	d12b      	bne.n	8007038 <__swbuf_r+0x70>
 8006fe0:	686c      	ldr	r4, [r5, #4]
 8006fe2:	69a3      	ldr	r3, [r4, #24]
 8006fe4:	60a3      	str	r3, [r4, #8]
 8006fe6:	89a3      	ldrh	r3, [r4, #12]
 8006fe8:	071a      	lsls	r2, r3, #28
 8006fea:	d52f      	bpl.n	800704c <__swbuf_r+0x84>
 8006fec:	6923      	ldr	r3, [r4, #16]
 8006fee:	b36b      	cbz	r3, 800704c <__swbuf_r+0x84>
 8006ff0:	6923      	ldr	r3, [r4, #16]
 8006ff2:	6820      	ldr	r0, [r4, #0]
 8006ff4:	1ac0      	subs	r0, r0, r3
 8006ff6:	6963      	ldr	r3, [r4, #20]
 8006ff8:	b2f6      	uxtb	r6, r6
 8006ffa:	4283      	cmp	r3, r0
 8006ffc:	4637      	mov	r7, r6
 8006ffe:	dc04      	bgt.n	800700a <__swbuf_r+0x42>
 8007000:	4621      	mov	r1, r4
 8007002:	4628      	mov	r0, r5
 8007004:	f000 ffa0 	bl	8007f48 <_fflush_r>
 8007008:	bb30      	cbnz	r0, 8007058 <__swbuf_r+0x90>
 800700a:	68a3      	ldr	r3, [r4, #8]
 800700c:	3b01      	subs	r3, #1
 800700e:	60a3      	str	r3, [r4, #8]
 8007010:	6823      	ldr	r3, [r4, #0]
 8007012:	1c5a      	adds	r2, r3, #1
 8007014:	6022      	str	r2, [r4, #0]
 8007016:	701e      	strb	r6, [r3, #0]
 8007018:	6963      	ldr	r3, [r4, #20]
 800701a:	3001      	adds	r0, #1
 800701c:	4283      	cmp	r3, r0
 800701e:	d004      	beq.n	800702a <__swbuf_r+0x62>
 8007020:	89a3      	ldrh	r3, [r4, #12]
 8007022:	07db      	lsls	r3, r3, #31
 8007024:	d506      	bpl.n	8007034 <__swbuf_r+0x6c>
 8007026:	2e0a      	cmp	r6, #10
 8007028:	d104      	bne.n	8007034 <__swbuf_r+0x6c>
 800702a:	4621      	mov	r1, r4
 800702c:	4628      	mov	r0, r5
 800702e:	f000 ff8b 	bl	8007f48 <_fflush_r>
 8007032:	b988      	cbnz	r0, 8007058 <__swbuf_r+0x90>
 8007034:	4638      	mov	r0, r7
 8007036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007038:	4b0a      	ldr	r3, [pc, #40]	; (8007064 <__swbuf_r+0x9c>)
 800703a:	429c      	cmp	r4, r3
 800703c:	d101      	bne.n	8007042 <__swbuf_r+0x7a>
 800703e:	68ac      	ldr	r4, [r5, #8]
 8007040:	e7cf      	b.n	8006fe2 <__swbuf_r+0x1a>
 8007042:	4b09      	ldr	r3, [pc, #36]	; (8007068 <__swbuf_r+0xa0>)
 8007044:	429c      	cmp	r4, r3
 8007046:	bf08      	it	eq
 8007048:	68ec      	ldreq	r4, [r5, #12]
 800704a:	e7ca      	b.n	8006fe2 <__swbuf_r+0x1a>
 800704c:	4621      	mov	r1, r4
 800704e:	4628      	mov	r0, r5
 8007050:	f000 f80c 	bl	800706c <__swsetup_r>
 8007054:	2800      	cmp	r0, #0
 8007056:	d0cb      	beq.n	8006ff0 <__swbuf_r+0x28>
 8007058:	f04f 37ff 	mov.w	r7, #4294967295
 800705c:	e7ea      	b.n	8007034 <__swbuf_r+0x6c>
 800705e:	bf00      	nop
 8007060:	0800a0b4 	.word	0x0800a0b4
 8007064:	0800a0d4 	.word	0x0800a0d4
 8007068:	0800a094 	.word	0x0800a094

0800706c <__swsetup_r>:
 800706c:	4b32      	ldr	r3, [pc, #200]	; (8007138 <__swsetup_r+0xcc>)
 800706e:	b570      	push	{r4, r5, r6, lr}
 8007070:	681d      	ldr	r5, [r3, #0]
 8007072:	4606      	mov	r6, r0
 8007074:	460c      	mov	r4, r1
 8007076:	b125      	cbz	r5, 8007082 <__swsetup_r+0x16>
 8007078:	69ab      	ldr	r3, [r5, #24]
 800707a:	b913      	cbnz	r3, 8007082 <__swsetup_r+0x16>
 800707c:	4628      	mov	r0, r5
 800707e:	f000 fff7 	bl	8008070 <__sinit>
 8007082:	4b2e      	ldr	r3, [pc, #184]	; (800713c <__swsetup_r+0xd0>)
 8007084:	429c      	cmp	r4, r3
 8007086:	d10f      	bne.n	80070a8 <__swsetup_r+0x3c>
 8007088:	686c      	ldr	r4, [r5, #4]
 800708a:	89a3      	ldrh	r3, [r4, #12]
 800708c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007090:	0719      	lsls	r1, r3, #28
 8007092:	d42c      	bmi.n	80070ee <__swsetup_r+0x82>
 8007094:	06dd      	lsls	r5, r3, #27
 8007096:	d411      	bmi.n	80070bc <__swsetup_r+0x50>
 8007098:	2309      	movs	r3, #9
 800709a:	6033      	str	r3, [r6, #0]
 800709c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80070a0:	81a3      	strh	r3, [r4, #12]
 80070a2:	f04f 30ff 	mov.w	r0, #4294967295
 80070a6:	e03e      	b.n	8007126 <__swsetup_r+0xba>
 80070a8:	4b25      	ldr	r3, [pc, #148]	; (8007140 <__swsetup_r+0xd4>)
 80070aa:	429c      	cmp	r4, r3
 80070ac:	d101      	bne.n	80070b2 <__swsetup_r+0x46>
 80070ae:	68ac      	ldr	r4, [r5, #8]
 80070b0:	e7eb      	b.n	800708a <__swsetup_r+0x1e>
 80070b2:	4b24      	ldr	r3, [pc, #144]	; (8007144 <__swsetup_r+0xd8>)
 80070b4:	429c      	cmp	r4, r3
 80070b6:	bf08      	it	eq
 80070b8:	68ec      	ldreq	r4, [r5, #12]
 80070ba:	e7e6      	b.n	800708a <__swsetup_r+0x1e>
 80070bc:	0758      	lsls	r0, r3, #29
 80070be:	d512      	bpl.n	80070e6 <__swsetup_r+0x7a>
 80070c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80070c2:	b141      	cbz	r1, 80070d6 <__swsetup_r+0x6a>
 80070c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80070c8:	4299      	cmp	r1, r3
 80070ca:	d002      	beq.n	80070d2 <__swsetup_r+0x66>
 80070cc:	4630      	mov	r0, r6
 80070ce:	f002 f947 	bl	8009360 <_free_r>
 80070d2:	2300      	movs	r3, #0
 80070d4:	6363      	str	r3, [r4, #52]	; 0x34
 80070d6:	89a3      	ldrh	r3, [r4, #12]
 80070d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80070dc:	81a3      	strh	r3, [r4, #12]
 80070de:	2300      	movs	r3, #0
 80070e0:	6063      	str	r3, [r4, #4]
 80070e2:	6923      	ldr	r3, [r4, #16]
 80070e4:	6023      	str	r3, [r4, #0]
 80070e6:	89a3      	ldrh	r3, [r4, #12]
 80070e8:	f043 0308 	orr.w	r3, r3, #8
 80070ec:	81a3      	strh	r3, [r4, #12]
 80070ee:	6923      	ldr	r3, [r4, #16]
 80070f0:	b94b      	cbnz	r3, 8007106 <__swsetup_r+0x9a>
 80070f2:	89a3      	ldrh	r3, [r4, #12]
 80070f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80070f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070fc:	d003      	beq.n	8007106 <__swsetup_r+0x9a>
 80070fe:	4621      	mov	r1, r4
 8007100:	4630      	mov	r0, r6
 8007102:	f001 fbed 	bl	80088e0 <__smakebuf_r>
 8007106:	89a0      	ldrh	r0, [r4, #12]
 8007108:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800710c:	f010 0301 	ands.w	r3, r0, #1
 8007110:	d00a      	beq.n	8007128 <__swsetup_r+0xbc>
 8007112:	2300      	movs	r3, #0
 8007114:	60a3      	str	r3, [r4, #8]
 8007116:	6963      	ldr	r3, [r4, #20]
 8007118:	425b      	negs	r3, r3
 800711a:	61a3      	str	r3, [r4, #24]
 800711c:	6923      	ldr	r3, [r4, #16]
 800711e:	b943      	cbnz	r3, 8007132 <__swsetup_r+0xc6>
 8007120:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007124:	d1ba      	bne.n	800709c <__swsetup_r+0x30>
 8007126:	bd70      	pop	{r4, r5, r6, pc}
 8007128:	0781      	lsls	r1, r0, #30
 800712a:	bf58      	it	pl
 800712c:	6963      	ldrpl	r3, [r4, #20]
 800712e:	60a3      	str	r3, [r4, #8]
 8007130:	e7f4      	b.n	800711c <__swsetup_r+0xb0>
 8007132:	2000      	movs	r0, #0
 8007134:	e7f7      	b.n	8007126 <__swsetup_r+0xba>
 8007136:	bf00      	nop
 8007138:	2000000c 	.word	0x2000000c
 800713c:	0800a0b4 	.word	0x0800a0b4
 8007140:	0800a0d4 	.word	0x0800a0d4
 8007144:	0800a094 	.word	0x0800a094

08007148 <quorem>:
 8007148:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800714c:	6903      	ldr	r3, [r0, #16]
 800714e:	690c      	ldr	r4, [r1, #16]
 8007150:	42a3      	cmp	r3, r4
 8007152:	4607      	mov	r7, r0
 8007154:	f2c0 8081 	blt.w	800725a <quorem+0x112>
 8007158:	3c01      	subs	r4, #1
 800715a:	f101 0814 	add.w	r8, r1, #20
 800715e:	f100 0514 	add.w	r5, r0, #20
 8007162:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007166:	9301      	str	r3, [sp, #4]
 8007168:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800716c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007170:	3301      	adds	r3, #1
 8007172:	429a      	cmp	r2, r3
 8007174:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007178:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800717c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007180:	d331      	bcc.n	80071e6 <quorem+0x9e>
 8007182:	f04f 0e00 	mov.w	lr, #0
 8007186:	4640      	mov	r0, r8
 8007188:	46ac      	mov	ip, r5
 800718a:	46f2      	mov	sl, lr
 800718c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007190:	b293      	uxth	r3, r2
 8007192:	fb06 e303 	mla	r3, r6, r3, lr
 8007196:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800719a:	b29b      	uxth	r3, r3
 800719c:	ebaa 0303 	sub.w	r3, sl, r3
 80071a0:	f8dc a000 	ldr.w	sl, [ip]
 80071a4:	0c12      	lsrs	r2, r2, #16
 80071a6:	fa13 f38a 	uxtah	r3, r3, sl
 80071aa:	fb06 e202 	mla	r2, r6, r2, lr
 80071ae:	9300      	str	r3, [sp, #0]
 80071b0:	9b00      	ldr	r3, [sp, #0]
 80071b2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80071b6:	b292      	uxth	r2, r2
 80071b8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80071bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80071c0:	f8bd 3000 	ldrh.w	r3, [sp]
 80071c4:	4581      	cmp	r9, r0
 80071c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80071ca:	f84c 3b04 	str.w	r3, [ip], #4
 80071ce:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80071d2:	d2db      	bcs.n	800718c <quorem+0x44>
 80071d4:	f855 300b 	ldr.w	r3, [r5, fp]
 80071d8:	b92b      	cbnz	r3, 80071e6 <quorem+0x9e>
 80071da:	9b01      	ldr	r3, [sp, #4]
 80071dc:	3b04      	subs	r3, #4
 80071de:	429d      	cmp	r5, r3
 80071e0:	461a      	mov	r2, r3
 80071e2:	d32e      	bcc.n	8007242 <quorem+0xfa>
 80071e4:	613c      	str	r4, [r7, #16]
 80071e6:	4638      	mov	r0, r7
 80071e8:	f001 feae 	bl	8008f48 <__mcmp>
 80071ec:	2800      	cmp	r0, #0
 80071ee:	db24      	blt.n	800723a <quorem+0xf2>
 80071f0:	3601      	adds	r6, #1
 80071f2:	4628      	mov	r0, r5
 80071f4:	f04f 0c00 	mov.w	ip, #0
 80071f8:	f858 2b04 	ldr.w	r2, [r8], #4
 80071fc:	f8d0 e000 	ldr.w	lr, [r0]
 8007200:	b293      	uxth	r3, r2
 8007202:	ebac 0303 	sub.w	r3, ip, r3
 8007206:	0c12      	lsrs	r2, r2, #16
 8007208:	fa13 f38e 	uxtah	r3, r3, lr
 800720c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007210:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007214:	b29b      	uxth	r3, r3
 8007216:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800721a:	45c1      	cmp	r9, r8
 800721c:	f840 3b04 	str.w	r3, [r0], #4
 8007220:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007224:	d2e8      	bcs.n	80071f8 <quorem+0xb0>
 8007226:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800722a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800722e:	b922      	cbnz	r2, 800723a <quorem+0xf2>
 8007230:	3b04      	subs	r3, #4
 8007232:	429d      	cmp	r5, r3
 8007234:	461a      	mov	r2, r3
 8007236:	d30a      	bcc.n	800724e <quorem+0x106>
 8007238:	613c      	str	r4, [r7, #16]
 800723a:	4630      	mov	r0, r6
 800723c:	b003      	add	sp, #12
 800723e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007242:	6812      	ldr	r2, [r2, #0]
 8007244:	3b04      	subs	r3, #4
 8007246:	2a00      	cmp	r2, #0
 8007248:	d1cc      	bne.n	80071e4 <quorem+0x9c>
 800724a:	3c01      	subs	r4, #1
 800724c:	e7c7      	b.n	80071de <quorem+0x96>
 800724e:	6812      	ldr	r2, [r2, #0]
 8007250:	3b04      	subs	r3, #4
 8007252:	2a00      	cmp	r2, #0
 8007254:	d1f0      	bne.n	8007238 <quorem+0xf0>
 8007256:	3c01      	subs	r4, #1
 8007258:	e7eb      	b.n	8007232 <quorem+0xea>
 800725a:	2000      	movs	r0, #0
 800725c:	e7ee      	b.n	800723c <quorem+0xf4>
	...

08007260 <_dtoa_r>:
 8007260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007264:	ed2d 8b04 	vpush	{d8-d9}
 8007268:	ec57 6b10 	vmov	r6, r7, d0
 800726c:	b093      	sub	sp, #76	; 0x4c
 800726e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007270:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007274:	9106      	str	r1, [sp, #24]
 8007276:	ee10 aa10 	vmov	sl, s0
 800727a:	4604      	mov	r4, r0
 800727c:	9209      	str	r2, [sp, #36]	; 0x24
 800727e:	930c      	str	r3, [sp, #48]	; 0x30
 8007280:	46bb      	mov	fp, r7
 8007282:	b975      	cbnz	r5, 80072a2 <_dtoa_r+0x42>
 8007284:	2010      	movs	r0, #16
 8007286:	f001 fb6b 	bl	8008960 <malloc>
 800728a:	4602      	mov	r2, r0
 800728c:	6260      	str	r0, [r4, #36]	; 0x24
 800728e:	b920      	cbnz	r0, 800729a <_dtoa_r+0x3a>
 8007290:	4ba7      	ldr	r3, [pc, #668]	; (8007530 <_dtoa_r+0x2d0>)
 8007292:	21ea      	movs	r1, #234	; 0xea
 8007294:	48a7      	ldr	r0, [pc, #668]	; (8007534 <_dtoa_r+0x2d4>)
 8007296:	f002 fc89 	bl	8009bac <__assert_func>
 800729a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800729e:	6005      	str	r5, [r0, #0]
 80072a0:	60c5      	str	r5, [r0, #12]
 80072a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80072a4:	6819      	ldr	r1, [r3, #0]
 80072a6:	b151      	cbz	r1, 80072be <_dtoa_r+0x5e>
 80072a8:	685a      	ldr	r2, [r3, #4]
 80072aa:	604a      	str	r2, [r1, #4]
 80072ac:	2301      	movs	r3, #1
 80072ae:	4093      	lsls	r3, r2
 80072b0:	608b      	str	r3, [r1, #8]
 80072b2:	4620      	mov	r0, r4
 80072b4:	f001 fbbc 	bl	8008a30 <_Bfree>
 80072b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80072ba:	2200      	movs	r2, #0
 80072bc:	601a      	str	r2, [r3, #0]
 80072be:	1e3b      	subs	r3, r7, #0
 80072c0:	bfaa      	itet	ge
 80072c2:	2300      	movge	r3, #0
 80072c4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80072c8:	f8c8 3000 	strge.w	r3, [r8]
 80072cc:	4b9a      	ldr	r3, [pc, #616]	; (8007538 <_dtoa_r+0x2d8>)
 80072ce:	bfbc      	itt	lt
 80072d0:	2201      	movlt	r2, #1
 80072d2:	f8c8 2000 	strlt.w	r2, [r8]
 80072d6:	ea33 030b 	bics.w	r3, r3, fp
 80072da:	d11b      	bne.n	8007314 <_dtoa_r+0xb4>
 80072dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80072de:	f242 730f 	movw	r3, #9999	; 0x270f
 80072e2:	6013      	str	r3, [r2, #0]
 80072e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80072e8:	4333      	orrs	r3, r6
 80072ea:	f000 8592 	beq.w	8007e12 <_dtoa_r+0xbb2>
 80072ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80072f0:	b963      	cbnz	r3, 800730c <_dtoa_r+0xac>
 80072f2:	4b92      	ldr	r3, [pc, #584]	; (800753c <_dtoa_r+0x2dc>)
 80072f4:	e022      	b.n	800733c <_dtoa_r+0xdc>
 80072f6:	4b92      	ldr	r3, [pc, #584]	; (8007540 <_dtoa_r+0x2e0>)
 80072f8:	9301      	str	r3, [sp, #4]
 80072fa:	3308      	adds	r3, #8
 80072fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80072fe:	6013      	str	r3, [r2, #0]
 8007300:	9801      	ldr	r0, [sp, #4]
 8007302:	b013      	add	sp, #76	; 0x4c
 8007304:	ecbd 8b04 	vpop	{d8-d9}
 8007308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800730c:	4b8b      	ldr	r3, [pc, #556]	; (800753c <_dtoa_r+0x2dc>)
 800730e:	9301      	str	r3, [sp, #4]
 8007310:	3303      	adds	r3, #3
 8007312:	e7f3      	b.n	80072fc <_dtoa_r+0x9c>
 8007314:	2200      	movs	r2, #0
 8007316:	2300      	movs	r3, #0
 8007318:	4650      	mov	r0, sl
 800731a:	4659      	mov	r1, fp
 800731c:	f7f9 fbe4 	bl	8000ae8 <__aeabi_dcmpeq>
 8007320:	ec4b ab19 	vmov	d9, sl, fp
 8007324:	4680      	mov	r8, r0
 8007326:	b158      	cbz	r0, 8007340 <_dtoa_r+0xe0>
 8007328:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800732a:	2301      	movs	r3, #1
 800732c:	6013      	str	r3, [r2, #0]
 800732e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007330:	2b00      	cmp	r3, #0
 8007332:	f000 856b 	beq.w	8007e0c <_dtoa_r+0xbac>
 8007336:	4883      	ldr	r0, [pc, #524]	; (8007544 <_dtoa_r+0x2e4>)
 8007338:	6018      	str	r0, [r3, #0]
 800733a:	1e43      	subs	r3, r0, #1
 800733c:	9301      	str	r3, [sp, #4]
 800733e:	e7df      	b.n	8007300 <_dtoa_r+0xa0>
 8007340:	ec4b ab10 	vmov	d0, sl, fp
 8007344:	aa10      	add	r2, sp, #64	; 0x40
 8007346:	a911      	add	r1, sp, #68	; 0x44
 8007348:	4620      	mov	r0, r4
 800734a:	f001 ff1f 	bl	800918c <__d2b>
 800734e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007352:	ee08 0a10 	vmov	s16, r0
 8007356:	2d00      	cmp	r5, #0
 8007358:	f000 8084 	beq.w	8007464 <_dtoa_r+0x204>
 800735c:	ee19 3a90 	vmov	r3, s19
 8007360:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007364:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007368:	4656      	mov	r6, sl
 800736a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800736e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007372:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007376:	4b74      	ldr	r3, [pc, #464]	; (8007548 <_dtoa_r+0x2e8>)
 8007378:	2200      	movs	r2, #0
 800737a:	4630      	mov	r0, r6
 800737c:	4639      	mov	r1, r7
 800737e:	f7f8 ff93 	bl	80002a8 <__aeabi_dsub>
 8007382:	a365      	add	r3, pc, #404	; (adr r3, 8007518 <_dtoa_r+0x2b8>)
 8007384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007388:	f7f9 f946 	bl	8000618 <__aeabi_dmul>
 800738c:	a364      	add	r3, pc, #400	; (adr r3, 8007520 <_dtoa_r+0x2c0>)
 800738e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007392:	f7f8 ff8b 	bl	80002ac <__adddf3>
 8007396:	4606      	mov	r6, r0
 8007398:	4628      	mov	r0, r5
 800739a:	460f      	mov	r7, r1
 800739c:	f7f9 f8d2 	bl	8000544 <__aeabi_i2d>
 80073a0:	a361      	add	r3, pc, #388	; (adr r3, 8007528 <_dtoa_r+0x2c8>)
 80073a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a6:	f7f9 f937 	bl	8000618 <__aeabi_dmul>
 80073aa:	4602      	mov	r2, r0
 80073ac:	460b      	mov	r3, r1
 80073ae:	4630      	mov	r0, r6
 80073b0:	4639      	mov	r1, r7
 80073b2:	f7f8 ff7b 	bl	80002ac <__adddf3>
 80073b6:	4606      	mov	r6, r0
 80073b8:	460f      	mov	r7, r1
 80073ba:	f7f9 fbdd 	bl	8000b78 <__aeabi_d2iz>
 80073be:	2200      	movs	r2, #0
 80073c0:	9000      	str	r0, [sp, #0]
 80073c2:	2300      	movs	r3, #0
 80073c4:	4630      	mov	r0, r6
 80073c6:	4639      	mov	r1, r7
 80073c8:	f7f9 fb98 	bl	8000afc <__aeabi_dcmplt>
 80073cc:	b150      	cbz	r0, 80073e4 <_dtoa_r+0x184>
 80073ce:	9800      	ldr	r0, [sp, #0]
 80073d0:	f7f9 f8b8 	bl	8000544 <__aeabi_i2d>
 80073d4:	4632      	mov	r2, r6
 80073d6:	463b      	mov	r3, r7
 80073d8:	f7f9 fb86 	bl	8000ae8 <__aeabi_dcmpeq>
 80073dc:	b910      	cbnz	r0, 80073e4 <_dtoa_r+0x184>
 80073de:	9b00      	ldr	r3, [sp, #0]
 80073e0:	3b01      	subs	r3, #1
 80073e2:	9300      	str	r3, [sp, #0]
 80073e4:	9b00      	ldr	r3, [sp, #0]
 80073e6:	2b16      	cmp	r3, #22
 80073e8:	d85a      	bhi.n	80074a0 <_dtoa_r+0x240>
 80073ea:	9a00      	ldr	r2, [sp, #0]
 80073ec:	4b57      	ldr	r3, [pc, #348]	; (800754c <_dtoa_r+0x2ec>)
 80073ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80073f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f6:	ec51 0b19 	vmov	r0, r1, d9
 80073fa:	f7f9 fb7f 	bl	8000afc <__aeabi_dcmplt>
 80073fe:	2800      	cmp	r0, #0
 8007400:	d050      	beq.n	80074a4 <_dtoa_r+0x244>
 8007402:	9b00      	ldr	r3, [sp, #0]
 8007404:	3b01      	subs	r3, #1
 8007406:	9300      	str	r3, [sp, #0]
 8007408:	2300      	movs	r3, #0
 800740a:	930b      	str	r3, [sp, #44]	; 0x2c
 800740c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800740e:	1b5d      	subs	r5, r3, r5
 8007410:	1e6b      	subs	r3, r5, #1
 8007412:	9305      	str	r3, [sp, #20]
 8007414:	bf45      	ittet	mi
 8007416:	f1c5 0301 	rsbmi	r3, r5, #1
 800741a:	9304      	strmi	r3, [sp, #16]
 800741c:	2300      	movpl	r3, #0
 800741e:	2300      	movmi	r3, #0
 8007420:	bf4c      	ite	mi
 8007422:	9305      	strmi	r3, [sp, #20]
 8007424:	9304      	strpl	r3, [sp, #16]
 8007426:	9b00      	ldr	r3, [sp, #0]
 8007428:	2b00      	cmp	r3, #0
 800742a:	db3d      	blt.n	80074a8 <_dtoa_r+0x248>
 800742c:	9b05      	ldr	r3, [sp, #20]
 800742e:	9a00      	ldr	r2, [sp, #0]
 8007430:	920a      	str	r2, [sp, #40]	; 0x28
 8007432:	4413      	add	r3, r2
 8007434:	9305      	str	r3, [sp, #20]
 8007436:	2300      	movs	r3, #0
 8007438:	9307      	str	r3, [sp, #28]
 800743a:	9b06      	ldr	r3, [sp, #24]
 800743c:	2b09      	cmp	r3, #9
 800743e:	f200 8089 	bhi.w	8007554 <_dtoa_r+0x2f4>
 8007442:	2b05      	cmp	r3, #5
 8007444:	bfc4      	itt	gt
 8007446:	3b04      	subgt	r3, #4
 8007448:	9306      	strgt	r3, [sp, #24]
 800744a:	9b06      	ldr	r3, [sp, #24]
 800744c:	f1a3 0302 	sub.w	r3, r3, #2
 8007450:	bfcc      	ite	gt
 8007452:	2500      	movgt	r5, #0
 8007454:	2501      	movle	r5, #1
 8007456:	2b03      	cmp	r3, #3
 8007458:	f200 8087 	bhi.w	800756a <_dtoa_r+0x30a>
 800745c:	e8df f003 	tbb	[pc, r3]
 8007460:	59383a2d 	.word	0x59383a2d
 8007464:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007468:	441d      	add	r5, r3
 800746a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800746e:	2b20      	cmp	r3, #32
 8007470:	bfc1      	itttt	gt
 8007472:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007476:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800747a:	fa0b f303 	lslgt.w	r3, fp, r3
 800747e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007482:	bfda      	itte	le
 8007484:	f1c3 0320 	rsble	r3, r3, #32
 8007488:	fa06 f003 	lslle.w	r0, r6, r3
 800748c:	4318      	orrgt	r0, r3
 800748e:	f7f9 f849 	bl	8000524 <__aeabi_ui2d>
 8007492:	2301      	movs	r3, #1
 8007494:	4606      	mov	r6, r0
 8007496:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800749a:	3d01      	subs	r5, #1
 800749c:	930e      	str	r3, [sp, #56]	; 0x38
 800749e:	e76a      	b.n	8007376 <_dtoa_r+0x116>
 80074a0:	2301      	movs	r3, #1
 80074a2:	e7b2      	b.n	800740a <_dtoa_r+0x1aa>
 80074a4:	900b      	str	r0, [sp, #44]	; 0x2c
 80074a6:	e7b1      	b.n	800740c <_dtoa_r+0x1ac>
 80074a8:	9b04      	ldr	r3, [sp, #16]
 80074aa:	9a00      	ldr	r2, [sp, #0]
 80074ac:	1a9b      	subs	r3, r3, r2
 80074ae:	9304      	str	r3, [sp, #16]
 80074b0:	4253      	negs	r3, r2
 80074b2:	9307      	str	r3, [sp, #28]
 80074b4:	2300      	movs	r3, #0
 80074b6:	930a      	str	r3, [sp, #40]	; 0x28
 80074b8:	e7bf      	b.n	800743a <_dtoa_r+0x1da>
 80074ba:	2300      	movs	r3, #0
 80074bc:	9308      	str	r3, [sp, #32]
 80074be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	dc55      	bgt.n	8007570 <_dtoa_r+0x310>
 80074c4:	2301      	movs	r3, #1
 80074c6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80074ca:	461a      	mov	r2, r3
 80074cc:	9209      	str	r2, [sp, #36]	; 0x24
 80074ce:	e00c      	b.n	80074ea <_dtoa_r+0x28a>
 80074d0:	2301      	movs	r3, #1
 80074d2:	e7f3      	b.n	80074bc <_dtoa_r+0x25c>
 80074d4:	2300      	movs	r3, #0
 80074d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80074d8:	9308      	str	r3, [sp, #32]
 80074da:	9b00      	ldr	r3, [sp, #0]
 80074dc:	4413      	add	r3, r2
 80074de:	9302      	str	r3, [sp, #8]
 80074e0:	3301      	adds	r3, #1
 80074e2:	2b01      	cmp	r3, #1
 80074e4:	9303      	str	r3, [sp, #12]
 80074e6:	bfb8      	it	lt
 80074e8:	2301      	movlt	r3, #1
 80074ea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80074ec:	2200      	movs	r2, #0
 80074ee:	6042      	str	r2, [r0, #4]
 80074f0:	2204      	movs	r2, #4
 80074f2:	f102 0614 	add.w	r6, r2, #20
 80074f6:	429e      	cmp	r6, r3
 80074f8:	6841      	ldr	r1, [r0, #4]
 80074fa:	d93d      	bls.n	8007578 <_dtoa_r+0x318>
 80074fc:	4620      	mov	r0, r4
 80074fe:	f001 fa57 	bl	80089b0 <_Balloc>
 8007502:	9001      	str	r0, [sp, #4]
 8007504:	2800      	cmp	r0, #0
 8007506:	d13b      	bne.n	8007580 <_dtoa_r+0x320>
 8007508:	4b11      	ldr	r3, [pc, #68]	; (8007550 <_dtoa_r+0x2f0>)
 800750a:	4602      	mov	r2, r0
 800750c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007510:	e6c0      	b.n	8007294 <_dtoa_r+0x34>
 8007512:	2301      	movs	r3, #1
 8007514:	e7df      	b.n	80074d6 <_dtoa_r+0x276>
 8007516:	bf00      	nop
 8007518:	636f4361 	.word	0x636f4361
 800751c:	3fd287a7 	.word	0x3fd287a7
 8007520:	8b60c8b3 	.word	0x8b60c8b3
 8007524:	3fc68a28 	.word	0x3fc68a28
 8007528:	509f79fb 	.word	0x509f79fb
 800752c:	3fd34413 	.word	0x3fd34413
 8007530:	0800a00e 	.word	0x0800a00e
 8007534:	0800a025 	.word	0x0800a025
 8007538:	7ff00000 	.word	0x7ff00000
 800753c:	0800a00a 	.word	0x0800a00a
 8007540:	0800a001 	.word	0x0800a001
 8007544:	08009e81 	.word	0x08009e81
 8007548:	3ff80000 	.word	0x3ff80000
 800754c:	0800a1f8 	.word	0x0800a1f8
 8007550:	0800a080 	.word	0x0800a080
 8007554:	2501      	movs	r5, #1
 8007556:	2300      	movs	r3, #0
 8007558:	9306      	str	r3, [sp, #24]
 800755a:	9508      	str	r5, [sp, #32]
 800755c:	f04f 33ff 	mov.w	r3, #4294967295
 8007560:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007564:	2200      	movs	r2, #0
 8007566:	2312      	movs	r3, #18
 8007568:	e7b0      	b.n	80074cc <_dtoa_r+0x26c>
 800756a:	2301      	movs	r3, #1
 800756c:	9308      	str	r3, [sp, #32]
 800756e:	e7f5      	b.n	800755c <_dtoa_r+0x2fc>
 8007570:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007572:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007576:	e7b8      	b.n	80074ea <_dtoa_r+0x28a>
 8007578:	3101      	adds	r1, #1
 800757a:	6041      	str	r1, [r0, #4]
 800757c:	0052      	lsls	r2, r2, #1
 800757e:	e7b8      	b.n	80074f2 <_dtoa_r+0x292>
 8007580:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007582:	9a01      	ldr	r2, [sp, #4]
 8007584:	601a      	str	r2, [r3, #0]
 8007586:	9b03      	ldr	r3, [sp, #12]
 8007588:	2b0e      	cmp	r3, #14
 800758a:	f200 809d 	bhi.w	80076c8 <_dtoa_r+0x468>
 800758e:	2d00      	cmp	r5, #0
 8007590:	f000 809a 	beq.w	80076c8 <_dtoa_r+0x468>
 8007594:	9b00      	ldr	r3, [sp, #0]
 8007596:	2b00      	cmp	r3, #0
 8007598:	dd32      	ble.n	8007600 <_dtoa_r+0x3a0>
 800759a:	4ab7      	ldr	r2, [pc, #732]	; (8007878 <_dtoa_r+0x618>)
 800759c:	f003 030f 	and.w	r3, r3, #15
 80075a0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80075a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80075a8:	9b00      	ldr	r3, [sp, #0]
 80075aa:	05d8      	lsls	r0, r3, #23
 80075ac:	ea4f 1723 	mov.w	r7, r3, asr #4
 80075b0:	d516      	bpl.n	80075e0 <_dtoa_r+0x380>
 80075b2:	4bb2      	ldr	r3, [pc, #712]	; (800787c <_dtoa_r+0x61c>)
 80075b4:	ec51 0b19 	vmov	r0, r1, d9
 80075b8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80075bc:	f7f9 f956 	bl	800086c <__aeabi_ddiv>
 80075c0:	f007 070f 	and.w	r7, r7, #15
 80075c4:	4682      	mov	sl, r0
 80075c6:	468b      	mov	fp, r1
 80075c8:	2503      	movs	r5, #3
 80075ca:	4eac      	ldr	r6, [pc, #688]	; (800787c <_dtoa_r+0x61c>)
 80075cc:	b957      	cbnz	r7, 80075e4 <_dtoa_r+0x384>
 80075ce:	4642      	mov	r2, r8
 80075d0:	464b      	mov	r3, r9
 80075d2:	4650      	mov	r0, sl
 80075d4:	4659      	mov	r1, fp
 80075d6:	f7f9 f949 	bl	800086c <__aeabi_ddiv>
 80075da:	4682      	mov	sl, r0
 80075dc:	468b      	mov	fp, r1
 80075de:	e028      	b.n	8007632 <_dtoa_r+0x3d2>
 80075e0:	2502      	movs	r5, #2
 80075e2:	e7f2      	b.n	80075ca <_dtoa_r+0x36a>
 80075e4:	07f9      	lsls	r1, r7, #31
 80075e6:	d508      	bpl.n	80075fa <_dtoa_r+0x39a>
 80075e8:	4640      	mov	r0, r8
 80075ea:	4649      	mov	r1, r9
 80075ec:	e9d6 2300 	ldrd	r2, r3, [r6]
 80075f0:	f7f9 f812 	bl	8000618 <__aeabi_dmul>
 80075f4:	3501      	adds	r5, #1
 80075f6:	4680      	mov	r8, r0
 80075f8:	4689      	mov	r9, r1
 80075fa:	107f      	asrs	r7, r7, #1
 80075fc:	3608      	adds	r6, #8
 80075fe:	e7e5      	b.n	80075cc <_dtoa_r+0x36c>
 8007600:	f000 809b 	beq.w	800773a <_dtoa_r+0x4da>
 8007604:	9b00      	ldr	r3, [sp, #0]
 8007606:	4f9d      	ldr	r7, [pc, #628]	; (800787c <_dtoa_r+0x61c>)
 8007608:	425e      	negs	r6, r3
 800760a:	4b9b      	ldr	r3, [pc, #620]	; (8007878 <_dtoa_r+0x618>)
 800760c:	f006 020f 	and.w	r2, r6, #15
 8007610:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007618:	ec51 0b19 	vmov	r0, r1, d9
 800761c:	f7f8 fffc 	bl	8000618 <__aeabi_dmul>
 8007620:	1136      	asrs	r6, r6, #4
 8007622:	4682      	mov	sl, r0
 8007624:	468b      	mov	fp, r1
 8007626:	2300      	movs	r3, #0
 8007628:	2502      	movs	r5, #2
 800762a:	2e00      	cmp	r6, #0
 800762c:	d17a      	bne.n	8007724 <_dtoa_r+0x4c4>
 800762e:	2b00      	cmp	r3, #0
 8007630:	d1d3      	bne.n	80075da <_dtoa_r+0x37a>
 8007632:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007634:	2b00      	cmp	r3, #0
 8007636:	f000 8082 	beq.w	800773e <_dtoa_r+0x4de>
 800763a:	4b91      	ldr	r3, [pc, #580]	; (8007880 <_dtoa_r+0x620>)
 800763c:	2200      	movs	r2, #0
 800763e:	4650      	mov	r0, sl
 8007640:	4659      	mov	r1, fp
 8007642:	f7f9 fa5b 	bl	8000afc <__aeabi_dcmplt>
 8007646:	2800      	cmp	r0, #0
 8007648:	d079      	beq.n	800773e <_dtoa_r+0x4de>
 800764a:	9b03      	ldr	r3, [sp, #12]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d076      	beq.n	800773e <_dtoa_r+0x4de>
 8007650:	9b02      	ldr	r3, [sp, #8]
 8007652:	2b00      	cmp	r3, #0
 8007654:	dd36      	ble.n	80076c4 <_dtoa_r+0x464>
 8007656:	9b00      	ldr	r3, [sp, #0]
 8007658:	4650      	mov	r0, sl
 800765a:	4659      	mov	r1, fp
 800765c:	1e5f      	subs	r7, r3, #1
 800765e:	2200      	movs	r2, #0
 8007660:	4b88      	ldr	r3, [pc, #544]	; (8007884 <_dtoa_r+0x624>)
 8007662:	f7f8 ffd9 	bl	8000618 <__aeabi_dmul>
 8007666:	9e02      	ldr	r6, [sp, #8]
 8007668:	4682      	mov	sl, r0
 800766a:	468b      	mov	fp, r1
 800766c:	3501      	adds	r5, #1
 800766e:	4628      	mov	r0, r5
 8007670:	f7f8 ff68 	bl	8000544 <__aeabi_i2d>
 8007674:	4652      	mov	r2, sl
 8007676:	465b      	mov	r3, fp
 8007678:	f7f8 ffce 	bl	8000618 <__aeabi_dmul>
 800767c:	4b82      	ldr	r3, [pc, #520]	; (8007888 <_dtoa_r+0x628>)
 800767e:	2200      	movs	r2, #0
 8007680:	f7f8 fe14 	bl	80002ac <__adddf3>
 8007684:	46d0      	mov	r8, sl
 8007686:	46d9      	mov	r9, fp
 8007688:	4682      	mov	sl, r0
 800768a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800768e:	2e00      	cmp	r6, #0
 8007690:	d158      	bne.n	8007744 <_dtoa_r+0x4e4>
 8007692:	4b7e      	ldr	r3, [pc, #504]	; (800788c <_dtoa_r+0x62c>)
 8007694:	2200      	movs	r2, #0
 8007696:	4640      	mov	r0, r8
 8007698:	4649      	mov	r1, r9
 800769a:	f7f8 fe05 	bl	80002a8 <__aeabi_dsub>
 800769e:	4652      	mov	r2, sl
 80076a0:	465b      	mov	r3, fp
 80076a2:	4680      	mov	r8, r0
 80076a4:	4689      	mov	r9, r1
 80076a6:	f7f9 fa47 	bl	8000b38 <__aeabi_dcmpgt>
 80076aa:	2800      	cmp	r0, #0
 80076ac:	f040 8295 	bne.w	8007bda <_dtoa_r+0x97a>
 80076b0:	4652      	mov	r2, sl
 80076b2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80076b6:	4640      	mov	r0, r8
 80076b8:	4649      	mov	r1, r9
 80076ba:	f7f9 fa1f 	bl	8000afc <__aeabi_dcmplt>
 80076be:	2800      	cmp	r0, #0
 80076c0:	f040 8289 	bne.w	8007bd6 <_dtoa_r+0x976>
 80076c4:	ec5b ab19 	vmov	sl, fp, d9
 80076c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	f2c0 8148 	blt.w	8007960 <_dtoa_r+0x700>
 80076d0:	9a00      	ldr	r2, [sp, #0]
 80076d2:	2a0e      	cmp	r2, #14
 80076d4:	f300 8144 	bgt.w	8007960 <_dtoa_r+0x700>
 80076d8:	4b67      	ldr	r3, [pc, #412]	; (8007878 <_dtoa_r+0x618>)
 80076da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80076de:	e9d3 8900 	ldrd	r8, r9, [r3]
 80076e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	f280 80d5 	bge.w	8007894 <_dtoa_r+0x634>
 80076ea:	9b03      	ldr	r3, [sp, #12]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	f300 80d1 	bgt.w	8007894 <_dtoa_r+0x634>
 80076f2:	f040 826f 	bne.w	8007bd4 <_dtoa_r+0x974>
 80076f6:	4b65      	ldr	r3, [pc, #404]	; (800788c <_dtoa_r+0x62c>)
 80076f8:	2200      	movs	r2, #0
 80076fa:	4640      	mov	r0, r8
 80076fc:	4649      	mov	r1, r9
 80076fe:	f7f8 ff8b 	bl	8000618 <__aeabi_dmul>
 8007702:	4652      	mov	r2, sl
 8007704:	465b      	mov	r3, fp
 8007706:	f7f9 fa0d 	bl	8000b24 <__aeabi_dcmpge>
 800770a:	9e03      	ldr	r6, [sp, #12]
 800770c:	4637      	mov	r7, r6
 800770e:	2800      	cmp	r0, #0
 8007710:	f040 8245 	bne.w	8007b9e <_dtoa_r+0x93e>
 8007714:	9d01      	ldr	r5, [sp, #4]
 8007716:	2331      	movs	r3, #49	; 0x31
 8007718:	f805 3b01 	strb.w	r3, [r5], #1
 800771c:	9b00      	ldr	r3, [sp, #0]
 800771e:	3301      	adds	r3, #1
 8007720:	9300      	str	r3, [sp, #0]
 8007722:	e240      	b.n	8007ba6 <_dtoa_r+0x946>
 8007724:	07f2      	lsls	r2, r6, #31
 8007726:	d505      	bpl.n	8007734 <_dtoa_r+0x4d4>
 8007728:	e9d7 2300 	ldrd	r2, r3, [r7]
 800772c:	f7f8 ff74 	bl	8000618 <__aeabi_dmul>
 8007730:	3501      	adds	r5, #1
 8007732:	2301      	movs	r3, #1
 8007734:	1076      	asrs	r6, r6, #1
 8007736:	3708      	adds	r7, #8
 8007738:	e777      	b.n	800762a <_dtoa_r+0x3ca>
 800773a:	2502      	movs	r5, #2
 800773c:	e779      	b.n	8007632 <_dtoa_r+0x3d2>
 800773e:	9f00      	ldr	r7, [sp, #0]
 8007740:	9e03      	ldr	r6, [sp, #12]
 8007742:	e794      	b.n	800766e <_dtoa_r+0x40e>
 8007744:	9901      	ldr	r1, [sp, #4]
 8007746:	4b4c      	ldr	r3, [pc, #304]	; (8007878 <_dtoa_r+0x618>)
 8007748:	4431      	add	r1, r6
 800774a:	910d      	str	r1, [sp, #52]	; 0x34
 800774c:	9908      	ldr	r1, [sp, #32]
 800774e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007752:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007756:	2900      	cmp	r1, #0
 8007758:	d043      	beq.n	80077e2 <_dtoa_r+0x582>
 800775a:	494d      	ldr	r1, [pc, #308]	; (8007890 <_dtoa_r+0x630>)
 800775c:	2000      	movs	r0, #0
 800775e:	f7f9 f885 	bl	800086c <__aeabi_ddiv>
 8007762:	4652      	mov	r2, sl
 8007764:	465b      	mov	r3, fp
 8007766:	f7f8 fd9f 	bl	80002a8 <__aeabi_dsub>
 800776a:	9d01      	ldr	r5, [sp, #4]
 800776c:	4682      	mov	sl, r0
 800776e:	468b      	mov	fp, r1
 8007770:	4649      	mov	r1, r9
 8007772:	4640      	mov	r0, r8
 8007774:	f7f9 fa00 	bl	8000b78 <__aeabi_d2iz>
 8007778:	4606      	mov	r6, r0
 800777a:	f7f8 fee3 	bl	8000544 <__aeabi_i2d>
 800777e:	4602      	mov	r2, r0
 8007780:	460b      	mov	r3, r1
 8007782:	4640      	mov	r0, r8
 8007784:	4649      	mov	r1, r9
 8007786:	f7f8 fd8f 	bl	80002a8 <__aeabi_dsub>
 800778a:	3630      	adds	r6, #48	; 0x30
 800778c:	f805 6b01 	strb.w	r6, [r5], #1
 8007790:	4652      	mov	r2, sl
 8007792:	465b      	mov	r3, fp
 8007794:	4680      	mov	r8, r0
 8007796:	4689      	mov	r9, r1
 8007798:	f7f9 f9b0 	bl	8000afc <__aeabi_dcmplt>
 800779c:	2800      	cmp	r0, #0
 800779e:	d163      	bne.n	8007868 <_dtoa_r+0x608>
 80077a0:	4642      	mov	r2, r8
 80077a2:	464b      	mov	r3, r9
 80077a4:	4936      	ldr	r1, [pc, #216]	; (8007880 <_dtoa_r+0x620>)
 80077a6:	2000      	movs	r0, #0
 80077a8:	f7f8 fd7e 	bl	80002a8 <__aeabi_dsub>
 80077ac:	4652      	mov	r2, sl
 80077ae:	465b      	mov	r3, fp
 80077b0:	f7f9 f9a4 	bl	8000afc <__aeabi_dcmplt>
 80077b4:	2800      	cmp	r0, #0
 80077b6:	f040 80b5 	bne.w	8007924 <_dtoa_r+0x6c4>
 80077ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80077bc:	429d      	cmp	r5, r3
 80077be:	d081      	beq.n	80076c4 <_dtoa_r+0x464>
 80077c0:	4b30      	ldr	r3, [pc, #192]	; (8007884 <_dtoa_r+0x624>)
 80077c2:	2200      	movs	r2, #0
 80077c4:	4650      	mov	r0, sl
 80077c6:	4659      	mov	r1, fp
 80077c8:	f7f8 ff26 	bl	8000618 <__aeabi_dmul>
 80077cc:	4b2d      	ldr	r3, [pc, #180]	; (8007884 <_dtoa_r+0x624>)
 80077ce:	4682      	mov	sl, r0
 80077d0:	468b      	mov	fp, r1
 80077d2:	4640      	mov	r0, r8
 80077d4:	4649      	mov	r1, r9
 80077d6:	2200      	movs	r2, #0
 80077d8:	f7f8 ff1e 	bl	8000618 <__aeabi_dmul>
 80077dc:	4680      	mov	r8, r0
 80077de:	4689      	mov	r9, r1
 80077e0:	e7c6      	b.n	8007770 <_dtoa_r+0x510>
 80077e2:	4650      	mov	r0, sl
 80077e4:	4659      	mov	r1, fp
 80077e6:	f7f8 ff17 	bl	8000618 <__aeabi_dmul>
 80077ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80077ec:	9d01      	ldr	r5, [sp, #4]
 80077ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80077f0:	4682      	mov	sl, r0
 80077f2:	468b      	mov	fp, r1
 80077f4:	4649      	mov	r1, r9
 80077f6:	4640      	mov	r0, r8
 80077f8:	f7f9 f9be 	bl	8000b78 <__aeabi_d2iz>
 80077fc:	4606      	mov	r6, r0
 80077fe:	f7f8 fea1 	bl	8000544 <__aeabi_i2d>
 8007802:	3630      	adds	r6, #48	; 0x30
 8007804:	4602      	mov	r2, r0
 8007806:	460b      	mov	r3, r1
 8007808:	4640      	mov	r0, r8
 800780a:	4649      	mov	r1, r9
 800780c:	f7f8 fd4c 	bl	80002a8 <__aeabi_dsub>
 8007810:	f805 6b01 	strb.w	r6, [r5], #1
 8007814:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007816:	429d      	cmp	r5, r3
 8007818:	4680      	mov	r8, r0
 800781a:	4689      	mov	r9, r1
 800781c:	f04f 0200 	mov.w	r2, #0
 8007820:	d124      	bne.n	800786c <_dtoa_r+0x60c>
 8007822:	4b1b      	ldr	r3, [pc, #108]	; (8007890 <_dtoa_r+0x630>)
 8007824:	4650      	mov	r0, sl
 8007826:	4659      	mov	r1, fp
 8007828:	f7f8 fd40 	bl	80002ac <__adddf3>
 800782c:	4602      	mov	r2, r0
 800782e:	460b      	mov	r3, r1
 8007830:	4640      	mov	r0, r8
 8007832:	4649      	mov	r1, r9
 8007834:	f7f9 f980 	bl	8000b38 <__aeabi_dcmpgt>
 8007838:	2800      	cmp	r0, #0
 800783a:	d173      	bne.n	8007924 <_dtoa_r+0x6c4>
 800783c:	4652      	mov	r2, sl
 800783e:	465b      	mov	r3, fp
 8007840:	4913      	ldr	r1, [pc, #76]	; (8007890 <_dtoa_r+0x630>)
 8007842:	2000      	movs	r0, #0
 8007844:	f7f8 fd30 	bl	80002a8 <__aeabi_dsub>
 8007848:	4602      	mov	r2, r0
 800784a:	460b      	mov	r3, r1
 800784c:	4640      	mov	r0, r8
 800784e:	4649      	mov	r1, r9
 8007850:	f7f9 f954 	bl	8000afc <__aeabi_dcmplt>
 8007854:	2800      	cmp	r0, #0
 8007856:	f43f af35 	beq.w	80076c4 <_dtoa_r+0x464>
 800785a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800785c:	1e6b      	subs	r3, r5, #1
 800785e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007860:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007864:	2b30      	cmp	r3, #48	; 0x30
 8007866:	d0f8      	beq.n	800785a <_dtoa_r+0x5fa>
 8007868:	9700      	str	r7, [sp, #0]
 800786a:	e049      	b.n	8007900 <_dtoa_r+0x6a0>
 800786c:	4b05      	ldr	r3, [pc, #20]	; (8007884 <_dtoa_r+0x624>)
 800786e:	f7f8 fed3 	bl	8000618 <__aeabi_dmul>
 8007872:	4680      	mov	r8, r0
 8007874:	4689      	mov	r9, r1
 8007876:	e7bd      	b.n	80077f4 <_dtoa_r+0x594>
 8007878:	0800a1f8 	.word	0x0800a1f8
 800787c:	0800a1d0 	.word	0x0800a1d0
 8007880:	3ff00000 	.word	0x3ff00000
 8007884:	40240000 	.word	0x40240000
 8007888:	401c0000 	.word	0x401c0000
 800788c:	40140000 	.word	0x40140000
 8007890:	3fe00000 	.word	0x3fe00000
 8007894:	9d01      	ldr	r5, [sp, #4]
 8007896:	4656      	mov	r6, sl
 8007898:	465f      	mov	r7, fp
 800789a:	4642      	mov	r2, r8
 800789c:	464b      	mov	r3, r9
 800789e:	4630      	mov	r0, r6
 80078a0:	4639      	mov	r1, r7
 80078a2:	f7f8 ffe3 	bl	800086c <__aeabi_ddiv>
 80078a6:	f7f9 f967 	bl	8000b78 <__aeabi_d2iz>
 80078aa:	4682      	mov	sl, r0
 80078ac:	f7f8 fe4a 	bl	8000544 <__aeabi_i2d>
 80078b0:	4642      	mov	r2, r8
 80078b2:	464b      	mov	r3, r9
 80078b4:	f7f8 feb0 	bl	8000618 <__aeabi_dmul>
 80078b8:	4602      	mov	r2, r0
 80078ba:	460b      	mov	r3, r1
 80078bc:	4630      	mov	r0, r6
 80078be:	4639      	mov	r1, r7
 80078c0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80078c4:	f7f8 fcf0 	bl	80002a8 <__aeabi_dsub>
 80078c8:	f805 6b01 	strb.w	r6, [r5], #1
 80078cc:	9e01      	ldr	r6, [sp, #4]
 80078ce:	9f03      	ldr	r7, [sp, #12]
 80078d0:	1bae      	subs	r6, r5, r6
 80078d2:	42b7      	cmp	r7, r6
 80078d4:	4602      	mov	r2, r0
 80078d6:	460b      	mov	r3, r1
 80078d8:	d135      	bne.n	8007946 <_dtoa_r+0x6e6>
 80078da:	f7f8 fce7 	bl	80002ac <__adddf3>
 80078de:	4642      	mov	r2, r8
 80078e0:	464b      	mov	r3, r9
 80078e2:	4606      	mov	r6, r0
 80078e4:	460f      	mov	r7, r1
 80078e6:	f7f9 f927 	bl	8000b38 <__aeabi_dcmpgt>
 80078ea:	b9d0      	cbnz	r0, 8007922 <_dtoa_r+0x6c2>
 80078ec:	4642      	mov	r2, r8
 80078ee:	464b      	mov	r3, r9
 80078f0:	4630      	mov	r0, r6
 80078f2:	4639      	mov	r1, r7
 80078f4:	f7f9 f8f8 	bl	8000ae8 <__aeabi_dcmpeq>
 80078f8:	b110      	cbz	r0, 8007900 <_dtoa_r+0x6a0>
 80078fa:	f01a 0f01 	tst.w	sl, #1
 80078fe:	d110      	bne.n	8007922 <_dtoa_r+0x6c2>
 8007900:	4620      	mov	r0, r4
 8007902:	ee18 1a10 	vmov	r1, s16
 8007906:	f001 f893 	bl	8008a30 <_Bfree>
 800790a:	2300      	movs	r3, #0
 800790c:	9800      	ldr	r0, [sp, #0]
 800790e:	702b      	strb	r3, [r5, #0]
 8007910:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007912:	3001      	adds	r0, #1
 8007914:	6018      	str	r0, [r3, #0]
 8007916:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007918:	2b00      	cmp	r3, #0
 800791a:	f43f acf1 	beq.w	8007300 <_dtoa_r+0xa0>
 800791e:	601d      	str	r5, [r3, #0]
 8007920:	e4ee      	b.n	8007300 <_dtoa_r+0xa0>
 8007922:	9f00      	ldr	r7, [sp, #0]
 8007924:	462b      	mov	r3, r5
 8007926:	461d      	mov	r5, r3
 8007928:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800792c:	2a39      	cmp	r2, #57	; 0x39
 800792e:	d106      	bne.n	800793e <_dtoa_r+0x6de>
 8007930:	9a01      	ldr	r2, [sp, #4]
 8007932:	429a      	cmp	r2, r3
 8007934:	d1f7      	bne.n	8007926 <_dtoa_r+0x6c6>
 8007936:	9901      	ldr	r1, [sp, #4]
 8007938:	2230      	movs	r2, #48	; 0x30
 800793a:	3701      	adds	r7, #1
 800793c:	700a      	strb	r2, [r1, #0]
 800793e:	781a      	ldrb	r2, [r3, #0]
 8007940:	3201      	adds	r2, #1
 8007942:	701a      	strb	r2, [r3, #0]
 8007944:	e790      	b.n	8007868 <_dtoa_r+0x608>
 8007946:	4ba6      	ldr	r3, [pc, #664]	; (8007be0 <_dtoa_r+0x980>)
 8007948:	2200      	movs	r2, #0
 800794a:	f7f8 fe65 	bl	8000618 <__aeabi_dmul>
 800794e:	2200      	movs	r2, #0
 8007950:	2300      	movs	r3, #0
 8007952:	4606      	mov	r6, r0
 8007954:	460f      	mov	r7, r1
 8007956:	f7f9 f8c7 	bl	8000ae8 <__aeabi_dcmpeq>
 800795a:	2800      	cmp	r0, #0
 800795c:	d09d      	beq.n	800789a <_dtoa_r+0x63a>
 800795e:	e7cf      	b.n	8007900 <_dtoa_r+0x6a0>
 8007960:	9a08      	ldr	r2, [sp, #32]
 8007962:	2a00      	cmp	r2, #0
 8007964:	f000 80d7 	beq.w	8007b16 <_dtoa_r+0x8b6>
 8007968:	9a06      	ldr	r2, [sp, #24]
 800796a:	2a01      	cmp	r2, #1
 800796c:	f300 80ba 	bgt.w	8007ae4 <_dtoa_r+0x884>
 8007970:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007972:	2a00      	cmp	r2, #0
 8007974:	f000 80b2 	beq.w	8007adc <_dtoa_r+0x87c>
 8007978:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800797c:	9e07      	ldr	r6, [sp, #28]
 800797e:	9d04      	ldr	r5, [sp, #16]
 8007980:	9a04      	ldr	r2, [sp, #16]
 8007982:	441a      	add	r2, r3
 8007984:	9204      	str	r2, [sp, #16]
 8007986:	9a05      	ldr	r2, [sp, #20]
 8007988:	2101      	movs	r1, #1
 800798a:	441a      	add	r2, r3
 800798c:	4620      	mov	r0, r4
 800798e:	9205      	str	r2, [sp, #20]
 8007990:	f001 f950 	bl	8008c34 <__i2b>
 8007994:	4607      	mov	r7, r0
 8007996:	2d00      	cmp	r5, #0
 8007998:	dd0c      	ble.n	80079b4 <_dtoa_r+0x754>
 800799a:	9b05      	ldr	r3, [sp, #20]
 800799c:	2b00      	cmp	r3, #0
 800799e:	dd09      	ble.n	80079b4 <_dtoa_r+0x754>
 80079a0:	42ab      	cmp	r3, r5
 80079a2:	9a04      	ldr	r2, [sp, #16]
 80079a4:	bfa8      	it	ge
 80079a6:	462b      	movge	r3, r5
 80079a8:	1ad2      	subs	r2, r2, r3
 80079aa:	9204      	str	r2, [sp, #16]
 80079ac:	9a05      	ldr	r2, [sp, #20]
 80079ae:	1aed      	subs	r5, r5, r3
 80079b0:	1ad3      	subs	r3, r2, r3
 80079b2:	9305      	str	r3, [sp, #20]
 80079b4:	9b07      	ldr	r3, [sp, #28]
 80079b6:	b31b      	cbz	r3, 8007a00 <_dtoa_r+0x7a0>
 80079b8:	9b08      	ldr	r3, [sp, #32]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	f000 80af 	beq.w	8007b1e <_dtoa_r+0x8be>
 80079c0:	2e00      	cmp	r6, #0
 80079c2:	dd13      	ble.n	80079ec <_dtoa_r+0x78c>
 80079c4:	4639      	mov	r1, r7
 80079c6:	4632      	mov	r2, r6
 80079c8:	4620      	mov	r0, r4
 80079ca:	f001 f9f3 	bl	8008db4 <__pow5mult>
 80079ce:	ee18 2a10 	vmov	r2, s16
 80079d2:	4601      	mov	r1, r0
 80079d4:	4607      	mov	r7, r0
 80079d6:	4620      	mov	r0, r4
 80079d8:	f001 f942 	bl	8008c60 <__multiply>
 80079dc:	ee18 1a10 	vmov	r1, s16
 80079e0:	4680      	mov	r8, r0
 80079e2:	4620      	mov	r0, r4
 80079e4:	f001 f824 	bl	8008a30 <_Bfree>
 80079e8:	ee08 8a10 	vmov	s16, r8
 80079ec:	9b07      	ldr	r3, [sp, #28]
 80079ee:	1b9a      	subs	r2, r3, r6
 80079f0:	d006      	beq.n	8007a00 <_dtoa_r+0x7a0>
 80079f2:	ee18 1a10 	vmov	r1, s16
 80079f6:	4620      	mov	r0, r4
 80079f8:	f001 f9dc 	bl	8008db4 <__pow5mult>
 80079fc:	ee08 0a10 	vmov	s16, r0
 8007a00:	2101      	movs	r1, #1
 8007a02:	4620      	mov	r0, r4
 8007a04:	f001 f916 	bl	8008c34 <__i2b>
 8007a08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	4606      	mov	r6, r0
 8007a0e:	f340 8088 	ble.w	8007b22 <_dtoa_r+0x8c2>
 8007a12:	461a      	mov	r2, r3
 8007a14:	4601      	mov	r1, r0
 8007a16:	4620      	mov	r0, r4
 8007a18:	f001 f9cc 	bl	8008db4 <__pow5mult>
 8007a1c:	9b06      	ldr	r3, [sp, #24]
 8007a1e:	2b01      	cmp	r3, #1
 8007a20:	4606      	mov	r6, r0
 8007a22:	f340 8081 	ble.w	8007b28 <_dtoa_r+0x8c8>
 8007a26:	f04f 0800 	mov.w	r8, #0
 8007a2a:	6933      	ldr	r3, [r6, #16]
 8007a2c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007a30:	6918      	ldr	r0, [r3, #16]
 8007a32:	f001 f8af 	bl	8008b94 <__hi0bits>
 8007a36:	f1c0 0020 	rsb	r0, r0, #32
 8007a3a:	9b05      	ldr	r3, [sp, #20]
 8007a3c:	4418      	add	r0, r3
 8007a3e:	f010 001f 	ands.w	r0, r0, #31
 8007a42:	f000 8092 	beq.w	8007b6a <_dtoa_r+0x90a>
 8007a46:	f1c0 0320 	rsb	r3, r0, #32
 8007a4a:	2b04      	cmp	r3, #4
 8007a4c:	f340 808a 	ble.w	8007b64 <_dtoa_r+0x904>
 8007a50:	f1c0 001c 	rsb	r0, r0, #28
 8007a54:	9b04      	ldr	r3, [sp, #16]
 8007a56:	4403      	add	r3, r0
 8007a58:	9304      	str	r3, [sp, #16]
 8007a5a:	9b05      	ldr	r3, [sp, #20]
 8007a5c:	4403      	add	r3, r0
 8007a5e:	4405      	add	r5, r0
 8007a60:	9305      	str	r3, [sp, #20]
 8007a62:	9b04      	ldr	r3, [sp, #16]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	dd07      	ble.n	8007a78 <_dtoa_r+0x818>
 8007a68:	ee18 1a10 	vmov	r1, s16
 8007a6c:	461a      	mov	r2, r3
 8007a6e:	4620      	mov	r0, r4
 8007a70:	f001 f9fa 	bl	8008e68 <__lshift>
 8007a74:	ee08 0a10 	vmov	s16, r0
 8007a78:	9b05      	ldr	r3, [sp, #20]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	dd05      	ble.n	8007a8a <_dtoa_r+0x82a>
 8007a7e:	4631      	mov	r1, r6
 8007a80:	461a      	mov	r2, r3
 8007a82:	4620      	mov	r0, r4
 8007a84:	f001 f9f0 	bl	8008e68 <__lshift>
 8007a88:	4606      	mov	r6, r0
 8007a8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d06e      	beq.n	8007b6e <_dtoa_r+0x90e>
 8007a90:	ee18 0a10 	vmov	r0, s16
 8007a94:	4631      	mov	r1, r6
 8007a96:	f001 fa57 	bl	8008f48 <__mcmp>
 8007a9a:	2800      	cmp	r0, #0
 8007a9c:	da67      	bge.n	8007b6e <_dtoa_r+0x90e>
 8007a9e:	9b00      	ldr	r3, [sp, #0]
 8007aa0:	3b01      	subs	r3, #1
 8007aa2:	ee18 1a10 	vmov	r1, s16
 8007aa6:	9300      	str	r3, [sp, #0]
 8007aa8:	220a      	movs	r2, #10
 8007aaa:	2300      	movs	r3, #0
 8007aac:	4620      	mov	r0, r4
 8007aae:	f000 ffe1 	bl	8008a74 <__multadd>
 8007ab2:	9b08      	ldr	r3, [sp, #32]
 8007ab4:	ee08 0a10 	vmov	s16, r0
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	f000 81b1 	beq.w	8007e20 <_dtoa_r+0xbc0>
 8007abe:	2300      	movs	r3, #0
 8007ac0:	4639      	mov	r1, r7
 8007ac2:	220a      	movs	r2, #10
 8007ac4:	4620      	mov	r0, r4
 8007ac6:	f000 ffd5 	bl	8008a74 <__multadd>
 8007aca:	9b02      	ldr	r3, [sp, #8]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	4607      	mov	r7, r0
 8007ad0:	f300 808e 	bgt.w	8007bf0 <_dtoa_r+0x990>
 8007ad4:	9b06      	ldr	r3, [sp, #24]
 8007ad6:	2b02      	cmp	r3, #2
 8007ad8:	dc51      	bgt.n	8007b7e <_dtoa_r+0x91e>
 8007ada:	e089      	b.n	8007bf0 <_dtoa_r+0x990>
 8007adc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007ade:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007ae2:	e74b      	b.n	800797c <_dtoa_r+0x71c>
 8007ae4:	9b03      	ldr	r3, [sp, #12]
 8007ae6:	1e5e      	subs	r6, r3, #1
 8007ae8:	9b07      	ldr	r3, [sp, #28]
 8007aea:	42b3      	cmp	r3, r6
 8007aec:	bfbf      	itttt	lt
 8007aee:	9b07      	ldrlt	r3, [sp, #28]
 8007af0:	9607      	strlt	r6, [sp, #28]
 8007af2:	1af2      	sublt	r2, r6, r3
 8007af4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007af6:	bfb6      	itet	lt
 8007af8:	189b      	addlt	r3, r3, r2
 8007afa:	1b9e      	subge	r6, r3, r6
 8007afc:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007afe:	9b03      	ldr	r3, [sp, #12]
 8007b00:	bfb8      	it	lt
 8007b02:	2600      	movlt	r6, #0
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	bfb7      	itett	lt
 8007b08:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007b0c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007b10:	1a9d      	sublt	r5, r3, r2
 8007b12:	2300      	movlt	r3, #0
 8007b14:	e734      	b.n	8007980 <_dtoa_r+0x720>
 8007b16:	9e07      	ldr	r6, [sp, #28]
 8007b18:	9d04      	ldr	r5, [sp, #16]
 8007b1a:	9f08      	ldr	r7, [sp, #32]
 8007b1c:	e73b      	b.n	8007996 <_dtoa_r+0x736>
 8007b1e:	9a07      	ldr	r2, [sp, #28]
 8007b20:	e767      	b.n	80079f2 <_dtoa_r+0x792>
 8007b22:	9b06      	ldr	r3, [sp, #24]
 8007b24:	2b01      	cmp	r3, #1
 8007b26:	dc18      	bgt.n	8007b5a <_dtoa_r+0x8fa>
 8007b28:	f1ba 0f00 	cmp.w	sl, #0
 8007b2c:	d115      	bne.n	8007b5a <_dtoa_r+0x8fa>
 8007b2e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007b32:	b993      	cbnz	r3, 8007b5a <_dtoa_r+0x8fa>
 8007b34:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007b38:	0d1b      	lsrs	r3, r3, #20
 8007b3a:	051b      	lsls	r3, r3, #20
 8007b3c:	b183      	cbz	r3, 8007b60 <_dtoa_r+0x900>
 8007b3e:	9b04      	ldr	r3, [sp, #16]
 8007b40:	3301      	adds	r3, #1
 8007b42:	9304      	str	r3, [sp, #16]
 8007b44:	9b05      	ldr	r3, [sp, #20]
 8007b46:	3301      	adds	r3, #1
 8007b48:	9305      	str	r3, [sp, #20]
 8007b4a:	f04f 0801 	mov.w	r8, #1
 8007b4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	f47f af6a 	bne.w	8007a2a <_dtoa_r+0x7ca>
 8007b56:	2001      	movs	r0, #1
 8007b58:	e76f      	b.n	8007a3a <_dtoa_r+0x7da>
 8007b5a:	f04f 0800 	mov.w	r8, #0
 8007b5e:	e7f6      	b.n	8007b4e <_dtoa_r+0x8ee>
 8007b60:	4698      	mov	r8, r3
 8007b62:	e7f4      	b.n	8007b4e <_dtoa_r+0x8ee>
 8007b64:	f43f af7d 	beq.w	8007a62 <_dtoa_r+0x802>
 8007b68:	4618      	mov	r0, r3
 8007b6a:	301c      	adds	r0, #28
 8007b6c:	e772      	b.n	8007a54 <_dtoa_r+0x7f4>
 8007b6e:	9b03      	ldr	r3, [sp, #12]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	dc37      	bgt.n	8007be4 <_dtoa_r+0x984>
 8007b74:	9b06      	ldr	r3, [sp, #24]
 8007b76:	2b02      	cmp	r3, #2
 8007b78:	dd34      	ble.n	8007be4 <_dtoa_r+0x984>
 8007b7a:	9b03      	ldr	r3, [sp, #12]
 8007b7c:	9302      	str	r3, [sp, #8]
 8007b7e:	9b02      	ldr	r3, [sp, #8]
 8007b80:	b96b      	cbnz	r3, 8007b9e <_dtoa_r+0x93e>
 8007b82:	4631      	mov	r1, r6
 8007b84:	2205      	movs	r2, #5
 8007b86:	4620      	mov	r0, r4
 8007b88:	f000 ff74 	bl	8008a74 <__multadd>
 8007b8c:	4601      	mov	r1, r0
 8007b8e:	4606      	mov	r6, r0
 8007b90:	ee18 0a10 	vmov	r0, s16
 8007b94:	f001 f9d8 	bl	8008f48 <__mcmp>
 8007b98:	2800      	cmp	r0, #0
 8007b9a:	f73f adbb 	bgt.w	8007714 <_dtoa_r+0x4b4>
 8007b9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ba0:	9d01      	ldr	r5, [sp, #4]
 8007ba2:	43db      	mvns	r3, r3
 8007ba4:	9300      	str	r3, [sp, #0]
 8007ba6:	f04f 0800 	mov.w	r8, #0
 8007baa:	4631      	mov	r1, r6
 8007bac:	4620      	mov	r0, r4
 8007bae:	f000 ff3f 	bl	8008a30 <_Bfree>
 8007bb2:	2f00      	cmp	r7, #0
 8007bb4:	f43f aea4 	beq.w	8007900 <_dtoa_r+0x6a0>
 8007bb8:	f1b8 0f00 	cmp.w	r8, #0
 8007bbc:	d005      	beq.n	8007bca <_dtoa_r+0x96a>
 8007bbe:	45b8      	cmp	r8, r7
 8007bc0:	d003      	beq.n	8007bca <_dtoa_r+0x96a>
 8007bc2:	4641      	mov	r1, r8
 8007bc4:	4620      	mov	r0, r4
 8007bc6:	f000 ff33 	bl	8008a30 <_Bfree>
 8007bca:	4639      	mov	r1, r7
 8007bcc:	4620      	mov	r0, r4
 8007bce:	f000 ff2f 	bl	8008a30 <_Bfree>
 8007bd2:	e695      	b.n	8007900 <_dtoa_r+0x6a0>
 8007bd4:	2600      	movs	r6, #0
 8007bd6:	4637      	mov	r7, r6
 8007bd8:	e7e1      	b.n	8007b9e <_dtoa_r+0x93e>
 8007bda:	9700      	str	r7, [sp, #0]
 8007bdc:	4637      	mov	r7, r6
 8007bde:	e599      	b.n	8007714 <_dtoa_r+0x4b4>
 8007be0:	40240000 	.word	0x40240000
 8007be4:	9b08      	ldr	r3, [sp, #32]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	f000 80ca 	beq.w	8007d80 <_dtoa_r+0xb20>
 8007bec:	9b03      	ldr	r3, [sp, #12]
 8007bee:	9302      	str	r3, [sp, #8]
 8007bf0:	2d00      	cmp	r5, #0
 8007bf2:	dd05      	ble.n	8007c00 <_dtoa_r+0x9a0>
 8007bf4:	4639      	mov	r1, r7
 8007bf6:	462a      	mov	r2, r5
 8007bf8:	4620      	mov	r0, r4
 8007bfa:	f001 f935 	bl	8008e68 <__lshift>
 8007bfe:	4607      	mov	r7, r0
 8007c00:	f1b8 0f00 	cmp.w	r8, #0
 8007c04:	d05b      	beq.n	8007cbe <_dtoa_r+0xa5e>
 8007c06:	6879      	ldr	r1, [r7, #4]
 8007c08:	4620      	mov	r0, r4
 8007c0a:	f000 fed1 	bl	80089b0 <_Balloc>
 8007c0e:	4605      	mov	r5, r0
 8007c10:	b928      	cbnz	r0, 8007c1e <_dtoa_r+0x9be>
 8007c12:	4b87      	ldr	r3, [pc, #540]	; (8007e30 <_dtoa_r+0xbd0>)
 8007c14:	4602      	mov	r2, r0
 8007c16:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007c1a:	f7ff bb3b 	b.w	8007294 <_dtoa_r+0x34>
 8007c1e:	693a      	ldr	r2, [r7, #16]
 8007c20:	3202      	adds	r2, #2
 8007c22:	0092      	lsls	r2, r2, #2
 8007c24:	f107 010c 	add.w	r1, r7, #12
 8007c28:	300c      	adds	r0, #12
 8007c2a:	f000 feb3 	bl	8008994 <memcpy>
 8007c2e:	2201      	movs	r2, #1
 8007c30:	4629      	mov	r1, r5
 8007c32:	4620      	mov	r0, r4
 8007c34:	f001 f918 	bl	8008e68 <__lshift>
 8007c38:	9b01      	ldr	r3, [sp, #4]
 8007c3a:	f103 0901 	add.w	r9, r3, #1
 8007c3e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007c42:	4413      	add	r3, r2
 8007c44:	9305      	str	r3, [sp, #20]
 8007c46:	f00a 0301 	and.w	r3, sl, #1
 8007c4a:	46b8      	mov	r8, r7
 8007c4c:	9304      	str	r3, [sp, #16]
 8007c4e:	4607      	mov	r7, r0
 8007c50:	4631      	mov	r1, r6
 8007c52:	ee18 0a10 	vmov	r0, s16
 8007c56:	f7ff fa77 	bl	8007148 <quorem>
 8007c5a:	4641      	mov	r1, r8
 8007c5c:	9002      	str	r0, [sp, #8]
 8007c5e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007c62:	ee18 0a10 	vmov	r0, s16
 8007c66:	f001 f96f 	bl	8008f48 <__mcmp>
 8007c6a:	463a      	mov	r2, r7
 8007c6c:	9003      	str	r0, [sp, #12]
 8007c6e:	4631      	mov	r1, r6
 8007c70:	4620      	mov	r0, r4
 8007c72:	f001 f985 	bl	8008f80 <__mdiff>
 8007c76:	68c2      	ldr	r2, [r0, #12]
 8007c78:	f109 3bff 	add.w	fp, r9, #4294967295
 8007c7c:	4605      	mov	r5, r0
 8007c7e:	bb02      	cbnz	r2, 8007cc2 <_dtoa_r+0xa62>
 8007c80:	4601      	mov	r1, r0
 8007c82:	ee18 0a10 	vmov	r0, s16
 8007c86:	f001 f95f 	bl	8008f48 <__mcmp>
 8007c8a:	4602      	mov	r2, r0
 8007c8c:	4629      	mov	r1, r5
 8007c8e:	4620      	mov	r0, r4
 8007c90:	9207      	str	r2, [sp, #28]
 8007c92:	f000 fecd 	bl	8008a30 <_Bfree>
 8007c96:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007c9a:	ea43 0102 	orr.w	r1, r3, r2
 8007c9e:	9b04      	ldr	r3, [sp, #16]
 8007ca0:	430b      	orrs	r3, r1
 8007ca2:	464d      	mov	r5, r9
 8007ca4:	d10f      	bne.n	8007cc6 <_dtoa_r+0xa66>
 8007ca6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007caa:	d02a      	beq.n	8007d02 <_dtoa_r+0xaa2>
 8007cac:	9b03      	ldr	r3, [sp, #12]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	dd02      	ble.n	8007cb8 <_dtoa_r+0xa58>
 8007cb2:	9b02      	ldr	r3, [sp, #8]
 8007cb4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007cb8:	f88b a000 	strb.w	sl, [fp]
 8007cbc:	e775      	b.n	8007baa <_dtoa_r+0x94a>
 8007cbe:	4638      	mov	r0, r7
 8007cc0:	e7ba      	b.n	8007c38 <_dtoa_r+0x9d8>
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	e7e2      	b.n	8007c8c <_dtoa_r+0xa2c>
 8007cc6:	9b03      	ldr	r3, [sp, #12]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	db04      	blt.n	8007cd6 <_dtoa_r+0xa76>
 8007ccc:	9906      	ldr	r1, [sp, #24]
 8007cce:	430b      	orrs	r3, r1
 8007cd0:	9904      	ldr	r1, [sp, #16]
 8007cd2:	430b      	orrs	r3, r1
 8007cd4:	d122      	bne.n	8007d1c <_dtoa_r+0xabc>
 8007cd6:	2a00      	cmp	r2, #0
 8007cd8:	ddee      	ble.n	8007cb8 <_dtoa_r+0xa58>
 8007cda:	ee18 1a10 	vmov	r1, s16
 8007cde:	2201      	movs	r2, #1
 8007ce0:	4620      	mov	r0, r4
 8007ce2:	f001 f8c1 	bl	8008e68 <__lshift>
 8007ce6:	4631      	mov	r1, r6
 8007ce8:	ee08 0a10 	vmov	s16, r0
 8007cec:	f001 f92c 	bl	8008f48 <__mcmp>
 8007cf0:	2800      	cmp	r0, #0
 8007cf2:	dc03      	bgt.n	8007cfc <_dtoa_r+0xa9c>
 8007cf4:	d1e0      	bne.n	8007cb8 <_dtoa_r+0xa58>
 8007cf6:	f01a 0f01 	tst.w	sl, #1
 8007cfa:	d0dd      	beq.n	8007cb8 <_dtoa_r+0xa58>
 8007cfc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007d00:	d1d7      	bne.n	8007cb2 <_dtoa_r+0xa52>
 8007d02:	2339      	movs	r3, #57	; 0x39
 8007d04:	f88b 3000 	strb.w	r3, [fp]
 8007d08:	462b      	mov	r3, r5
 8007d0a:	461d      	mov	r5, r3
 8007d0c:	3b01      	subs	r3, #1
 8007d0e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007d12:	2a39      	cmp	r2, #57	; 0x39
 8007d14:	d071      	beq.n	8007dfa <_dtoa_r+0xb9a>
 8007d16:	3201      	adds	r2, #1
 8007d18:	701a      	strb	r2, [r3, #0]
 8007d1a:	e746      	b.n	8007baa <_dtoa_r+0x94a>
 8007d1c:	2a00      	cmp	r2, #0
 8007d1e:	dd07      	ble.n	8007d30 <_dtoa_r+0xad0>
 8007d20:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007d24:	d0ed      	beq.n	8007d02 <_dtoa_r+0xaa2>
 8007d26:	f10a 0301 	add.w	r3, sl, #1
 8007d2a:	f88b 3000 	strb.w	r3, [fp]
 8007d2e:	e73c      	b.n	8007baa <_dtoa_r+0x94a>
 8007d30:	9b05      	ldr	r3, [sp, #20]
 8007d32:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007d36:	4599      	cmp	r9, r3
 8007d38:	d047      	beq.n	8007dca <_dtoa_r+0xb6a>
 8007d3a:	ee18 1a10 	vmov	r1, s16
 8007d3e:	2300      	movs	r3, #0
 8007d40:	220a      	movs	r2, #10
 8007d42:	4620      	mov	r0, r4
 8007d44:	f000 fe96 	bl	8008a74 <__multadd>
 8007d48:	45b8      	cmp	r8, r7
 8007d4a:	ee08 0a10 	vmov	s16, r0
 8007d4e:	f04f 0300 	mov.w	r3, #0
 8007d52:	f04f 020a 	mov.w	r2, #10
 8007d56:	4641      	mov	r1, r8
 8007d58:	4620      	mov	r0, r4
 8007d5a:	d106      	bne.n	8007d6a <_dtoa_r+0xb0a>
 8007d5c:	f000 fe8a 	bl	8008a74 <__multadd>
 8007d60:	4680      	mov	r8, r0
 8007d62:	4607      	mov	r7, r0
 8007d64:	f109 0901 	add.w	r9, r9, #1
 8007d68:	e772      	b.n	8007c50 <_dtoa_r+0x9f0>
 8007d6a:	f000 fe83 	bl	8008a74 <__multadd>
 8007d6e:	4639      	mov	r1, r7
 8007d70:	4680      	mov	r8, r0
 8007d72:	2300      	movs	r3, #0
 8007d74:	220a      	movs	r2, #10
 8007d76:	4620      	mov	r0, r4
 8007d78:	f000 fe7c 	bl	8008a74 <__multadd>
 8007d7c:	4607      	mov	r7, r0
 8007d7e:	e7f1      	b.n	8007d64 <_dtoa_r+0xb04>
 8007d80:	9b03      	ldr	r3, [sp, #12]
 8007d82:	9302      	str	r3, [sp, #8]
 8007d84:	9d01      	ldr	r5, [sp, #4]
 8007d86:	ee18 0a10 	vmov	r0, s16
 8007d8a:	4631      	mov	r1, r6
 8007d8c:	f7ff f9dc 	bl	8007148 <quorem>
 8007d90:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007d94:	9b01      	ldr	r3, [sp, #4]
 8007d96:	f805 ab01 	strb.w	sl, [r5], #1
 8007d9a:	1aea      	subs	r2, r5, r3
 8007d9c:	9b02      	ldr	r3, [sp, #8]
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	dd09      	ble.n	8007db6 <_dtoa_r+0xb56>
 8007da2:	ee18 1a10 	vmov	r1, s16
 8007da6:	2300      	movs	r3, #0
 8007da8:	220a      	movs	r2, #10
 8007daa:	4620      	mov	r0, r4
 8007dac:	f000 fe62 	bl	8008a74 <__multadd>
 8007db0:	ee08 0a10 	vmov	s16, r0
 8007db4:	e7e7      	b.n	8007d86 <_dtoa_r+0xb26>
 8007db6:	9b02      	ldr	r3, [sp, #8]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	bfc8      	it	gt
 8007dbc:	461d      	movgt	r5, r3
 8007dbe:	9b01      	ldr	r3, [sp, #4]
 8007dc0:	bfd8      	it	le
 8007dc2:	2501      	movle	r5, #1
 8007dc4:	441d      	add	r5, r3
 8007dc6:	f04f 0800 	mov.w	r8, #0
 8007dca:	ee18 1a10 	vmov	r1, s16
 8007dce:	2201      	movs	r2, #1
 8007dd0:	4620      	mov	r0, r4
 8007dd2:	f001 f849 	bl	8008e68 <__lshift>
 8007dd6:	4631      	mov	r1, r6
 8007dd8:	ee08 0a10 	vmov	s16, r0
 8007ddc:	f001 f8b4 	bl	8008f48 <__mcmp>
 8007de0:	2800      	cmp	r0, #0
 8007de2:	dc91      	bgt.n	8007d08 <_dtoa_r+0xaa8>
 8007de4:	d102      	bne.n	8007dec <_dtoa_r+0xb8c>
 8007de6:	f01a 0f01 	tst.w	sl, #1
 8007dea:	d18d      	bne.n	8007d08 <_dtoa_r+0xaa8>
 8007dec:	462b      	mov	r3, r5
 8007dee:	461d      	mov	r5, r3
 8007df0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007df4:	2a30      	cmp	r2, #48	; 0x30
 8007df6:	d0fa      	beq.n	8007dee <_dtoa_r+0xb8e>
 8007df8:	e6d7      	b.n	8007baa <_dtoa_r+0x94a>
 8007dfa:	9a01      	ldr	r2, [sp, #4]
 8007dfc:	429a      	cmp	r2, r3
 8007dfe:	d184      	bne.n	8007d0a <_dtoa_r+0xaaa>
 8007e00:	9b00      	ldr	r3, [sp, #0]
 8007e02:	3301      	adds	r3, #1
 8007e04:	9300      	str	r3, [sp, #0]
 8007e06:	2331      	movs	r3, #49	; 0x31
 8007e08:	7013      	strb	r3, [r2, #0]
 8007e0a:	e6ce      	b.n	8007baa <_dtoa_r+0x94a>
 8007e0c:	4b09      	ldr	r3, [pc, #36]	; (8007e34 <_dtoa_r+0xbd4>)
 8007e0e:	f7ff ba95 	b.w	800733c <_dtoa_r+0xdc>
 8007e12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	f47f aa6e 	bne.w	80072f6 <_dtoa_r+0x96>
 8007e1a:	4b07      	ldr	r3, [pc, #28]	; (8007e38 <_dtoa_r+0xbd8>)
 8007e1c:	f7ff ba8e 	b.w	800733c <_dtoa_r+0xdc>
 8007e20:	9b02      	ldr	r3, [sp, #8]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	dcae      	bgt.n	8007d84 <_dtoa_r+0xb24>
 8007e26:	9b06      	ldr	r3, [sp, #24]
 8007e28:	2b02      	cmp	r3, #2
 8007e2a:	f73f aea8 	bgt.w	8007b7e <_dtoa_r+0x91e>
 8007e2e:	e7a9      	b.n	8007d84 <_dtoa_r+0xb24>
 8007e30:	0800a080 	.word	0x0800a080
 8007e34:	08009e80 	.word	0x08009e80
 8007e38:	0800a001 	.word	0x0800a001

08007e3c <__sflush_r>:
 8007e3c:	898a      	ldrh	r2, [r1, #12]
 8007e3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e42:	4605      	mov	r5, r0
 8007e44:	0710      	lsls	r0, r2, #28
 8007e46:	460c      	mov	r4, r1
 8007e48:	d458      	bmi.n	8007efc <__sflush_r+0xc0>
 8007e4a:	684b      	ldr	r3, [r1, #4]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	dc05      	bgt.n	8007e5c <__sflush_r+0x20>
 8007e50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	dc02      	bgt.n	8007e5c <__sflush_r+0x20>
 8007e56:	2000      	movs	r0, #0
 8007e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e5e:	2e00      	cmp	r6, #0
 8007e60:	d0f9      	beq.n	8007e56 <__sflush_r+0x1a>
 8007e62:	2300      	movs	r3, #0
 8007e64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007e68:	682f      	ldr	r7, [r5, #0]
 8007e6a:	602b      	str	r3, [r5, #0]
 8007e6c:	d032      	beq.n	8007ed4 <__sflush_r+0x98>
 8007e6e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007e70:	89a3      	ldrh	r3, [r4, #12]
 8007e72:	075a      	lsls	r2, r3, #29
 8007e74:	d505      	bpl.n	8007e82 <__sflush_r+0x46>
 8007e76:	6863      	ldr	r3, [r4, #4]
 8007e78:	1ac0      	subs	r0, r0, r3
 8007e7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007e7c:	b10b      	cbz	r3, 8007e82 <__sflush_r+0x46>
 8007e7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007e80:	1ac0      	subs	r0, r0, r3
 8007e82:	2300      	movs	r3, #0
 8007e84:	4602      	mov	r2, r0
 8007e86:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e88:	6a21      	ldr	r1, [r4, #32]
 8007e8a:	4628      	mov	r0, r5
 8007e8c:	47b0      	blx	r6
 8007e8e:	1c43      	adds	r3, r0, #1
 8007e90:	89a3      	ldrh	r3, [r4, #12]
 8007e92:	d106      	bne.n	8007ea2 <__sflush_r+0x66>
 8007e94:	6829      	ldr	r1, [r5, #0]
 8007e96:	291d      	cmp	r1, #29
 8007e98:	d82c      	bhi.n	8007ef4 <__sflush_r+0xb8>
 8007e9a:	4a2a      	ldr	r2, [pc, #168]	; (8007f44 <__sflush_r+0x108>)
 8007e9c:	40ca      	lsrs	r2, r1
 8007e9e:	07d6      	lsls	r6, r2, #31
 8007ea0:	d528      	bpl.n	8007ef4 <__sflush_r+0xb8>
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	6062      	str	r2, [r4, #4]
 8007ea6:	04d9      	lsls	r1, r3, #19
 8007ea8:	6922      	ldr	r2, [r4, #16]
 8007eaa:	6022      	str	r2, [r4, #0]
 8007eac:	d504      	bpl.n	8007eb8 <__sflush_r+0x7c>
 8007eae:	1c42      	adds	r2, r0, #1
 8007eb0:	d101      	bne.n	8007eb6 <__sflush_r+0x7a>
 8007eb2:	682b      	ldr	r3, [r5, #0]
 8007eb4:	b903      	cbnz	r3, 8007eb8 <__sflush_r+0x7c>
 8007eb6:	6560      	str	r0, [r4, #84]	; 0x54
 8007eb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007eba:	602f      	str	r7, [r5, #0]
 8007ebc:	2900      	cmp	r1, #0
 8007ebe:	d0ca      	beq.n	8007e56 <__sflush_r+0x1a>
 8007ec0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ec4:	4299      	cmp	r1, r3
 8007ec6:	d002      	beq.n	8007ece <__sflush_r+0x92>
 8007ec8:	4628      	mov	r0, r5
 8007eca:	f001 fa49 	bl	8009360 <_free_r>
 8007ece:	2000      	movs	r0, #0
 8007ed0:	6360      	str	r0, [r4, #52]	; 0x34
 8007ed2:	e7c1      	b.n	8007e58 <__sflush_r+0x1c>
 8007ed4:	6a21      	ldr	r1, [r4, #32]
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	4628      	mov	r0, r5
 8007eda:	47b0      	blx	r6
 8007edc:	1c41      	adds	r1, r0, #1
 8007ede:	d1c7      	bne.n	8007e70 <__sflush_r+0x34>
 8007ee0:	682b      	ldr	r3, [r5, #0]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d0c4      	beq.n	8007e70 <__sflush_r+0x34>
 8007ee6:	2b1d      	cmp	r3, #29
 8007ee8:	d001      	beq.n	8007eee <__sflush_r+0xb2>
 8007eea:	2b16      	cmp	r3, #22
 8007eec:	d101      	bne.n	8007ef2 <__sflush_r+0xb6>
 8007eee:	602f      	str	r7, [r5, #0]
 8007ef0:	e7b1      	b.n	8007e56 <__sflush_r+0x1a>
 8007ef2:	89a3      	ldrh	r3, [r4, #12]
 8007ef4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ef8:	81a3      	strh	r3, [r4, #12]
 8007efa:	e7ad      	b.n	8007e58 <__sflush_r+0x1c>
 8007efc:	690f      	ldr	r7, [r1, #16]
 8007efe:	2f00      	cmp	r7, #0
 8007f00:	d0a9      	beq.n	8007e56 <__sflush_r+0x1a>
 8007f02:	0793      	lsls	r3, r2, #30
 8007f04:	680e      	ldr	r6, [r1, #0]
 8007f06:	bf08      	it	eq
 8007f08:	694b      	ldreq	r3, [r1, #20]
 8007f0a:	600f      	str	r7, [r1, #0]
 8007f0c:	bf18      	it	ne
 8007f0e:	2300      	movne	r3, #0
 8007f10:	eba6 0807 	sub.w	r8, r6, r7
 8007f14:	608b      	str	r3, [r1, #8]
 8007f16:	f1b8 0f00 	cmp.w	r8, #0
 8007f1a:	dd9c      	ble.n	8007e56 <__sflush_r+0x1a>
 8007f1c:	6a21      	ldr	r1, [r4, #32]
 8007f1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007f20:	4643      	mov	r3, r8
 8007f22:	463a      	mov	r2, r7
 8007f24:	4628      	mov	r0, r5
 8007f26:	47b0      	blx	r6
 8007f28:	2800      	cmp	r0, #0
 8007f2a:	dc06      	bgt.n	8007f3a <__sflush_r+0xfe>
 8007f2c:	89a3      	ldrh	r3, [r4, #12]
 8007f2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f32:	81a3      	strh	r3, [r4, #12]
 8007f34:	f04f 30ff 	mov.w	r0, #4294967295
 8007f38:	e78e      	b.n	8007e58 <__sflush_r+0x1c>
 8007f3a:	4407      	add	r7, r0
 8007f3c:	eba8 0800 	sub.w	r8, r8, r0
 8007f40:	e7e9      	b.n	8007f16 <__sflush_r+0xda>
 8007f42:	bf00      	nop
 8007f44:	20400001 	.word	0x20400001

08007f48 <_fflush_r>:
 8007f48:	b538      	push	{r3, r4, r5, lr}
 8007f4a:	690b      	ldr	r3, [r1, #16]
 8007f4c:	4605      	mov	r5, r0
 8007f4e:	460c      	mov	r4, r1
 8007f50:	b913      	cbnz	r3, 8007f58 <_fflush_r+0x10>
 8007f52:	2500      	movs	r5, #0
 8007f54:	4628      	mov	r0, r5
 8007f56:	bd38      	pop	{r3, r4, r5, pc}
 8007f58:	b118      	cbz	r0, 8007f62 <_fflush_r+0x1a>
 8007f5a:	6983      	ldr	r3, [r0, #24]
 8007f5c:	b90b      	cbnz	r3, 8007f62 <_fflush_r+0x1a>
 8007f5e:	f000 f887 	bl	8008070 <__sinit>
 8007f62:	4b14      	ldr	r3, [pc, #80]	; (8007fb4 <_fflush_r+0x6c>)
 8007f64:	429c      	cmp	r4, r3
 8007f66:	d11b      	bne.n	8007fa0 <_fflush_r+0x58>
 8007f68:	686c      	ldr	r4, [r5, #4]
 8007f6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d0ef      	beq.n	8007f52 <_fflush_r+0xa>
 8007f72:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007f74:	07d0      	lsls	r0, r2, #31
 8007f76:	d404      	bmi.n	8007f82 <_fflush_r+0x3a>
 8007f78:	0599      	lsls	r1, r3, #22
 8007f7a:	d402      	bmi.n	8007f82 <_fflush_r+0x3a>
 8007f7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f7e:	f000 fc88 	bl	8008892 <__retarget_lock_acquire_recursive>
 8007f82:	4628      	mov	r0, r5
 8007f84:	4621      	mov	r1, r4
 8007f86:	f7ff ff59 	bl	8007e3c <__sflush_r>
 8007f8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f8c:	07da      	lsls	r2, r3, #31
 8007f8e:	4605      	mov	r5, r0
 8007f90:	d4e0      	bmi.n	8007f54 <_fflush_r+0xc>
 8007f92:	89a3      	ldrh	r3, [r4, #12]
 8007f94:	059b      	lsls	r3, r3, #22
 8007f96:	d4dd      	bmi.n	8007f54 <_fflush_r+0xc>
 8007f98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f9a:	f000 fc7b 	bl	8008894 <__retarget_lock_release_recursive>
 8007f9e:	e7d9      	b.n	8007f54 <_fflush_r+0xc>
 8007fa0:	4b05      	ldr	r3, [pc, #20]	; (8007fb8 <_fflush_r+0x70>)
 8007fa2:	429c      	cmp	r4, r3
 8007fa4:	d101      	bne.n	8007faa <_fflush_r+0x62>
 8007fa6:	68ac      	ldr	r4, [r5, #8]
 8007fa8:	e7df      	b.n	8007f6a <_fflush_r+0x22>
 8007faa:	4b04      	ldr	r3, [pc, #16]	; (8007fbc <_fflush_r+0x74>)
 8007fac:	429c      	cmp	r4, r3
 8007fae:	bf08      	it	eq
 8007fb0:	68ec      	ldreq	r4, [r5, #12]
 8007fb2:	e7da      	b.n	8007f6a <_fflush_r+0x22>
 8007fb4:	0800a0b4 	.word	0x0800a0b4
 8007fb8:	0800a0d4 	.word	0x0800a0d4
 8007fbc:	0800a094 	.word	0x0800a094

08007fc0 <std>:
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	b510      	push	{r4, lr}
 8007fc4:	4604      	mov	r4, r0
 8007fc6:	e9c0 3300 	strd	r3, r3, [r0]
 8007fca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007fce:	6083      	str	r3, [r0, #8]
 8007fd0:	8181      	strh	r1, [r0, #12]
 8007fd2:	6643      	str	r3, [r0, #100]	; 0x64
 8007fd4:	81c2      	strh	r2, [r0, #14]
 8007fd6:	6183      	str	r3, [r0, #24]
 8007fd8:	4619      	mov	r1, r3
 8007fda:	2208      	movs	r2, #8
 8007fdc:	305c      	adds	r0, #92	; 0x5c
 8007fde:	f7fd fa0f 	bl	8005400 <memset>
 8007fe2:	4b05      	ldr	r3, [pc, #20]	; (8007ff8 <std+0x38>)
 8007fe4:	6263      	str	r3, [r4, #36]	; 0x24
 8007fe6:	4b05      	ldr	r3, [pc, #20]	; (8007ffc <std+0x3c>)
 8007fe8:	62a3      	str	r3, [r4, #40]	; 0x28
 8007fea:	4b05      	ldr	r3, [pc, #20]	; (8008000 <std+0x40>)
 8007fec:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007fee:	4b05      	ldr	r3, [pc, #20]	; (8008004 <std+0x44>)
 8007ff0:	6224      	str	r4, [r4, #32]
 8007ff2:	6323      	str	r3, [r4, #48]	; 0x30
 8007ff4:	bd10      	pop	{r4, pc}
 8007ff6:	bf00      	nop
 8007ff8:	08009ac1 	.word	0x08009ac1
 8007ffc:	08009ae3 	.word	0x08009ae3
 8008000:	08009b1b 	.word	0x08009b1b
 8008004:	08009b3f 	.word	0x08009b3f

08008008 <_cleanup_r>:
 8008008:	4901      	ldr	r1, [pc, #4]	; (8008010 <_cleanup_r+0x8>)
 800800a:	f000 b8af 	b.w	800816c <_fwalk_reent>
 800800e:	bf00      	nop
 8008010:	08007f49 	.word	0x08007f49

08008014 <__sfmoreglue>:
 8008014:	b570      	push	{r4, r5, r6, lr}
 8008016:	2268      	movs	r2, #104	; 0x68
 8008018:	1e4d      	subs	r5, r1, #1
 800801a:	4355      	muls	r5, r2
 800801c:	460e      	mov	r6, r1
 800801e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008022:	f001 fa09 	bl	8009438 <_malloc_r>
 8008026:	4604      	mov	r4, r0
 8008028:	b140      	cbz	r0, 800803c <__sfmoreglue+0x28>
 800802a:	2100      	movs	r1, #0
 800802c:	e9c0 1600 	strd	r1, r6, [r0]
 8008030:	300c      	adds	r0, #12
 8008032:	60a0      	str	r0, [r4, #8]
 8008034:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008038:	f7fd f9e2 	bl	8005400 <memset>
 800803c:	4620      	mov	r0, r4
 800803e:	bd70      	pop	{r4, r5, r6, pc}

08008040 <__sfp_lock_acquire>:
 8008040:	4801      	ldr	r0, [pc, #4]	; (8008048 <__sfp_lock_acquire+0x8>)
 8008042:	f000 bc26 	b.w	8008892 <__retarget_lock_acquire_recursive>
 8008046:	bf00      	nop
 8008048:	20000a19 	.word	0x20000a19

0800804c <__sfp_lock_release>:
 800804c:	4801      	ldr	r0, [pc, #4]	; (8008054 <__sfp_lock_release+0x8>)
 800804e:	f000 bc21 	b.w	8008894 <__retarget_lock_release_recursive>
 8008052:	bf00      	nop
 8008054:	20000a19 	.word	0x20000a19

08008058 <__sinit_lock_acquire>:
 8008058:	4801      	ldr	r0, [pc, #4]	; (8008060 <__sinit_lock_acquire+0x8>)
 800805a:	f000 bc1a 	b.w	8008892 <__retarget_lock_acquire_recursive>
 800805e:	bf00      	nop
 8008060:	20000a1a 	.word	0x20000a1a

08008064 <__sinit_lock_release>:
 8008064:	4801      	ldr	r0, [pc, #4]	; (800806c <__sinit_lock_release+0x8>)
 8008066:	f000 bc15 	b.w	8008894 <__retarget_lock_release_recursive>
 800806a:	bf00      	nop
 800806c:	20000a1a 	.word	0x20000a1a

08008070 <__sinit>:
 8008070:	b510      	push	{r4, lr}
 8008072:	4604      	mov	r4, r0
 8008074:	f7ff fff0 	bl	8008058 <__sinit_lock_acquire>
 8008078:	69a3      	ldr	r3, [r4, #24]
 800807a:	b11b      	cbz	r3, 8008084 <__sinit+0x14>
 800807c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008080:	f7ff bff0 	b.w	8008064 <__sinit_lock_release>
 8008084:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008088:	6523      	str	r3, [r4, #80]	; 0x50
 800808a:	4b13      	ldr	r3, [pc, #76]	; (80080d8 <__sinit+0x68>)
 800808c:	4a13      	ldr	r2, [pc, #76]	; (80080dc <__sinit+0x6c>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	62a2      	str	r2, [r4, #40]	; 0x28
 8008092:	42a3      	cmp	r3, r4
 8008094:	bf04      	itt	eq
 8008096:	2301      	moveq	r3, #1
 8008098:	61a3      	streq	r3, [r4, #24]
 800809a:	4620      	mov	r0, r4
 800809c:	f000 f820 	bl	80080e0 <__sfp>
 80080a0:	6060      	str	r0, [r4, #4]
 80080a2:	4620      	mov	r0, r4
 80080a4:	f000 f81c 	bl	80080e0 <__sfp>
 80080a8:	60a0      	str	r0, [r4, #8]
 80080aa:	4620      	mov	r0, r4
 80080ac:	f000 f818 	bl	80080e0 <__sfp>
 80080b0:	2200      	movs	r2, #0
 80080b2:	60e0      	str	r0, [r4, #12]
 80080b4:	2104      	movs	r1, #4
 80080b6:	6860      	ldr	r0, [r4, #4]
 80080b8:	f7ff ff82 	bl	8007fc0 <std>
 80080bc:	68a0      	ldr	r0, [r4, #8]
 80080be:	2201      	movs	r2, #1
 80080c0:	2109      	movs	r1, #9
 80080c2:	f7ff ff7d 	bl	8007fc0 <std>
 80080c6:	68e0      	ldr	r0, [r4, #12]
 80080c8:	2202      	movs	r2, #2
 80080ca:	2112      	movs	r1, #18
 80080cc:	f7ff ff78 	bl	8007fc0 <std>
 80080d0:	2301      	movs	r3, #1
 80080d2:	61a3      	str	r3, [r4, #24]
 80080d4:	e7d2      	b.n	800807c <__sinit+0xc>
 80080d6:	bf00      	nop
 80080d8:	08009e6c 	.word	0x08009e6c
 80080dc:	08008009 	.word	0x08008009

080080e0 <__sfp>:
 80080e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080e2:	4607      	mov	r7, r0
 80080e4:	f7ff ffac 	bl	8008040 <__sfp_lock_acquire>
 80080e8:	4b1e      	ldr	r3, [pc, #120]	; (8008164 <__sfp+0x84>)
 80080ea:	681e      	ldr	r6, [r3, #0]
 80080ec:	69b3      	ldr	r3, [r6, #24]
 80080ee:	b913      	cbnz	r3, 80080f6 <__sfp+0x16>
 80080f0:	4630      	mov	r0, r6
 80080f2:	f7ff ffbd 	bl	8008070 <__sinit>
 80080f6:	3648      	adds	r6, #72	; 0x48
 80080f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80080fc:	3b01      	subs	r3, #1
 80080fe:	d503      	bpl.n	8008108 <__sfp+0x28>
 8008100:	6833      	ldr	r3, [r6, #0]
 8008102:	b30b      	cbz	r3, 8008148 <__sfp+0x68>
 8008104:	6836      	ldr	r6, [r6, #0]
 8008106:	e7f7      	b.n	80080f8 <__sfp+0x18>
 8008108:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800810c:	b9d5      	cbnz	r5, 8008144 <__sfp+0x64>
 800810e:	4b16      	ldr	r3, [pc, #88]	; (8008168 <__sfp+0x88>)
 8008110:	60e3      	str	r3, [r4, #12]
 8008112:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008116:	6665      	str	r5, [r4, #100]	; 0x64
 8008118:	f000 fbba 	bl	8008890 <__retarget_lock_init_recursive>
 800811c:	f7ff ff96 	bl	800804c <__sfp_lock_release>
 8008120:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008124:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008128:	6025      	str	r5, [r4, #0]
 800812a:	61a5      	str	r5, [r4, #24]
 800812c:	2208      	movs	r2, #8
 800812e:	4629      	mov	r1, r5
 8008130:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008134:	f7fd f964 	bl	8005400 <memset>
 8008138:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800813c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008140:	4620      	mov	r0, r4
 8008142:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008144:	3468      	adds	r4, #104	; 0x68
 8008146:	e7d9      	b.n	80080fc <__sfp+0x1c>
 8008148:	2104      	movs	r1, #4
 800814a:	4638      	mov	r0, r7
 800814c:	f7ff ff62 	bl	8008014 <__sfmoreglue>
 8008150:	4604      	mov	r4, r0
 8008152:	6030      	str	r0, [r6, #0]
 8008154:	2800      	cmp	r0, #0
 8008156:	d1d5      	bne.n	8008104 <__sfp+0x24>
 8008158:	f7ff ff78 	bl	800804c <__sfp_lock_release>
 800815c:	230c      	movs	r3, #12
 800815e:	603b      	str	r3, [r7, #0]
 8008160:	e7ee      	b.n	8008140 <__sfp+0x60>
 8008162:	bf00      	nop
 8008164:	08009e6c 	.word	0x08009e6c
 8008168:	ffff0001 	.word	0xffff0001

0800816c <_fwalk_reent>:
 800816c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008170:	4606      	mov	r6, r0
 8008172:	4688      	mov	r8, r1
 8008174:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008178:	2700      	movs	r7, #0
 800817a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800817e:	f1b9 0901 	subs.w	r9, r9, #1
 8008182:	d505      	bpl.n	8008190 <_fwalk_reent+0x24>
 8008184:	6824      	ldr	r4, [r4, #0]
 8008186:	2c00      	cmp	r4, #0
 8008188:	d1f7      	bne.n	800817a <_fwalk_reent+0xe>
 800818a:	4638      	mov	r0, r7
 800818c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008190:	89ab      	ldrh	r3, [r5, #12]
 8008192:	2b01      	cmp	r3, #1
 8008194:	d907      	bls.n	80081a6 <_fwalk_reent+0x3a>
 8008196:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800819a:	3301      	adds	r3, #1
 800819c:	d003      	beq.n	80081a6 <_fwalk_reent+0x3a>
 800819e:	4629      	mov	r1, r5
 80081a0:	4630      	mov	r0, r6
 80081a2:	47c0      	blx	r8
 80081a4:	4307      	orrs	r7, r0
 80081a6:	3568      	adds	r5, #104	; 0x68
 80081a8:	e7e9      	b.n	800817e <_fwalk_reent+0x12>

080081aa <rshift>:
 80081aa:	6903      	ldr	r3, [r0, #16]
 80081ac:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80081b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80081b4:	ea4f 1261 	mov.w	r2, r1, asr #5
 80081b8:	f100 0414 	add.w	r4, r0, #20
 80081bc:	dd45      	ble.n	800824a <rshift+0xa0>
 80081be:	f011 011f 	ands.w	r1, r1, #31
 80081c2:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80081c6:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80081ca:	d10c      	bne.n	80081e6 <rshift+0x3c>
 80081cc:	f100 0710 	add.w	r7, r0, #16
 80081d0:	4629      	mov	r1, r5
 80081d2:	42b1      	cmp	r1, r6
 80081d4:	d334      	bcc.n	8008240 <rshift+0x96>
 80081d6:	1a9b      	subs	r3, r3, r2
 80081d8:	009b      	lsls	r3, r3, #2
 80081da:	1eea      	subs	r2, r5, #3
 80081dc:	4296      	cmp	r6, r2
 80081de:	bf38      	it	cc
 80081e0:	2300      	movcc	r3, #0
 80081e2:	4423      	add	r3, r4
 80081e4:	e015      	b.n	8008212 <rshift+0x68>
 80081e6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80081ea:	f1c1 0820 	rsb	r8, r1, #32
 80081ee:	40cf      	lsrs	r7, r1
 80081f0:	f105 0e04 	add.w	lr, r5, #4
 80081f4:	46a1      	mov	r9, r4
 80081f6:	4576      	cmp	r6, lr
 80081f8:	46f4      	mov	ip, lr
 80081fa:	d815      	bhi.n	8008228 <rshift+0x7e>
 80081fc:	1a9a      	subs	r2, r3, r2
 80081fe:	0092      	lsls	r2, r2, #2
 8008200:	3a04      	subs	r2, #4
 8008202:	3501      	adds	r5, #1
 8008204:	42ae      	cmp	r6, r5
 8008206:	bf38      	it	cc
 8008208:	2200      	movcc	r2, #0
 800820a:	18a3      	adds	r3, r4, r2
 800820c:	50a7      	str	r7, [r4, r2]
 800820e:	b107      	cbz	r7, 8008212 <rshift+0x68>
 8008210:	3304      	adds	r3, #4
 8008212:	1b1a      	subs	r2, r3, r4
 8008214:	42a3      	cmp	r3, r4
 8008216:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800821a:	bf08      	it	eq
 800821c:	2300      	moveq	r3, #0
 800821e:	6102      	str	r2, [r0, #16]
 8008220:	bf08      	it	eq
 8008222:	6143      	streq	r3, [r0, #20]
 8008224:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008228:	f8dc c000 	ldr.w	ip, [ip]
 800822c:	fa0c fc08 	lsl.w	ip, ip, r8
 8008230:	ea4c 0707 	orr.w	r7, ip, r7
 8008234:	f849 7b04 	str.w	r7, [r9], #4
 8008238:	f85e 7b04 	ldr.w	r7, [lr], #4
 800823c:	40cf      	lsrs	r7, r1
 800823e:	e7da      	b.n	80081f6 <rshift+0x4c>
 8008240:	f851 cb04 	ldr.w	ip, [r1], #4
 8008244:	f847 cf04 	str.w	ip, [r7, #4]!
 8008248:	e7c3      	b.n	80081d2 <rshift+0x28>
 800824a:	4623      	mov	r3, r4
 800824c:	e7e1      	b.n	8008212 <rshift+0x68>

0800824e <__hexdig_fun>:
 800824e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008252:	2b09      	cmp	r3, #9
 8008254:	d802      	bhi.n	800825c <__hexdig_fun+0xe>
 8008256:	3820      	subs	r0, #32
 8008258:	b2c0      	uxtb	r0, r0
 800825a:	4770      	bx	lr
 800825c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008260:	2b05      	cmp	r3, #5
 8008262:	d801      	bhi.n	8008268 <__hexdig_fun+0x1a>
 8008264:	3847      	subs	r0, #71	; 0x47
 8008266:	e7f7      	b.n	8008258 <__hexdig_fun+0xa>
 8008268:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800826c:	2b05      	cmp	r3, #5
 800826e:	d801      	bhi.n	8008274 <__hexdig_fun+0x26>
 8008270:	3827      	subs	r0, #39	; 0x27
 8008272:	e7f1      	b.n	8008258 <__hexdig_fun+0xa>
 8008274:	2000      	movs	r0, #0
 8008276:	4770      	bx	lr

08008278 <__gethex>:
 8008278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800827c:	ed2d 8b02 	vpush	{d8}
 8008280:	b089      	sub	sp, #36	; 0x24
 8008282:	ee08 0a10 	vmov	s16, r0
 8008286:	9304      	str	r3, [sp, #16]
 8008288:	4bb4      	ldr	r3, [pc, #720]	; (800855c <__gethex+0x2e4>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	9301      	str	r3, [sp, #4]
 800828e:	4618      	mov	r0, r3
 8008290:	468b      	mov	fp, r1
 8008292:	4690      	mov	r8, r2
 8008294:	f7f7 ffac 	bl	80001f0 <strlen>
 8008298:	9b01      	ldr	r3, [sp, #4]
 800829a:	f8db 2000 	ldr.w	r2, [fp]
 800829e:	4403      	add	r3, r0
 80082a0:	4682      	mov	sl, r0
 80082a2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80082a6:	9305      	str	r3, [sp, #20]
 80082a8:	1c93      	adds	r3, r2, #2
 80082aa:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80082ae:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80082b2:	32fe      	adds	r2, #254	; 0xfe
 80082b4:	18d1      	adds	r1, r2, r3
 80082b6:	461f      	mov	r7, r3
 80082b8:	f813 0b01 	ldrb.w	r0, [r3], #1
 80082bc:	9100      	str	r1, [sp, #0]
 80082be:	2830      	cmp	r0, #48	; 0x30
 80082c0:	d0f8      	beq.n	80082b4 <__gethex+0x3c>
 80082c2:	f7ff ffc4 	bl	800824e <__hexdig_fun>
 80082c6:	4604      	mov	r4, r0
 80082c8:	2800      	cmp	r0, #0
 80082ca:	d13a      	bne.n	8008342 <__gethex+0xca>
 80082cc:	9901      	ldr	r1, [sp, #4]
 80082ce:	4652      	mov	r2, sl
 80082d0:	4638      	mov	r0, r7
 80082d2:	f001 fc38 	bl	8009b46 <strncmp>
 80082d6:	4605      	mov	r5, r0
 80082d8:	2800      	cmp	r0, #0
 80082da:	d168      	bne.n	80083ae <__gethex+0x136>
 80082dc:	f817 000a 	ldrb.w	r0, [r7, sl]
 80082e0:	eb07 060a 	add.w	r6, r7, sl
 80082e4:	f7ff ffb3 	bl	800824e <__hexdig_fun>
 80082e8:	2800      	cmp	r0, #0
 80082ea:	d062      	beq.n	80083b2 <__gethex+0x13a>
 80082ec:	4633      	mov	r3, r6
 80082ee:	7818      	ldrb	r0, [r3, #0]
 80082f0:	2830      	cmp	r0, #48	; 0x30
 80082f2:	461f      	mov	r7, r3
 80082f4:	f103 0301 	add.w	r3, r3, #1
 80082f8:	d0f9      	beq.n	80082ee <__gethex+0x76>
 80082fa:	f7ff ffa8 	bl	800824e <__hexdig_fun>
 80082fe:	2301      	movs	r3, #1
 8008300:	fab0 f480 	clz	r4, r0
 8008304:	0964      	lsrs	r4, r4, #5
 8008306:	4635      	mov	r5, r6
 8008308:	9300      	str	r3, [sp, #0]
 800830a:	463a      	mov	r2, r7
 800830c:	4616      	mov	r6, r2
 800830e:	3201      	adds	r2, #1
 8008310:	7830      	ldrb	r0, [r6, #0]
 8008312:	f7ff ff9c 	bl	800824e <__hexdig_fun>
 8008316:	2800      	cmp	r0, #0
 8008318:	d1f8      	bne.n	800830c <__gethex+0x94>
 800831a:	9901      	ldr	r1, [sp, #4]
 800831c:	4652      	mov	r2, sl
 800831e:	4630      	mov	r0, r6
 8008320:	f001 fc11 	bl	8009b46 <strncmp>
 8008324:	b980      	cbnz	r0, 8008348 <__gethex+0xd0>
 8008326:	b94d      	cbnz	r5, 800833c <__gethex+0xc4>
 8008328:	eb06 050a 	add.w	r5, r6, sl
 800832c:	462a      	mov	r2, r5
 800832e:	4616      	mov	r6, r2
 8008330:	3201      	adds	r2, #1
 8008332:	7830      	ldrb	r0, [r6, #0]
 8008334:	f7ff ff8b 	bl	800824e <__hexdig_fun>
 8008338:	2800      	cmp	r0, #0
 800833a:	d1f8      	bne.n	800832e <__gethex+0xb6>
 800833c:	1bad      	subs	r5, r5, r6
 800833e:	00ad      	lsls	r5, r5, #2
 8008340:	e004      	b.n	800834c <__gethex+0xd4>
 8008342:	2400      	movs	r4, #0
 8008344:	4625      	mov	r5, r4
 8008346:	e7e0      	b.n	800830a <__gethex+0x92>
 8008348:	2d00      	cmp	r5, #0
 800834a:	d1f7      	bne.n	800833c <__gethex+0xc4>
 800834c:	7833      	ldrb	r3, [r6, #0]
 800834e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008352:	2b50      	cmp	r3, #80	; 0x50
 8008354:	d13b      	bne.n	80083ce <__gethex+0x156>
 8008356:	7873      	ldrb	r3, [r6, #1]
 8008358:	2b2b      	cmp	r3, #43	; 0x2b
 800835a:	d02c      	beq.n	80083b6 <__gethex+0x13e>
 800835c:	2b2d      	cmp	r3, #45	; 0x2d
 800835e:	d02e      	beq.n	80083be <__gethex+0x146>
 8008360:	1c71      	adds	r1, r6, #1
 8008362:	f04f 0900 	mov.w	r9, #0
 8008366:	7808      	ldrb	r0, [r1, #0]
 8008368:	f7ff ff71 	bl	800824e <__hexdig_fun>
 800836c:	1e43      	subs	r3, r0, #1
 800836e:	b2db      	uxtb	r3, r3
 8008370:	2b18      	cmp	r3, #24
 8008372:	d82c      	bhi.n	80083ce <__gethex+0x156>
 8008374:	f1a0 0210 	sub.w	r2, r0, #16
 8008378:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800837c:	f7ff ff67 	bl	800824e <__hexdig_fun>
 8008380:	1e43      	subs	r3, r0, #1
 8008382:	b2db      	uxtb	r3, r3
 8008384:	2b18      	cmp	r3, #24
 8008386:	d91d      	bls.n	80083c4 <__gethex+0x14c>
 8008388:	f1b9 0f00 	cmp.w	r9, #0
 800838c:	d000      	beq.n	8008390 <__gethex+0x118>
 800838e:	4252      	negs	r2, r2
 8008390:	4415      	add	r5, r2
 8008392:	f8cb 1000 	str.w	r1, [fp]
 8008396:	b1e4      	cbz	r4, 80083d2 <__gethex+0x15a>
 8008398:	9b00      	ldr	r3, [sp, #0]
 800839a:	2b00      	cmp	r3, #0
 800839c:	bf14      	ite	ne
 800839e:	2700      	movne	r7, #0
 80083a0:	2706      	moveq	r7, #6
 80083a2:	4638      	mov	r0, r7
 80083a4:	b009      	add	sp, #36	; 0x24
 80083a6:	ecbd 8b02 	vpop	{d8}
 80083aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083ae:	463e      	mov	r6, r7
 80083b0:	4625      	mov	r5, r4
 80083b2:	2401      	movs	r4, #1
 80083b4:	e7ca      	b.n	800834c <__gethex+0xd4>
 80083b6:	f04f 0900 	mov.w	r9, #0
 80083ba:	1cb1      	adds	r1, r6, #2
 80083bc:	e7d3      	b.n	8008366 <__gethex+0xee>
 80083be:	f04f 0901 	mov.w	r9, #1
 80083c2:	e7fa      	b.n	80083ba <__gethex+0x142>
 80083c4:	230a      	movs	r3, #10
 80083c6:	fb03 0202 	mla	r2, r3, r2, r0
 80083ca:	3a10      	subs	r2, #16
 80083cc:	e7d4      	b.n	8008378 <__gethex+0x100>
 80083ce:	4631      	mov	r1, r6
 80083d0:	e7df      	b.n	8008392 <__gethex+0x11a>
 80083d2:	1bf3      	subs	r3, r6, r7
 80083d4:	3b01      	subs	r3, #1
 80083d6:	4621      	mov	r1, r4
 80083d8:	2b07      	cmp	r3, #7
 80083da:	dc0b      	bgt.n	80083f4 <__gethex+0x17c>
 80083dc:	ee18 0a10 	vmov	r0, s16
 80083e0:	f000 fae6 	bl	80089b0 <_Balloc>
 80083e4:	4604      	mov	r4, r0
 80083e6:	b940      	cbnz	r0, 80083fa <__gethex+0x182>
 80083e8:	4b5d      	ldr	r3, [pc, #372]	; (8008560 <__gethex+0x2e8>)
 80083ea:	4602      	mov	r2, r0
 80083ec:	21de      	movs	r1, #222	; 0xde
 80083ee:	485d      	ldr	r0, [pc, #372]	; (8008564 <__gethex+0x2ec>)
 80083f0:	f001 fbdc 	bl	8009bac <__assert_func>
 80083f4:	3101      	adds	r1, #1
 80083f6:	105b      	asrs	r3, r3, #1
 80083f8:	e7ee      	b.n	80083d8 <__gethex+0x160>
 80083fa:	f100 0914 	add.w	r9, r0, #20
 80083fe:	f04f 0b00 	mov.w	fp, #0
 8008402:	f1ca 0301 	rsb	r3, sl, #1
 8008406:	f8cd 9008 	str.w	r9, [sp, #8]
 800840a:	f8cd b000 	str.w	fp, [sp]
 800840e:	9306      	str	r3, [sp, #24]
 8008410:	42b7      	cmp	r7, r6
 8008412:	d340      	bcc.n	8008496 <__gethex+0x21e>
 8008414:	9802      	ldr	r0, [sp, #8]
 8008416:	9b00      	ldr	r3, [sp, #0]
 8008418:	f840 3b04 	str.w	r3, [r0], #4
 800841c:	eba0 0009 	sub.w	r0, r0, r9
 8008420:	1080      	asrs	r0, r0, #2
 8008422:	0146      	lsls	r6, r0, #5
 8008424:	6120      	str	r0, [r4, #16]
 8008426:	4618      	mov	r0, r3
 8008428:	f000 fbb4 	bl	8008b94 <__hi0bits>
 800842c:	1a30      	subs	r0, r6, r0
 800842e:	f8d8 6000 	ldr.w	r6, [r8]
 8008432:	42b0      	cmp	r0, r6
 8008434:	dd63      	ble.n	80084fe <__gethex+0x286>
 8008436:	1b87      	subs	r7, r0, r6
 8008438:	4639      	mov	r1, r7
 800843a:	4620      	mov	r0, r4
 800843c:	f000 ff58 	bl	80092f0 <__any_on>
 8008440:	4682      	mov	sl, r0
 8008442:	b1a8      	cbz	r0, 8008470 <__gethex+0x1f8>
 8008444:	1e7b      	subs	r3, r7, #1
 8008446:	1159      	asrs	r1, r3, #5
 8008448:	f003 021f 	and.w	r2, r3, #31
 800844c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008450:	f04f 0a01 	mov.w	sl, #1
 8008454:	fa0a f202 	lsl.w	r2, sl, r2
 8008458:	420a      	tst	r2, r1
 800845a:	d009      	beq.n	8008470 <__gethex+0x1f8>
 800845c:	4553      	cmp	r3, sl
 800845e:	dd05      	ble.n	800846c <__gethex+0x1f4>
 8008460:	1eb9      	subs	r1, r7, #2
 8008462:	4620      	mov	r0, r4
 8008464:	f000 ff44 	bl	80092f0 <__any_on>
 8008468:	2800      	cmp	r0, #0
 800846a:	d145      	bne.n	80084f8 <__gethex+0x280>
 800846c:	f04f 0a02 	mov.w	sl, #2
 8008470:	4639      	mov	r1, r7
 8008472:	4620      	mov	r0, r4
 8008474:	f7ff fe99 	bl	80081aa <rshift>
 8008478:	443d      	add	r5, r7
 800847a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800847e:	42ab      	cmp	r3, r5
 8008480:	da4c      	bge.n	800851c <__gethex+0x2a4>
 8008482:	ee18 0a10 	vmov	r0, s16
 8008486:	4621      	mov	r1, r4
 8008488:	f000 fad2 	bl	8008a30 <_Bfree>
 800848c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800848e:	2300      	movs	r3, #0
 8008490:	6013      	str	r3, [r2, #0]
 8008492:	27a3      	movs	r7, #163	; 0xa3
 8008494:	e785      	b.n	80083a2 <__gethex+0x12a>
 8008496:	1e73      	subs	r3, r6, #1
 8008498:	9a05      	ldr	r2, [sp, #20]
 800849a:	9303      	str	r3, [sp, #12]
 800849c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d019      	beq.n	80084d8 <__gethex+0x260>
 80084a4:	f1bb 0f20 	cmp.w	fp, #32
 80084a8:	d107      	bne.n	80084ba <__gethex+0x242>
 80084aa:	9b02      	ldr	r3, [sp, #8]
 80084ac:	9a00      	ldr	r2, [sp, #0]
 80084ae:	f843 2b04 	str.w	r2, [r3], #4
 80084b2:	9302      	str	r3, [sp, #8]
 80084b4:	2300      	movs	r3, #0
 80084b6:	9300      	str	r3, [sp, #0]
 80084b8:	469b      	mov	fp, r3
 80084ba:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80084be:	f7ff fec6 	bl	800824e <__hexdig_fun>
 80084c2:	9b00      	ldr	r3, [sp, #0]
 80084c4:	f000 000f 	and.w	r0, r0, #15
 80084c8:	fa00 f00b 	lsl.w	r0, r0, fp
 80084cc:	4303      	orrs	r3, r0
 80084ce:	9300      	str	r3, [sp, #0]
 80084d0:	f10b 0b04 	add.w	fp, fp, #4
 80084d4:	9b03      	ldr	r3, [sp, #12]
 80084d6:	e00d      	b.n	80084f4 <__gethex+0x27c>
 80084d8:	9b03      	ldr	r3, [sp, #12]
 80084da:	9a06      	ldr	r2, [sp, #24]
 80084dc:	4413      	add	r3, r2
 80084de:	42bb      	cmp	r3, r7
 80084e0:	d3e0      	bcc.n	80084a4 <__gethex+0x22c>
 80084e2:	4618      	mov	r0, r3
 80084e4:	9901      	ldr	r1, [sp, #4]
 80084e6:	9307      	str	r3, [sp, #28]
 80084e8:	4652      	mov	r2, sl
 80084ea:	f001 fb2c 	bl	8009b46 <strncmp>
 80084ee:	9b07      	ldr	r3, [sp, #28]
 80084f0:	2800      	cmp	r0, #0
 80084f2:	d1d7      	bne.n	80084a4 <__gethex+0x22c>
 80084f4:	461e      	mov	r6, r3
 80084f6:	e78b      	b.n	8008410 <__gethex+0x198>
 80084f8:	f04f 0a03 	mov.w	sl, #3
 80084fc:	e7b8      	b.n	8008470 <__gethex+0x1f8>
 80084fe:	da0a      	bge.n	8008516 <__gethex+0x29e>
 8008500:	1a37      	subs	r7, r6, r0
 8008502:	4621      	mov	r1, r4
 8008504:	ee18 0a10 	vmov	r0, s16
 8008508:	463a      	mov	r2, r7
 800850a:	f000 fcad 	bl	8008e68 <__lshift>
 800850e:	1bed      	subs	r5, r5, r7
 8008510:	4604      	mov	r4, r0
 8008512:	f100 0914 	add.w	r9, r0, #20
 8008516:	f04f 0a00 	mov.w	sl, #0
 800851a:	e7ae      	b.n	800847a <__gethex+0x202>
 800851c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008520:	42a8      	cmp	r0, r5
 8008522:	dd72      	ble.n	800860a <__gethex+0x392>
 8008524:	1b45      	subs	r5, r0, r5
 8008526:	42ae      	cmp	r6, r5
 8008528:	dc36      	bgt.n	8008598 <__gethex+0x320>
 800852a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800852e:	2b02      	cmp	r3, #2
 8008530:	d02a      	beq.n	8008588 <__gethex+0x310>
 8008532:	2b03      	cmp	r3, #3
 8008534:	d02c      	beq.n	8008590 <__gethex+0x318>
 8008536:	2b01      	cmp	r3, #1
 8008538:	d11c      	bne.n	8008574 <__gethex+0x2fc>
 800853a:	42ae      	cmp	r6, r5
 800853c:	d11a      	bne.n	8008574 <__gethex+0x2fc>
 800853e:	2e01      	cmp	r6, #1
 8008540:	d112      	bne.n	8008568 <__gethex+0x2f0>
 8008542:	9a04      	ldr	r2, [sp, #16]
 8008544:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008548:	6013      	str	r3, [r2, #0]
 800854a:	2301      	movs	r3, #1
 800854c:	6123      	str	r3, [r4, #16]
 800854e:	f8c9 3000 	str.w	r3, [r9]
 8008552:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008554:	2762      	movs	r7, #98	; 0x62
 8008556:	601c      	str	r4, [r3, #0]
 8008558:	e723      	b.n	80083a2 <__gethex+0x12a>
 800855a:	bf00      	nop
 800855c:	0800a15c 	.word	0x0800a15c
 8008560:	0800a080 	.word	0x0800a080
 8008564:	0800a0f4 	.word	0x0800a0f4
 8008568:	1e71      	subs	r1, r6, #1
 800856a:	4620      	mov	r0, r4
 800856c:	f000 fec0 	bl	80092f0 <__any_on>
 8008570:	2800      	cmp	r0, #0
 8008572:	d1e6      	bne.n	8008542 <__gethex+0x2ca>
 8008574:	ee18 0a10 	vmov	r0, s16
 8008578:	4621      	mov	r1, r4
 800857a:	f000 fa59 	bl	8008a30 <_Bfree>
 800857e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008580:	2300      	movs	r3, #0
 8008582:	6013      	str	r3, [r2, #0]
 8008584:	2750      	movs	r7, #80	; 0x50
 8008586:	e70c      	b.n	80083a2 <__gethex+0x12a>
 8008588:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800858a:	2b00      	cmp	r3, #0
 800858c:	d1f2      	bne.n	8008574 <__gethex+0x2fc>
 800858e:	e7d8      	b.n	8008542 <__gethex+0x2ca>
 8008590:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008592:	2b00      	cmp	r3, #0
 8008594:	d1d5      	bne.n	8008542 <__gethex+0x2ca>
 8008596:	e7ed      	b.n	8008574 <__gethex+0x2fc>
 8008598:	1e6f      	subs	r7, r5, #1
 800859a:	f1ba 0f00 	cmp.w	sl, #0
 800859e:	d131      	bne.n	8008604 <__gethex+0x38c>
 80085a0:	b127      	cbz	r7, 80085ac <__gethex+0x334>
 80085a2:	4639      	mov	r1, r7
 80085a4:	4620      	mov	r0, r4
 80085a6:	f000 fea3 	bl	80092f0 <__any_on>
 80085aa:	4682      	mov	sl, r0
 80085ac:	117b      	asrs	r3, r7, #5
 80085ae:	2101      	movs	r1, #1
 80085b0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80085b4:	f007 071f 	and.w	r7, r7, #31
 80085b8:	fa01 f707 	lsl.w	r7, r1, r7
 80085bc:	421f      	tst	r7, r3
 80085be:	4629      	mov	r1, r5
 80085c0:	4620      	mov	r0, r4
 80085c2:	bf18      	it	ne
 80085c4:	f04a 0a02 	orrne.w	sl, sl, #2
 80085c8:	1b76      	subs	r6, r6, r5
 80085ca:	f7ff fdee 	bl	80081aa <rshift>
 80085ce:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80085d2:	2702      	movs	r7, #2
 80085d4:	f1ba 0f00 	cmp.w	sl, #0
 80085d8:	d048      	beq.n	800866c <__gethex+0x3f4>
 80085da:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80085de:	2b02      	cmp	r3, #2
 80085e0:	d015      	beq.n	800860e <__gethex+0x396>
 80085e2:	2b03      	cmp	r3, #3
 80085e4:	d017      	beq.n	8008616 <__gethex+0x39e>
 80085e6:	2b01      	cmp	r3, #1
 80085e8:	d109      	bne.n	80085fe <__gethex+0x386>
 80085ea:	f01a 0f02 	tst.w	sl, #2
 80085ee:	d006      	beq.n	80085fe <__gethex+0x386>
 80085f0:	f8d9 0000 	ldr.w	r0, [r9]
 80085f4:	ea4a 0a00 	orr.w	sl, sl, r0
 80085f8:	f01a 0f01 	tst.w	sl, #1
 80085fc:	d10e      	bne.n	800861c <__gethex+0x3a4>
 80085fe:	f047 0710 	orr.w	r7, r7, #16
 8008602:	e033      	b.n	800866c <__gethex+0x3f4>
 8008604:	f04f 0a01 	mov.w	sl, #1
 8008608:	e7d0      	b.n	80085ac <__gethex+0x334>
 800860a:	2701      	movs	r7, #1
 800860c:	e7e2      	b.n	80085d4 <__gethex+0x35c>
 800860e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008610:	f1c3 0301 	rsb	r3, r3, #1
 8008614:	9315      	str	r3, [sp, #84]	; 0x54
 8008616:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008618:	2b00      	cmp	r3, #0
 800861a:	d0f0      	beq.n	80085fe <__gethex+0x386>
 800861c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008620:	f104 0314 	add.w	r3, r4, #20
 8008624:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008628:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800862c:	f04f 0c00 	mov.w	ip, #0
 8008630:	4618      	mov	r0, r3
 8008632:	f853 2b04 	ldr.w	r2, [r3], #4
 8008636:	f1b2 3fff 	cmp.w	r2, #4294967295
 800863a:	d01c      	beq.n	8008676 <__gethex+0x3fe>
 800863c:	3201      	adds	r2, #1
 800863e:	6002      	str	r2, [r0, #0]
 8008640:	2f02      	cmp	r7, #2
 8008642:	f104 0314 	add.w	r3, r4, #20
 8008646:	d13f      	bne.n	80086c8 <__gethex+0x450>
 8008648:	f8d8 2000 	ldr.w	r2, [r8]
 800864c:	3a01      	subs	r2, #1
 800864e:	42b2      	cmp	r2, r6
 8008650:	d10a      	bne.n	8008668 <__gethex+0x3f0>
 8008652:	1171      	asrs	r1, r6, #5
 8008654:	2201      	movs	r2, #1
 8008656:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800865a:	f006 061f 	and.w	r6, r6, #31
 800865e:	fa02 f606 	lsl.w	r6, r2, r6
 8008662:	421e      	tst	r6, r3
 8008664:	bf18      	it	ne
 8008666:	4617      	movne	r7, r2
 8008668:	f047 0720 	orr.w	r7, r7, #32
 800866c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800866e:	601c      	str	r4, [r3, #0]
 8008670:	9b04      	ldr	r3, [sp, #16]
 8008672:	601d      	str	r5, [r3, #0]
 8008674:	e695      	b.n	80083a2 <__gethex+0x12a>
 8008676:	4299      	cmp	r1, r3
 8008678:	f843 cc04 	str.w	ip, [r3, #-4]
 800867c:	d8d8      	bhi.n	8008630 <__gethex+0x3b8>
 800867e:	68a3      	ldr	r3, [r4, #8]
 8008680:	459b      	cmp	fp, r3
 8008682:	db19      	blt.n	80086b8 <__gethex+0x440>
 8008684:	6861      	ldr	r1, [r4, #4]
 8008686:	ee18 0a10 	vmov	r0, s16
 800868a:	3101      	adds	r1, #1
 800868c:	f000 f990 	bl	80089b0 <_Balloc>
 8008690:	4681      	mov	r9, r0
 8008692:	b918      	cbnz	r0, 800869c <__gethex+0x424>
 8008694:	4b1a      	ldr	r3, [pc, #104]	; (8008700 <__gethex+0x488>)
 8008696:	4602      	mov	r2, r0
 8008698:	2184      	movs	r1, #132	; 0x84
 800869a:	e6a8      	b.n	80083ee <__gethex+0x176>
 800869c:	6922      	ldr	r2, [r4, #16]
 800869e:	3202      	adds	r2, #2
 80086a0:	f104 010c 	add.w	r1, r4, #12
 80086a4:	0092      	lsls	r2, r2, #2
 80086a6:	300c      	adds	r0, #12
 80086a8:	f000 f974 	bl	8008994 <memcpy>
 80086ac:	4621      	mov	r1, r4
 80086ae:	ee18 0a10 	vmov	r0, s16
 80086b2:	f000 f9bd 	bl	8008a30 <_Bfree>
 80086b6:	464c      	mov	r4, r9
 80086b8:	6923      	ldr	r3, [r4, #16]
 80086ba:	1c5a      	adds	r2, r3, #1
 80086bc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80086c0:	6122      	str	r2, [r4, #16]
 80086c2:	2201      	movs	r2, #1
 80086c4:	615a      	str	r2, [r3, #20]
 80086c6:	e7bb      	b.n	8008640 <__gethex+0x3c8>
 80086c8:	6922      	ldr	r2, [r4, #16]
 80086ca:	455a      	cmp	r2, fp
 80086cc:	dd0b      	ble.n	80086e6 <__gethex+0x46e>
 80086ce:	2101      	movs	r1, #1
 80086d0:	4620      	mov	r0, r4
 80086d2:	f7ff fd6a 	bl	80081aa <rshift>
 80086d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80086da:	3501      	adds	r5, #1
 80086dc:	42ab      	cmp	r3, r5
 80086de:	f6ff aed0 	blt.w	8008482 <__gethex+0x20a>
 80086e2:	2701      	movs	r7, #1
 80086e4:	e7c0      	b.n	8008668 <__gethex+0x3f0>
 80086e6:	f016 061f 	ands.w	r6, r6, #31
 80086ea:	d0fa      	beq.n	80086e2 <__gethex+0x46a>
 80086ec:	4453      	add	r3, sl
 80086ee:	f1c6 0620 	rsb	r6, r6, #32
 80086f2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80086f6:	f000 fa4d 	bl	8008b94 <__hi0bits>
 80086fa:	42b0      	cmp	r0, r6
 80086fc:	dbe7      	blt.n	80086ce <__gethex+0x456>
 80086fe:	e7f0      	b.n	80086e2 <__gethex+0x46a>
 8008700:	0800a080 	.word	0x0800a080

08008704 <L_shift>:
 8008704:	f1c2 0208 	rsb	r2, r2, #8
 8008708:	0092      	lsls	r2, r2, #2
 800870a:	b570      	push	{r4, r5, r6, lr}
 800870c:	f1c2 0620 	rsb	r6, r2, #32
 8008710:	6843      	ldr	r3, [r0, #4]
 8008712:	6804      	ldr	r4, [r0, #0]
 8008714:	fa03 f506 	lsl.w	r5, r3, r6
 8008718:	432c      	orrs	r4, r5
 800871a:	40d3      	lsrs	r3, r2
 800871c:	6004      	str	r4, [r0, #0]
 800871e:	f840 3f04 	str.w	r3, [r0, #4]!
 8008722:	4288      	cmp	r0, r1
 8008724:	d3f4      	bcc.n	8008710 <L_shift+0xc>
 8008726:	bd70      	pop	{r4, r5, r6, pc}

08008728 <__match>:
 8008728:	b530      	push	{r4, r5, lr}
 800872a:	6803      	ldr	r3, [r0, #0]
 800872c:	3301      	adds	r3, #1
 800872e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008732:	b914      	cbnz	r4, 800873a <__match+0x12>
 8008734:	6003      	str	r3, [r0, #0]
 8008736:	2001      	movs	r0, #1
 8008738:	bd30      	pop	{r4, r5, pc}
 800873a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800873e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008742:	2d19      	cmp	r5, #25
 8008744:	bf98      	it	ls
 8008746:	3220      	addls	r2, #32
 8008748:	42a2      	cmp	r2, r4
 800874a:	d0f0      	beq.n	800872e <__match+0x6>
 800874c:	2000      	movs	r0, #0
 800874e:	e7f3      	b.n	8008738 <__match+0x10>

08008750 <__hexnan>:
 8008750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008754:	680b      	ldr	r3, [r1, #0]
 8008756:	115e      	asrs	r6, r3, #5
 8008758:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800875c:	f013 031f 	ands.w	r3, r3, #31
 8008760:	b087      	sub	sp, #28
 8008762:	bf18      	it	ne
 8008764:	3604      	addne	r6, #4
 8008766:	2500      	movs	r5, #0
 8008768:	1f37      	subs	r7, r6, #4
 800876a:	4690      	mov	r8, r2
 800876c:	6802      	ldr	r2, [r0, #0]
 800876e:	9301      	str	r3, [sp, #4]
 8008770:	4682      	mov	sl, r0
 8008772:	f846 5c04 	str.w	r5, [r6, #-4]
 8008776:	46b9      	mov	r9, r7
 8008778:	463c      	mov	r4, r7
 800877a:	9502      	str	r5, [sp, #8]
 800877c:	46ab      	mov	fp, r5
 800877e:	7851      	ldrb	r1, [r2, #1]
 8008780:	1c53      	adds	r3, r2, #1
 8008782:	9303      	str	r3, [sp, #12]
 8008784:	b341      	cbz	r1, 80087d8 <__hexnan+0x88>
 8008786:	4608      	mov	r0, r1
 8008788:	9205      	str	r2, [sp, #20]
 800878a:	9104      	str	r1, [sp, #16]
 800878c:	f7ff fd5f 	bl	800824e <__hexdig_fun>
 8008790:	2800      	cmp	r0, #0
 8008792:	d14f      	bne.n	8008834 <__hexnan+0xe4>
 8008794:	9904      	ldr	r1, [sp, #16]
 8008796:	9a05      	ldr	r2, [sp, #20]
 8008798:	2920      	cmp	r1, #32
 800879a:	d818      	bhi.n	80087ce <__hexnan+0x7e>
 800879c:	9b02      	ldr	r3, [sp, #8]
 800879e:	459b      	cmp	fp, r3
 80087a0:	dd13      	ble.n	80087ca <__hexnan+0x7a>
 80087a2:	454c      	cmp	r4, r9
 80087a4:	d206      	bcs.n	80087b4 <__hexnan+0x64>
 80087a6:	2d07      	cmp	r5, #7
 80087a8:	dc04      	bgt.n	80087b4 <__hexnan+0x64>
 80087aa:	462a      	mov	r2, r5
 80087ac:	4649      	mov	r1, r9
 80087ae:	4620      	mov	r0, r4
 80087b0:	f7ff ffa8 	bl	8008704 <L_shift>
 80087b4:	4544      	cmp	r4, r8
 80087b6:	d950      	bls.n	800885a <__hexnan+0x10a>
 80087b8:	2300      	movs	r3, #0
 80087ba:	f1a4 0904 	sub.w	r9, r4, #4
 80087be:	f844 3c04 	str.w	r3, [r4, #-4]
 80087c2:	f8cd b008 	str.w	fp, [sp, #8]
 80087c6:	464c      	mov	r4, r9
 80087c8:	461d      	mov	r5, r3
 80087ca:	9a03      	ldr	r2, [sp, #12]
 80087cc:	e7d7      	b.n	800877e <__hexnan+0x2e>
 80087ce:	2929      	cmp	r1, #41	; 0x29
 80087d0:	d156      	bne.n	8008880 <__hexnan+0x130>
 80087d2:	3202      	adds	r2, #2
 80087d4:	f8ca 2000 	str.w	r2, [sl]
 80087d8:	f1bb 0f00 	cmp.w	fp, #0
 80087dc:	d050      	beq.n	8008880 <__hexnan+0x130>
 80087de:	454c      	cmp	r4, r9
 80087e0:	d206      	bcs.n	80087f0 <__hexnan+0xa0>
 80087e2:	2d07      	cmp	r5, #7
 80087e4:	dc04      	bgt.n	80087f0 <__hexnan+0xa0>
 80087e6:	462a      	mov	r2, r5
 80087e8:	4649      	mov	r1, r9
 80087ea:	4620      	mov	r0, r4
 80087ec:	f7ff ff8a 	bl	8008704 <L_shift>
 80087f0:	4544      	cmp	r4, r8
 80087f2:	d934      	bls.n	800885e <__hexnan+0x10e>
 80087f4:	f1a8 0204 	sub.w	r2, r8, #4
 80087f8:	4623      	mov	r3, r4
 80087fa:	f853 1b04 	ldr.w	r1, [r3], #4
 80087fe:	f842 1f04 	str.w	r1, [r2, #4]!
 8008802:	429f      	cmp	r7, r3
 8008804:	d2f9      	bcs.n	80087fa <__hexnan+0xaa>
 8008806:	1b3b      	subs	r3, r7, r4
 8008808:	f023 0303 	bic.w	r3, r3, #3
 800880c:	3304      	adds	r3, #4
 800880e:	3401      	adds	r4, #1
 8008810:	3e03      	subs	r6, #3
 8008812:	42b4      	cmp	r4, r6
 8008814:	bf88      	it	hi
 8008816:	2304      	movhi	r3, #4
 8008818:	4443      	add	r3, r8
 800881a:	2200      	movs	r2, #0
 800881c:	f843 2b04 	str.w	r2, [r3], #4
 8008820:	429f      	cmp	r7, r3
 8008822:	d2fb      	bcs.n	800881c <__hexnan+0xcc>
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	b91b      	cbnz	r3, 8008830 <__hexnan+0xe0>
 8008828:	4547      	cmp	r7, r8
 800882a:	d127      	bne.n	800887c <__hexnan+0x12c>
 800882c:	2301      	movs	r3, #1
 800882e:	603b      	str	r3, [r7, #0]
 8008830:	2005      	movs	r0, #5
 8008832:	e026      	b.n	8008882 <__hexnan+0x132>
 8008834:	3501      	adds	r5, #1
 8008836:	2d08      	cmp	r5, #8
 8008838:	f10b 0b01 	add.w	fp, fp, #1
 800883c:	dd06      	ble.n	800884c <__hexnan+0xfc>
 800883e:	4544      	cmp	r4, r8
 8008840:	d9c3      	bls.n	80087ca <__hexnan+0x7a>
 8008842:	2300      	movs	r3, #0
 8008844:	f844 3c04 	str.w	r3, [r4, #-4]
 8008848:	2501      	movs	r5, #1
 800884a:	3c04      	subs	r4, #4
 800884c:	6822      	ldr	r2, [r4, #0]
 800884e:	f000 000f 	and.w	r0, r0, #15
 8008852:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8008856:	6022      	str	r2, [r4, #0]
 8008858:	e7b7      	b.n	80087ca <__hexnan+0x7a>
 800885a:	2508      	movs	r5, #8
 800885c:	e7b5      	b.n	80087ca <__hexnan+0x7a>
 800885e:	9b01      	ldr	r3, [sp, #4]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d0df      	beq.n	8008824 <__hexnan+0xd4>
 8008864:	f04f 32ff 	mov.w	r2, #4294967295
 8008868:	f1c3 0320 	rsb	r3, r3, #32
 800886c:	fa22 f303 	lsr.w	r3, r2, r3
 8008870:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008874:	401a      	ands	r2, r3
 8008876:	f846 2c04 	str.w	r2, [r6, #-4]
 800887a:	e7d3      	b.n	8008824 <__hexnan+0xd4>
 800887c:	3f04      	subs	r7, #4
 800887e:	e7d1      	b.n	8008824 <__hexnan+0xd4>
 8008880:	2004      	movs	r0, #4
 8008882:	b007      	add	sp, #28
 8008884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008888 <_localeconv_r>:
 8008888:	4800      	ldr	r0, [pc, #0]	; (800888c <_localeconv_r+0x4>)
 800888a:	4770      	bx	lr
 800888c:	20000164 	.word	0x20000164

08008890 <__retarget_lock_init_recursive>:
 8008890:	4770      	bx	lr

08008892 <__retarget_lock_acquire_recursive>:
 8008892:	4770      	bx	lr

08008894 <__retarget_lock_release_recursive>:
 8008894:	4770      	bx	lr

08008896 <__swhatbuf_r>:
 8008896:	b570      	push	{r4, r5, r6, lr}
 8008898:	460e      	mov	r6, r1
 800889a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800889e:	2900      	cmp	r1, #0
 80088a0:	b096      	sub	sp, #88	; 0x58
 80088a2:	4614      	mov	r4, r2
 80088a4:	461d      	mov	r5, r3
 80088a6:	da08      	bge.n	80088ba <__swhatbuf_r+0x24>
 80088a8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80088ac:	2200      	movs	r2, #0
 80088ae:	602a      	str	r2, [r5, #0]
 80088b0:	061a      	lsls	r2, r3, #24
 80088b2:	d410      	bmi.n	80088d6 <__swhatbuf_r+0x40>
 80088b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80088b8:	e00e      	b.n	80088d8 <__swhatbuf_r+0x42>
 80088ba:	466a      	mov	r2, sp
 80088bc:	f001 f9b6 	bl	8009c2c <_fstat_r>
 80088c0:	2800      	cmp	r0, #0
 80088c2:	dbf1      	blt.n	80088a8 <__swhatbuf_r+0x12>
 80088c4:	9a01      	ldr	r2, [sp, #4]
 80088c6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80088ca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80088ce:	425a      	negs	r2, r3
 80088d0:	415a      	adcs	r2, r3
 80088d2:	602a      	str	r2, [r5, #0]
 80088d4:	e7ee      	b.n	80088b4 <__swhatbuf_r+0x1e>
 80088d6:	2340      	movs	r3, #64	; 0x40
 80088d8:	2000      	movs	r0, #0
 80088da:	6023      	str	r3, [r4, #0]
 80088dc:	b016      	add	sp, #88	; 0x58
 80088de:	bd70      	pop	{r4, r5, r6, pc}

080088e0 <__smakebuf_r>:
 80088e0:	898b      	ldrh	r3, [r1, #12]
 80088e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80088e4:	079d      	lsls	r5, r3, #30
 80088e6:	4606      	mov	r6, r0
 80088e8:	460c      	mov	r4, r1
 80088ea:	d507      	bpl.n	80088fc <__smakebuf_r+0x1c>
 80088ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80088f0:	6023      	str	r3, [r4, #0]
 80088f2:	6123      	str	r3, [r4, #16]
 80088f4:	2301      	movs	r3, #1
 80088f6:	6163      	str	r3, [r4, #20]
 80088f8:	b002      	add	sp, #8
 80088fa:	bd70      	pop	{r4, r5, r6, pc}
 80088fc:	ab01      	add	r3, sp, #4
 80088fe:	466a      	mov	r2, sp
 8008900:	f7ff ffc9 	bl	8008896 <__swhatbuf_r>
 8008904:	9900      	ldr	r1, [sp, #0]
 8008906:	4605      	mov	r5, r0
 8008908:	4630      	mov	r0, r6
 800890a:	f000 fd95 	bl	8009438 <_malloc_r>
 800890e:	b948      	cbnz	r0, 8008924 <__smakebuf_r+0x44>
 8008910:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008914:	059a      	lsls	r2, r3, #22
 8008916:	d4ef      	bmi.n	80088f8 <__smakebuf_r+0x18>
 8008918:	f023 0303 	bic.w	r3, r3, #3
 800891c:	f043 0302 	orr.w	r3, r3, #2
 8008920:	81a3      	strh	r3, [r4, #12]
 8008922:	e7e3      	b.n	80088ec <__smakebuf_r+0xc>
 8008924:	4b0d      	ldr	r3, [pc, #52]	; (800895c <__smakebuf_r+0x7c>)
 8008926:	62b3      	str	r3, [r6, #40]	; 0x28
 8008928:	89a3      	ldrh	r3, [r4, #12]
 800892a:	6020      	str	r0, [r4, #0]
 800892c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008930:	81a3      	strh	r3, [r4, #12]
 8008932:	9b00      	ldr	r3, [sp, #0]
 8008934:	6163      	str	r3, [r4, #20]
 8008936:	9b01      	ldr	r3, [sp, #4]
 8008938:	6120      	str	r0, [r4, #16]
 800893a:	b15b      	cbz	r3, 8008954 <__smakebuf_r+0x74>
 800893c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008940:	4630      	mov	r0, r6
 8008942:	f001 f985 	bl	8009c50 <_isatty_r>
 8008946:	b128      	cbz	r0, 8008954 <__smakebuf_r+0x74>
 8008948:	89a3      	ldrh	r3, [r4, #12]
 800894a:	f023 0303 	bic.w	r3, r3, #3
 800894e:	f043 0301 	orr.w	r3, r3, #1
 8008952:	81a3      	strh	r3, [r4, #12]
 8008954:	89a0      	ldrh	r0, [r4, #12]
 8008956:	4305      	orrs	r5, r0
 8008958:	81a5      	strh	r5, [r4, #12]
 800895a:	e7cd      	b.n	80088f8 <__smakebuf_r+0x18>
 800895c:	08008009 	.word	0x08008009

08008960 <malloc>:
 8008960:	4b02      	ldr	r3, [pc, #8]	; (800896c <malloc+0xc>)
 8008962:	4601      	mov	r1, r0
 8008964:	6818      	ldr	r0, [r3, #0]
 8008966:	f000 bd67 	b.w	8009438 <_malloc_r>
 800896a:	bf00      	nop
 800896c:	2000000c 	.word	0x2000000c

08008970 <__ascii_mbtowc>:
 8008970:	b082      	sub	sp, #8
 8008972:	b901      	cbnz	r1, 8008976 <__ascii_mbtowc+0x6>
 8008974:	a901      	add	r1, sp, #4
 8008976:	b142      	cbz	r2, 800898a <__ascii_mbtowc+0x1a>
 8008978:	b14b      	cbz	r3, 800898e <__ascii_mbtowc+0x1e>
 800897a:	7813      	ldrb	r3, [r2, #0]
 800897c:	600b      	str	r3, [r1, #0]
 800897e:	7812      	ldrb	r2, [r2, #0]
 8008980:	1e10      	subs	r0, r2, #0
 8008982:	bf18      	it	ne
 8008984:	2001      	movne	r0, #1
 8008986:	b002      	add	sp, #8
 8008988:	4770      	bx	lr
 800898a:	4610      	mov	r0, r2
 800898c:	e7fb      	b.n	8008986 <__ascii_mbtowc+0x16>
 800898e:	f06f 0001 	mvn.w	r0, #1
 8008992:	e7f8      	b.n	8008986 <__ascii_mbtowc+0x16>

08008994 <memcpy>:
 8008994:	440a      	add	r2, r1
 8008996:	4291      	cmp	r1, r2
 8008998:	f100 33ff 	add.w	r3, r0, #4294967295
 800899c:	d100      	bne.n	80089a0 <memcpy+0xc>
 800899e:	4770      	bx	lr
 80089a0:	b510      	push	{r4, lr}
 80089a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80089aa:	4291      	cmp	r1, r2
 80089ac:	d1f9      	bne.n	80089a2 <memcpy+0xe>
 80089ae:	bd10      	pop	{r4, pc}

080089b0 <_Balloc>:
 80089b0:	b570      	push	{r4, r5, r6, lr}
 80089b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80089b4:	4604      	mov	r4, r0
 80089b6:	460d      	mov	r5, r1
 80089b8:	b976      	cbnz	r6, 80089d8 <_Balloc+0x28>
 80089ba:	2010      	movs	r0, #16
 80089bc:	f7ff ffd0 	bl	8008960 <malloc>
 80089c0:	4602      	mov	r2, r0
 80089c2:	6260      	str	r0, [r4, #36]	; 0x24
 80089c4:	b920      	cbnz	r0, 80089d0 <_Balloc+0x20>
 80089c6:	4b18      	ldr	r3, [pc, #96]	; (8008a28 <_Balloc+0x78>)
 80089c8:	4818      	ldr	r0, [pc, #96]	; (8008a2c <_Balloc+0x7c>)
 80089ca:	2166      	movs	r1, #102	; 0x66
 80089cc:	f001 f8ee 	bl	8009bac <__assert_func>
 80089d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80089d4:	6006      	str	r6, [r0, #0]
 80089d6:	60c6      	str	r6, [r0, #12]
 80089d8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80089da:	68f3      	ldr	r3, [r6, #12]
 80089dc:	b183      	cbz	r3, 8008a00 <_Balloc+0x50>
 80089de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80089e0:	68db      	ldr	r3, [r3, #12]
 80089e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80089e6:	b9b8      	cbnz	r0, 8008a18 <_Balloc+0x68>
 80089e8:	2101      	movs	r1, #1
 80089ea:	fa01 f605 	lsl.w	r6, r1, r5
 80089ee:	1d72      	adds	r2, r6, #5
 80089f0:	0092      	lsls	r2, r2, #2
 80089f2:	4620      	mov	r0, r4
 80089f4:	f000 fc9d 	bl	8009332 <_calloc_r>
 80089f8:	b160      	cbz	r0, 8008a14 <_Balloc+0x64>
 80089fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80089fe:	e00e      	b.n	8008a1e <_Balloc+0x6e>
 8008a00:	2221      	movs	r2, #33	; 0x21
 8008a02:	2104      	movs	r1, #4
 8008a04:	4620      	mov	r0, r4
 8008a06:	f000 fc94 	bl	8009332 <_calloc_r>
 8008a0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a0c:	60f0      	str	r0, [r6, #12]
 8008a0e:	68db      	ldr	r3, [r3, #12]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d1e4      	bne.n	80089de <_Balloc+0x2e>
 8008a14:	2000      	movs	r0, #0
 8008a16:	bd70      	pop	{r4, r5, r6, pc}
 8008a18:	6802      	ldr	r2, [r0, #0]
 8008a1a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008a1e:	2300      	movs	r3, #0
 8008a20:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008a24:	e7f7      	b.n	8008a16 <_Balloc+0x66>
 8008a26:	bf00      	nop
 8008a28:	0800a00e 	.word	0x0800a00e
 8008a2c:	0800a170 	.word	0x0800a170

08008a30 <_Bfree>:
 8008a30:	b570      	push	{r4, r5, r6, lr}
 8008a32:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008a34:	4605      	mov	r5, r0
 8008a36:	460c      	mov	r4, r1
 8008a38:	b976      	cbnz	r6, 8008a58 <_Bfree+0x28>
 8008a3a:	2010      	movs	r0, #16
 8008a3c:	f7ff ff90 	bl	8008960 <malloc>
 8008a40:	4602      	mov	r2, r0
 8008a42:	6268      	str	r0, [r5, #36]	; 0x24
 8008a44:	b920      	cbnz	r0, 8008a50 <_Bfree+0x20>
 8008a46:	4b09      	ldr	r3, [pc, #36]	; (8008a6c <_Bfree+0x3c>)
 8008a48:	4809      	ldr	r0, [pc, #36]	; (8008a70 <_Bfree+0x40>)
 8008a4a:	218a      	movs	r1, #138	; 0x8a
 8008a4c:	f001 f8ae 	bl	8009bac <__assert_func>
 8008a50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008a54:	6006      	str	r6, [r0, #0]
 8008a56:	60c6      	str	r6, [r0, #12]
 8008a58:	b13c      	cbz	r4, 8008a6a <_Bfree+0x3a>
 8008a5a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008a5c:	6862      	ldr	r2, [r4, #4]
 8008a5e:	68db      	ldr	r3, [r3, #12]
 8008a60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008a64:	6021      	str	r1, [r4, #0]
 8008a66:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008a6a:	bd70      	pop	{r4, r5, r6, pc}
 8008a6c:	0800a00e 	.word	0x0800a00e
 8008a70:	0800a170 	.word	0x0800a170

08008a74 <__multadd>:
 8008a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a78:	690d      	ldr	r5, [r1, #16]
 8008a7a:	4607      	mov	r7, r0
 8008a7c:	460c      	mov	r4, r1
 8008a7e:	461e      	mov	r6, r3
 8008a80:	f101 0c14 	add.w	ip, r1, #20
 8008a84:	2000      	movs	r0, #0
 8008a86:	f8dc 3000 	ldr.w	r3, [ip]
 8008a8a:	b299      	uxth	r1, r3
 8008a8c:	fb02 6101 	mla	r1, r2, r1, r6
 8008a90:	0c1e      	lsrs	r6, r3, #16
 8008a92:	0c0b      	lsrs	r3, r1, #16
 8008a94:	fb02 3306 	mla	r3, r2, r6, r3
 8008a98:	b289      	uxth	r1, r1
 8008a9a:	3001      	adds	r0, #1
 8008a9c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008aa0:	4285      	cmp	r5, r0
 8008aa2:	f84c 1b04 	str.w	r1, [ip], #4
 8008aa6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008aaa:	dcec      	bgt.n	8008a86 <__multadd+0x12>
 8008aac:	b30e      	cbz	r6, 8008af2 <__multadd+0x7e>
 8008aae:	68a3      	ldr	r3, [r4, #8]
 8008ab0:	42ab      	cmp	r3, r5
 8008ab2:	dc19      	bgt.n	8008ae8 <__multadd+0x74>
 8008ab4:	6861      	ldr	r1, [r4, #4]
 8008ab6:	4638      	mov	r0, r7
 8008ab8:	3101      	adds	r1, #1
 8008aba:	f7ff ff79 	bl	80089b0 <_Balloc>
 8008abe:	4680      	mov	r8, r0
 8008ac0:	b928      	cbnz	r0, 8008ace <__multadd+0x5a>
 8008ac2:	4602      	mov	r2, r0
 8008ac4:	4b0c      	ldr	r3, [pc, #48]	; (8008af8 <__multadd+0x84>)
 8008ac6:	480d      	ldr	r0, [pc, #52]	; (8008afc <__multadd+0x88>)
 8008ac8:	21b5      	movs	r1, #181	; 0xb5
 8008aca:	f001 f86f 	bl	8009bac <__assert_func>
 8008ace:	6922      	ldr	r2, [r4, #16]
 8008ad0:	3202      	adds	r2, #2
 8008ad2:	f104 010c 	add.w	r1, r4, #12
 8008ad6:	0092      	lsls	r2, r2, #2
 8008ad8:	300c      	adds	r0, #12
 8008ada:	f7ff ff5b 	bl	8008994 <memcpy>
 8008ade:	4621      	mov	r1, r4
 8008ae0:	4638      	mov	r0, r7
 8008ae2:	f7ff ffa5 	bl	8008a30 <_Bfree>
 8008ae6:	4644      	mov	r4, r8
 8008ae8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008aec:	3501      	adds	r5, #1
 8008aee:	615e      	str	r6, [r3, #20]
 8008af0:	6125      	str	r5, [r4, #16]
 8008af2:	4620      	mov	r0, r4
 8008af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008af8:	0800a080 	.word	0x0800a080
 8008afc:	0800a170 	.word	0x0800a170

08008b00 <__s2b>:
 8008b00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b04:	460c      	mov	r4, r1
 8008b06:	4615      	mov	r5, r2
 8008b08:	461f      	mov	r7, r3
 8008b0a:	2209      	movs	r2, #9
 8008b0c:	3308      	adds	r3, #8
 8008b0e:	4606      	mov	r6, r0
 8008b10:	fb93 f3f2 	sdiv	r3, r3, r2
 8008b14:	2100      	movs	r1, #0
 8008b16:	2201      	movs	r2, #1
 8008b18:	429a      	cmp	r2, r3
 8008b1a:	db09      	blt.n	8008b30 <__s2b+0x30>
 8008b1c:	4630      	mov	r0, r6
 8008b1e:	f7ff ff47 	bl	80089b0 <_Balloc>
 8008b22:	b940      	cbnz	r0, 8008b36 <__s2b+0x36>
 8008b24:	4602      	mov	r2, r0
 8008b26:	4b19      	ldr	r3, [pc, #100]	; (8008b8c <__s2b+0x8c>)
 8008b28:	4819      	ldr	r0, [pc, #100]	; (8008b90 <__s2b+0x90>)
 8008b2a:	21ce      	movs	r1, #206	; 0xce
 8008b2c:	f001 f83e 	bl	8009bac <__assert_func>
 8008b30:	0052      	lsls	r2, r2, #1
 8008b32:	3101      	adds	r1, #1
 8008b34:	e7f0      	b.n	8008b18 <__s2b+0x18>
 8008b36:	9b08      	ldr	r3, [sp, #32]
 8008b38:	6143      	str	r3, [r0, #20]
 8008b3a:	2d09      	cmp	r5, #9
 8008b3c:	f04f 0301 	mov.w	r3, #1
 8008b40:	6103      	str	r3, [r0, #16]
 8008b42:	dd16      	ble.n	8008b72 <__s2b+0x72>
 8008b44:	f104 0909 	add.w	r9, r4, #9
 8008b48:	46c8      	mov	r8, r9
 8008b4a:	442c      	add	r4, r5
 8008b4c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008b50:	4601      	mov	r1, r0
 8008b52:	3b30      	subs	r3, #48	; 0x30
 8008b54:	220a      	movs	r2, #10
 8008b56:	4630      	mov	r0, r6
 8008b58:	f7ff ff8c 	bl	8008a74 <__multadd>
 8008b5c:	45a0      	cmp	r8, r4
 8008b5e:	d1f5      	bne.n	8008b4c <__s2b+0x4c>
 8008b60:	f1a5 0408 	sub.w	r4, r5, #8
 8008b64:	444c      	add	r4, r9
 8008b66:	1b2d      	subs	r5, r5, r4
 8008b68:	1963      	adds	r3, r4, r5
 8008b6a:	42bb      	cmp	r3, r7
 8008b6c:	db04      	blt.n	8008b78 <__s2b+0x78>
 8008b6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b72:	340a      	adds	r4, #10
 8008b74:	2509      	movs	r5, #9
 8008b76:	e7f6      	b.n	8008b66 <__s2b+0x66>
 8008b78:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008b7c:	4601      	mov	r1, r0
 8008b7e:	3b30      	subs	r3, #48	; 0x30
 8008b80:	220a      	movs	r2, #10
 8008b82:	4630      	mov	r0, r6
 8008b84:	f7ff ff76 	bl	8008a74 <__multadd>
 8008b88:	e7ee      	b.n	8008b68 <__s2b+0x68>
 8008b8a:	bf00      	nop
 8008b8c:	0800a080 	.word	0x0800a080
 8008b90:	0800a170 	.word	0x0800a170

08008b94 <__hi0bits>:
 8008b94:	0c03      	lsrs	r3, r0, #16
 8008b96:	041b      	lsls	r3, r3, #16
 8008b98:	b9d3      	cbnz	r3, 8008bd0 <__hi0bits+0x3c>
 8008b9a:	0400      	lsls	r0, r0, #16
 8008b9c:	2310      	movs	r3, #16
 8008b9e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008ba2:	bf04      	itt	eq
 8008ba4:	0200      	lsleq	r0, r0, #8
 8008ba6:	3308      	addeq	r3, #8
 8008ba8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008bac:	bf04      	itt	eq
 8008bae:	0100      	lsleq	r0, r0, #4
 8008bb0:	3304      	addeq	r3, #4
 8008bb2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008bb6:	bf04      	itt	eq
 8008bb8:	0080      	lsleq	r0, r0, #2
 8008bba:	3302      	addeq	r3, #2
 8008bbc:	2800      	cmp	r0, #0
 8008bbe:	db05      	blt.n	8008bcc <__hi0bits+0x38>
 8008bc0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008bc4:	f103 0301 	add.w	r3, r3, #1
 8008bc8:	bf08      	it	eq
 8008bca:	2320      	moveq	r3, #32
 8008bcc:	4618      	mov	r0, r3
 8008bce:	4770      	bx	lr
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	e7e4      	b.n	8008b9e <__hi0bits+0xa>

08008bd4 <__lo0bits>:
 8008bd4:	6803      	ldr	r3, [r0, #0]
 8008bd6:	f013 0207 	ands.w	r2, r3, #7
 8008bda:	4601      	mov	r1, r0
 8008bdc:	d00b      	beq.n	8008bf6 <__lo0bits+0x22>
 8008bde:	07da      	lsls	r2, r3, #31
 8008be0:	d423      	bmi.n	8008c2a <__lo0bits+0x56>
 8008be2:	0798      	lsls	r0, r3, #30
 8008be4:	bf49      	itett	mi
 8008be6:	085b      	lsrmi	r3, r3, #1
 8008be8:	089b      	lsrpl	r3, r3, #2
 8008bea:	2001      	movmi	r0, #1
 8008bec:	600b      	strmi	r3, [r1, #0]
 8008bee:	bf5c      	itt	pl
 8008bf0:	600b      	strpl	r3, [r1, #0]
 8008bf2:	2002      	movpl	r0, #2
 8008bf4:	4770      	bx	lr
 8008bf6:	b298      	uxth	r0, r3
 8008bf8:	b9a8      	cbnz	r0, 8008c26 <__lo0bits+0x52>
 8008bfa:	0c1b      	lsrs	r3, r3, #16
 8008bfc:	2010      	movs	r0, #16
 8008bfe:	b2da      	uxtb	r2, r3
 8008c00:	b90a      	cbnz	r2, 8008c06 <__lo0bits+0x32>
 8008c02:	3008      	adds	r0, #8
 8008c04:	0a1b      	lsrs	r3, r3, #8
 8008c06:	071a      	lsls	r2, r3, #28
 8008c08:	bf04      	itt	eq
 8008c0a:	091b      	lsreq	r3, r3, #4
 8008c0c:	3004      	addeq	r0, #4
 8008c0e:	079a      	lsls	r2, r3, #30
 8008c10:	bf04      	itt	eq
 8008c12:	089b      	lsreq	r3, r3, #2
 8008c14:	3002      	addeq	r0, #2
 8008c16:	07da      	lsls	r2, r3, #31
 8008c18:	d403      	bmi.n	8008c22 <__lo0bits+0x4e>
 8008c1a:	085b      	lsrs	r3, r3, #1
 8008c1c:	f100 0001 	add.w	r0, r0, #1
 8008c20:	d005      	beq.n	8008c2e <__lo0bits+0x5a>
 8008c22:	600b      	str	r3, [r1, #0]
 8008c24:	4770      	bx	lr
 8008c26:	4610      	mov	r0, r2
 8008c28:	e7e9      	b.n	8008bfe <__lo0bits+0x2a>
 8008c2a:	2000      	movs	r0, #0
 8008c2c:	4770      	bx	lr
 8008c2e:	2020      	movs	r0, #32
 8008c30:	4770      	bx	lr
	...

08008c34 <__i2b>:
 8008c34:	b510      	push	{r4, lr}
 8008c36:	460c      	mov	r4, r1
 8008c38:	2101      	movs	r1, #1
 8008c3a:	f7ff feb9 	bl	80089b0 <_Balloc>
 8008c3e:	4602      	mov	r2, r0
 8008c40:	b928      	cbnz	r0, 8008c4e <__i2b+0x1a>
 8008c42:	4b05      	ldr	r3, [pc, #20]	; (8008c58 <__i2b+0x24>)
 8008c44:	4805      	ldr	r0, [pc, #20]	; (8008c5c <__i2b+0x28>)
 8008c46:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008c4a:	f000 ffaf 	bl	8009bac <__assert_func>
 8008c4e:	2301      	movs	r3, #1
 8008c50:	6144      	str	r4, [r0, #20]
 8008c52:	6103      	str	r3, [r0, #16]
 8008c54:	bd10      	pop	{r4, pc}
 8008c56:	bf00      	nop
 8008c58:	0800a080 	.word	0x0800a080
 8008c5c:	0800a170 	.word	0x0800a170

08008c60 <__multiply>:
 8008c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c64:	4691      	mov	r9, r2
 8008c66:	690a      	ldr	r2, [r1, #16]
 8008c68:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008c6c:	429a      	cmp	r2, r3
 8008c6e:	bfb8      	it	lt
 8008c70:	460b      	movlt	r3, r1
 8008c72:	460c      	mov	r4, r1
 8008c74:	bfbc      	itt	lt
 8008c76:	464c      	movlt	r4, r9
 8008c78:	4699      	movlt	r9, r3
 8008c7a:	6927      	ldr	r7, [r4, #16]
 8008c7c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008c80:	68a3      	ldr	r3, [r4, #8]
 8008c82:	6861      	ldr	r1, [r4, #4]
 8008c84:	eb07 060a 	add.w	r6, r7, sl
 8008c88:	42b3      	cmp	r3, r6
 8008c8a:	b085      	sub	sp, #20
 8008c8c:	bfb8      	it	lt
 8008c8e:	3101      	addlt	r1, #1
 8008c90:	f7ff fe8e 	bl	80089b0 <_Balloc>
 8008c94:	b930      	cbnz	r0, 8008ca4 <__multiply+0x44>
 8008c96:	4602      	mov	r2, r0
 8008c98:	4b44      	ldr	r3, [pc, #272]	; (8008dac <__multiply+0x14c>)
 8008c9a:	4845      	ldr	r0, [pc, #276]	; (8008db0 <__multiply+0x150>)
 8008c9c:	f240 115d 	movw	r1, #349	; 0x15d
 8008ca0:	f000 ff84 	bl	8009bac <__assert_func>
 8008ca4:	f100 0514 	add.w	r5, r0, #20
 8008ca8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008cac:	462b      	mov	r3, r5
 8008cae:	2200      	movs	r2, #0
 8008cb0:	4543      	cmp	r3, r8
 8008cb2:	d321      	bcc.n	8008cf8 <__multiply+0x98>
 8008cb4:	f104 0314 	add.w	r3, r4, #20
 8008cb8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008cbc:	f109 0314 	add.w	r3, r9, #20
 8008cc0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008cc4:	9202      	str	r2, [sp, #8]
 8008cc6:	1b3a      	subs	r2, r7, r4
 8008cc8:	3a15      	subs	r2, #21
 8008cca:	f022 0203 	bic.w	r2, r2, #3
 8008cce:	3204      	adds	r2, #4
 8008cd0:	f104 0115 	add.w	r1, r4, #21
 8008cd4:	428f      	cmp	r7, r1
 8008cd6:	bf38      	it	cc
 8008cd8:	2204      	movcc	r2, #4
 8008cda:	9201      	str	r2, [sp, #4]
 8008cdc:	9a02      	ldr	r2, [sp, #8]
 8008cde:	9303      	str	r3, [sp, #12]
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	d80c      	bhi.n	8008cfe <__multiply+0x9e>
 8008ce4:	2e00      	cmp	r6, #0
 8008ce6:	dd03      	ble.n	8008cf0 <__multiply+0x90>
 8008ce8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d05a      	beq.n	8008da6 <__multiply+0x146>
 8008cf0:	6106      	str	r6, [r0, #16]
 8008cf2:	b005      	add	sp, #20
 8008cf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cf8:	f843 2b04 	str.w	r2, [r3], #4
 8008cfc:	e7d8      	b.n	8008cb0 <__multiply+0x50>
 8008cfe:	f8b3 a000 	ldrh.w	sl, [r3]
 8008d02:	f1ba 0f00 	cmp.w	sl, #0
 8008d06:	d024      	beq.n	8008d52 <__multiply+0xf2>
 8008d08:	f104 0e14 	add.w	lr, r4, #20
 8008d0c:	46a9      	mov	r9, r5
 8008d0e:	f04f 0c00 	mov.w	ip, #0
 8008d12:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008d16:	f8d9 1000 	ldr.w	r1, [r9]
 8008d1a:	fa1f fb82 	uxth.w	fp, r2
 8008d1e:	b289      	uxth	r1, r1
 8008d20:	fb0a 110b 	mla	r1, sl, fp, r1
 8008d24:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008d28:	f8d9 2000 	ldr.w	r2, [r9]
 8008d2c:	4461      	add	r1, ip
 8008d2e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008d32:	fb0a c20b 	mla	r2, sl, fp, ip
 8008d36:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008d3a:	b289      	uxth	r1, r1
 8008d3c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008d40:	4577      	cmp	r7, lr
 8008d42:	f849 1b04 	str.w	r1, [r9], #4
 8008d46:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008d4a:	d8e2      	bhi.n	8008d12 <__multiply+0xb2>
 8008d4c:	9a01      	ldr	r2, [sp, #4]
 8008d4e:	f845 c002 	str.w	ip, [r5, r2]
 8008d52:	9a03      	ldr	r2, [sp, #12]
 8008d54:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008d58:	3304      	adds	r3, #4
 8008d5a:	f1b9 0f00 	cmp.w	r9, #0
 8008d5e:	d020      	beq.n	8008da2 <__multiply+0x142>
 8008d60:	6829      	ldr	r1, [r5, #0]
 8008d62:	f104 0c14 	add.w	ip, r4, #20
 8008d66:	46ae      	mov	lr, r5
 8008d68:	f04f 0a00 	mov.w	sl, #0
 8008d6c:	f8bc b000 	ldrh.w	fp, [ip]
 8008d70:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008d74:	fb09 220b 	mla	r2, r9, fp, r2
 8008d78:	4492      	add	sl, r2
 8008d7a:	b289      	uxth	r1, r1
 8008d7c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008d80:	f84e 1b04 	str.w	r1, [lr], #4
 8008d84:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008d88:	f8be 1000 	ldrh.w	r1, [lr]
 8008d8c:	0c12      	lsrs	r2, r2, #16
 8008d8e:	fb09 1102 	mla	r1, r9, r2, r1
 8008d92:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008d96:	4567      	cmp	r7, ip
 8008d98:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008d9c:	d8e6      	bhi.n	8008d6c <__multiply+0x10c>
 8008d9e:	9a01      	ldr	r2, [sp, #4]
 8008da0:	50a9      	str	r1, [r5, r2]
 8008da2:	3504      	adds	r5, #4
 8008da4:	e79a      	b.n	8008cdc <__multiply+0x7c>
 8008da6:	3e01      	subs	r6, #1
 8008da8:	e79c      	b.n	8008ce4 <__multiply+0x84>
 8008daa:	bf00      	nop
 8008dac:	0800a080 	.word	0x0800a080
 8008db0:	0800a170 	.word	0x0800a170

08008db4 <__pow5mult>:
 8008db4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008db8:	4615      	mov	r5, r2
 8008dba:	f012 0203 	ands.w	r2, r2, #3
 8008dbe:	4606      	mov	r6, r0
 8008dc0:	460f      	mov	r7, r1
 8008dc2:	d007      	beq.n	8008dd4 <__pow5mult+0x20>
 8008dc4:	4c25      	ldr	r4, [pc, #148]	; (8008e5c <__pow5mult+0xa8>)
 8008dc6:	3a01      	subs	r2, #1
 8008dc8:	2300      	movs	r3, #0
 8008dca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008dce:	f7ff fe51 	bl	8008a74 <__multadd>
 8008dd2:	4607      	mov	r7, r0
 8008dd4:	10ad      	asrs	r5, r5, #2
 8008dd6:	d03d      	beq.n	8008e54 <__pow5mult+0xa0>
 8008dd8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008dda:	b97c      	cbnz	r4, 8008dfc <__pow5mult+0x48>
 8008ddc:	2010      	movs	r0, #16
 8008dde:	f7ff fdbf 	bl	8008960 <malloc>
 8008de2:	4602      	mov	r2, r0
 8008de4:	6270      	str	r0, [r6, #36]	; 0x24
 8008de6:	b928      	cbnz	r0, 8008df4 <__pow5mult+0x40>
 8008de8:	4b1d      	ldr	r3, [pc, #116]	; (8008e60 <__pow5mult+0xac>)
 8008dea:	481e      	ldr	r0, [pc, #120]	; (8008e64 <__pow5mult+0xb0>)
 8008dec:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008df0:	f000 fedc 	bl	8009bac <__assert_func>
 8008df4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008df8:	6004      	str	r4, [r0, #0]
 8008dfa:	60c4      	str	r4, [r0, #12]
 8008dfc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008e00:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008e04:	b94c      	cbnz	r4, 8008e1a <__pow5mult+0x66>
 8008e06:	f240 2171 	movw	r1, #625	; 0x271
 8008e0a:	4630      	mov	r0, r6
 8008e0c:	f7ff ff12 	bl	8008c34 <__i2b>
 8008e10:	2300      	movs	r3, #0
 8008e12:	f8c8 0008 	str.w	r0, [r8, #8]
 8008e16:	4604      	mov	r4, r0
 8008e18:	6003      	str	r3, [r0, #0]
 8008e1a:	f04f 0900 	mov.w	r9, #0
 8008e1e:	07eb      	lsls	r3, r5, #31
 8008e20:	d50a      	bpl.n	8008e38 <__pow5mult+0x84>
 8008e22:	4639      	mov	r1, r7
 8008e24:	4622      	mov	r2, r4
 8008e26:	4630      	mov	r0, r6
 8008e28:	f7ff ff1a 	bl	8008c60 <__multiply>
 8008e2c:	4639      	mov	r1, r7
 8008e2e:	4680      	mov	r8, r0
 8008e30:	4630      	mov	r0, r6
 8008e32:	f7ff fdfd 	bl	8008a30 <_Bfree>
 8008e36:	4647      	mov	r7, r8
 8008e38:	106d      	asrs	r5, r5, #1
 8008e3a:	d00b      	beq.n	8008e54 <__pow5mult+0xa0>
 8008e3c:	6820      	ldr	r0, [r4, #0]
 8008e3e:	b938      	cbnz	r0, 8008e50 <__pow5mult+0x9c>
 8008e40:	4622      	mov	r2, r4
 8008e42:	4621      	mov	r1, r4
 8008e44:	4630      	mov	r0, r6
 8008e46:	f7ff ff0b 	bl	8008c60 <__multiply>
 8008e4a:	6020      	str	r0, [r4, #0]
 8008e4c:	f8c0 9000 	str.w	r9, [r0]
 8008e50:	4604      	mov	r4, r0
 8008e52:	e7e4      	b.n	8008e1e <__pow5mult+0x6a>
 8008e54:	4638      	mov	r0, r7
 8008e56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e5a:	bf00      	nop
 8008e5c:	0800a2c0 	.word	0x0800a2c0
 8008e60:	0800a00e 	.word	0x0800a00e
 8008e64:	0800a170 	.word	0x0800a170

08008e68 <__lshift>:
 8008e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e6c:	460c      	mov	r4, r1
 8008e6e:	6849      	ldr	r1, [r1, #4]
 8008e70:	6923      	ldr	r3, [r4, #16]
 8008e72:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008e76:	68a3      	ldr	r3, [r4, #8]
 8008e78:	4607      	mov	r7, r0
 8008e7a:	4691      	mov	r9, r2
 8008e7c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008e80:	f108 0601 	add.w	r6, r8, #1
 8008e84:	42b3      	cmp	r3, r6
 8008e86:	db0b      	blt.n	8008ea0 <__lshift+0x38>
 8008e88:	4638      	mov	r0, r7
 8008e8a:	f7ff fd91 	bl	80089b0 <_Balloc>
 8008e8e:	4605      	mov	r5, r0
 8008e90:	b948      	cbnz	r0, 8008ea6 <__lshift+0x3e>
 8008e92:	4602      	mov	r2, r0
 8008e94:	4b2a      	ldr	r3, [pc, #168]	; (8008f40 <__lshift+0xd8>)
 8008e96:	482b      	ldr	r0, [pc, #172]	; (8008f44 <__lshift+0xdc>)
 8008e98:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008e9c:	f000 fe86 	bl	8009bac <__assert_func>
 8008ea0:	3101      	adds	r1, #1
 8008ea2:	005b      	lsls	r3, r3, #1
 8008ea4:	e7ee      	b.n	8008e84 <__lshift+0x1c>
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	f100 0114 	add.w	r1, r0, #20
 8008eac:	f100 0210 	add.w	r2, r0, #16
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	4553      	cmp	r3, sl
 8008eb4:	db37      	blt.n	8008f26 <__lshift+0xbe>
 8008eb6:	6920      	ldr	r0, [r4, #16]
 8008eb8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008ebc:	f104 0314 	add.w	r3, r4, #20
 8008ec0:	f019 091f 	ands.w	r9, r9, #31
 8008ec4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008ec8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008ecc:	d02f      	beq.n	8008f2e <__lshift+0xc6>
 8008ece:	f1c9 0e20 	rsb	lr, r9, #32
 8008ed2:	468a      	mov	sl, r1
 8008ed4:	f04f 0c00 	mov.w	ip, #0
 8008ed8:	681a      	ldr	r2, [r3, #0]
 8008eda:	fa02 f209 	lsl.w	r2, r2, r9
 8008ede:	ea42 020c 	orr.w	r2, r2, ip
 8008ee2:	f84a 2b04 	str.w	r2, [sl], #4
 8008ee6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008eea:	4298      	cmp	r0, r3
 8008eec:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008ef0:	d8f2      	bhi.n	8008ed8 <__lshift+0x70>
 8008ef2:	1b03      	subs	r3, r0, r4
 8008ef4:	3b15      	subs	r3, #21
 8008ef6:	f023 0303 	bic.w	r3, r3, #3
 8008efa:	3304      	adds	r3, #4
 8008efc:	f104 0215 	add.w	r2, r4, #21
 8008f00:	4290      	cmp	r0, r2
 8008f02:	bf38      	it	cc
 8008f04:	2304      	movcc	r3, #4
 8008f06:	f841 c003 	str.w	ip, [r1, r3]
 8008f0a:	f1bc 0f00 	cmp.w	ip, #0
 8008f0e:	d001      	beq.n	8008f14 <__lshift+0xac>
 8008f10:	f108 0602 	add.w	r6, r8, #2
 8008f14:	3e01      	subs	r6, #1
 8008f16:	4638      	mov	r0, r7
 8008f18:	612e      	str	r6, [r5, #16]
 8008f1a:	4621      	mov	r1, r4
 8008f1c:	f7ff fd88 	bl	8008a30 <_Bfree>
 8008f20:	4628      	mov	r0, r5
 8008f22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f26:	f842 0f04 	str.w	r0, [r2, #4]!
 8008f2a:	3301      	adds	r3, #1
 8008f2c:	e7c1      	b.n	8008eb2 <__lshift+0x4a>
 8008f2e:	3904      	subs	r1, #4
 8008f30:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f34:	f841 2f04 	str.w	r2, [r1, #4]!
 8008f38:	4298      	cmp	r0, r3
 8008f3a:	d8f9      	bhi.n	8008f30 <__lshift+0xc8>
 8008f3c:	e7ea      	b.n	8008f14 <__lshift+0xac>
 8008f3e:	bf00      	nop
 8008f40:	0800a080 	.word	0x0800a080
 8008f44:	0800a170 	.word	0x0800a170

08008f48 <__mcmp>:
 8008f48:	b530      	push	{r4, r5, lr}
 8008f4a:	6902      	ldr	r2, [r0, #16]
 8008f4c:	690c      	ldr	r4, [r1, #16]
 8008f4e:	1b12      	subs	r2, r2, r4
 8008f50:	d10e      	bne.n	8008f70 <__mcmp+0x28>
 8008f52:	f100 0314 	add.w	r3, r0, #20
 8008f56:	3114      	adds	r1, #20
 8008f58:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008f5c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008f60:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008f64:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008f68:	42a5      	cmp	r5, r4
 8008f6a:	d003      	beq.n	8008f74 <__mcmp+0x2c>
 8008f6c:	d305      	bcc.n	8008f7a <__mcmp+0x32>
 8008f6e:	2201      	movs	r2, #1
 8008f70:	4610      	mov	r0, r2
 8008f72:	bd30      	pop	{r4, r5, pc}
 8008f74:	4283      	cmp	r3, r0
 8008f76:	d3f3      	bcc.n	8008f60 <__mcmp+0x18>
 8008f78:	e7fa      	b.n	8008f70 <__mcmp+0x28>
 8008f7a:	f04f 32ff 	mov.w	r2, #4294967295
 8008f7e:	e7f7      	b.n	8008f70 <__mcmp+0x28>

08008f80 <__mdiff>:
 8008f80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f84:	460c      	mov	r4, r1
 8008f86:	4606      	mov	r6, r0
 8008f88:	4611      	mov	r1, r2
 8008f8a:	4620      	mov	r0, r4
 8008f8c:	4690      	mov	r8, r2
 8008f8e:	f7ff ffdb 	bl	8008f48 <__mcmp>
 8008f92:	1e05      	subs	r5, r0, #0
 8008f94:	d110      	bne.n	8008fb8 <__mdiff+0x38>
 8008f96:	4629      	mov	r1, r5
 8008f98:	4630      	mov	r0, r6
 8008f9a:	f7ff fd09 	bl	80089b0 <_Balloc>
 8008f9e:	b930      	cbnz	r0, 8008fae <__mdiff+0x2e>
 8008fa0:	4b3a      	ldr	r3, [pc, #232]	; (800908c <__mdiff+0x10c>)
 8008fa2:	4602      	mov	r2, r0
 8008fa4:	f240 2132 	movw	r1, #562	; 0x232
 8008fa8:	4839      	ldr	r0, [pc, #228]	; (8009090 <__mdiff+0x110>)
 8008faa:	f000 fdff 	bl	8009bac <__assert_func>
 8008fae:	2301      	movs	r3, #1
 8008fb0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008fb4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fb8:	bfa4      	itt	ge
 8008fba:	4643      	movge	r3, r8
 8008fbc:	46a0      	movge	r8, r4
 8008fbe:	4630      	mov	r0, r6
 8008fc0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008fc4:	bfa6      	itte	ge
 8008fc6:	461c      	movge	r4, r3
 8008fc8:	2500      	movge	r5, #0
 8008fca:	2501      	movlt	r5, #1
 8008fcc:	f7ff fcf0 	bl	80089b0 <_Balloc>
 8008fd0:	b920      	cbnz	r0, 8008fdc <__mdiff+0x5c>
 8008fd2:	4b2e      	ldr	r3, [pc, #184]	; (800908c <__mdiff+0x10c>)
 8008fd4:	4602      	mov	r2, r0
 8008fd6:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008fda:	e7e5      	b.n	8008fa8 <__mdiff+0x28>
 8008fdc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008fe0:	6926      	ldr	r6, [r4, #16]
 8008fe2:	60c5      	str	r5, [r0, #12]
 8008fe4:	f104 0914 	add.w	r9, r4, #20
 8008fe8:	f108 0514 	add.w	r5, r8, #20
 8008fec:	f100 0e14 	add.w	lr, r0, #20
 8008ff0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008ff4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008ff8:	f108 0210 	add.w	r2, r8, #16
 8008ffc:	46f2      	mov	sl, lr
 8008ffe:	2100      	movs	r1, #0
 8009000:	f859 3b04 	ldr.w	r3, [r9], #4
 8009004:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009008:	fa1f f883 	uxth.w	r8, r3
 800900c:	fa11 f18b 	uxtah	r1, r1, fp
 8009010:	0c1b      	lsrs	r3, r3, #16
 8009012:	eba1 0808 	sub.w	r8, r1, r8
 8009016:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800901a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800901e:	fa1f f888 	uxth.w	r8, r8
 8009022:	1419      	asrs	r1, r3, #16
 8009024:	454e      	cmp	r6, r9
 8009026:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800902a:	f84a 3b04 	str.w	r3, [sl], #4
 800902e:	d8e7      	bhi.n	8009000 <__mdiff+0x80>
 8009030:	1b33      	subs	r3, r6, r4
 8009032:	3b15      	subs	r3, #21
 8009034:	f023 0303 	bic.w	r3, r3, #3
 8009038:	3304      	adds	r3, #4
 800903a:	3415      	adds	r4, #21
 800903c:	42a6      	cmp	r6, r4
 800903e:	bf38      	it	cc
 8009040:	2304      	movcc	r3, #4
 8009042:	441d      	add	r5, r3
 8009044:	4473      	add	r3, lr
 8009046:	469e      	mov	lr, r3
 8009048:	462e      	mov	r6, r5
 800904a:	4566      	cmp	r6, ip
 800904c:	d30e      	bcc.n	800906c <__mdiff+0xec>
 800904e:	f10c 0203 	add.w	r2, ip, #3
 8009052:	1b52      	subs	r2, r2, r5
 8009054:	f022 0203 	bic.w	r2, r2, #3
 8009058:	3d03      	subs	r5, #3
 800905a:	45ac      	cmp	ip, r5
 800905c:	bf38      	it	cc
 800905e:	2200      	movcc	r2, #0
 8009060:	441a      	add	r2, r3
 8009062:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009066:	b17b      	cbz	r3, 8009088 <__mdiff+0x108>
 8009068:	6107      	str	r7, [r0, #16]
 800906a:	e7a3      	b.n	8008fb4 <__mdiff+0x34>
 800906c:	f856 8b04 	ldr.w	r8, [r6], #4
 8009070:	fa11 f288 	uxtah	r2, r1, r8
 8009074:	1414      	asrs	r4, r2, #16
 8009076:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800907a:	b292      	uxth	r2, r2
 800907c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009080:	f84e 2b04 	str.w	r2, [lr], #4
 8009084:	1421      	asrs	r1, r4, #16
 8009086:	e7e0      	b.n	800904a <__mdiff+0xca>
 8009088:	3f01      	subs	r7, #1
 800908a:	e7ea      	b.n	8009062 <__mdiff+0xe2>
 800908c:	0800a080 	.word	0x0800a080
 8009090:	0800a170 	.word	0x0800a170

08009094 <__ulp>:
 8009094:	b082      	sub	sp, #8
 8009096:	ed8d 0b00 	vstr	d0, [sp]
 800909a:	9b01      	ldr	r3, [sp, #4]
 800909c:	4912      	ldr	r1, [pc, #72]	; (80090e8 <__ulp+0x54>)
 800909e:	4019      	ands	r1, r3
 80090a0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80090a4:	2900      	cmp	r1, #0
 80090a6:	dd05      	ble.n	80090b4 <__ulp+0x20>
 80090a8:	2200      	movs	r2, #0
 80090aa:	460b      	mov	r3, r1
 80090ac:	ec43 2b10 	vmov	d0, r2, r3
 80090b0:	b002      	add	sp, #8
 80090b2:	4770      	bx	lr
 80090b4:	4249      	negs	r1, r1
 80090b6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80090ba:	ea4f 5021 	mov.w	r0, r1, asr #20
 80090be:	f04f 0200 	mov.w	r2, #0
 80090c2:	f04f 0300 	mov.w	r3, #0
 80090c6:	da04      	bge.n	80090d2 <__ulp+0x3e>
 80090c8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80090cc:	fa41 f300 	asr.w	r3, r1, r0
 80090d0:	e7ec      	b.n	80090ac <__ulp+0x18>
 80090d2:	f1a0 0114 	sub.w	r1, r0, #20
 80090d6:	291e      	cmp	r1, #30
 80090d8:	bfda      	itte	le
 80090da:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80090de:	fa20 f101 	lsrle.w	r1, r0, r1
 80090e2:	2101      	movgt	r1, #1
 80090e4:	460a      	mov	r2, r1
 80090e6:	e7e1      	b.n	80090ac <__ulp+0x18>
 80090e8:	7ff00000 	.word	0x7ff00000

080090ec <__b2d>:
 80090ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090ee:	6905      	ldr	r5, [r0, #16]
 80090f0:	f100 0714 	add.w	r7, r0, #20
 80090f4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80090f8:	1f2e      	subs	r6, r5, #4
 80090fa:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80090fe:	4620      	mov	r0, r4
 8009100:	f7ff fd48 	bl	8008b94 <__hi0bits>
 8009104:	f1c0 0320 	rsb	r3, r0, #32
 8009108:	280a      	cmp	r0, #10
 800910a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009188 <__b2d+0x9c>
 800910e:	600b      	str	r3, [r1, #0]
 8009110:	dc14      	bgt.n	800913c <__b2d+0x50>
 8009112:	f1c0 0e0b 	rsb	lr, r0, #11
 8009116:	fa24 f10e 	lsr.w	r1, r4, lr
 800911a:	42b7      	cmp	r7, r6
 800911c:	ea41 030c 	orr.w	r3, r1, ip
 8009120:	bf34      	ite	cc
 8009122:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009126:	2100      	movcs	r1, #0
 8009128:	3015      	adds	r0, #21
 800912a:	fa04 f000 	lsl.w	r0, r4, r0
 800912e:	fa21 f10e 	lsr.w	r1, r1, lr
 8009132:	ea40 0201 	orr.w	r2, r0, r1
 8009136:	ec43 2b10 	vmov	d0, r2, r3
 800913a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800913c:	42b7      	cmp	r7, r6
 800913e:	bf3a      	itte	cc
 8009140:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009144:	f1a5 0608 	subcc.w	r6, r5, #8
 8009148:	2100      	movcs	r1, #0
 800914a:	380b      	subs	r0, #11
 800914c:	d017      	beq.n	800917e <__b2d+0x92>
 800914e:	f1c0 0c20 	rsb	ip, r0, #32
 8009152:	fa04 f500 	lsl.w	r5, r4, r0
 8009156:	42be      	cmp	r6, r7
 8009158:	fa21 f40c 	lsr.w	r4, r1, ip
 800915c:	ea45 0504 	orr.w	r5, r5, r4
 8009160:	bf8c      	ite	hi
 8009162:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009166:	2400      	movls	r4, #0
 8009168:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800916c:	fa01 f000 	lsl.w	r0, r1, r0
 8009170:	fa24 f40c 	lsr.w	r4, r4, ip
 8009174:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009178:	ea40 0204 	orr.w	r2, r0, r4
 800917c:	e7db      	b.n	8009136 <__b2d+0x4a>
 800917e:	ea44 030c 	orr.w	r3, r4, ip
 8009182:	460a      	mov	r2, r1
 8009184:	e7d7      	b.n	8009136 <__b2d+0x4a>
 8009186:	bf00      	nop
 8009188:	3ff00000 	.word	0x3ff00000

0800918c <__d2b>:
 800918c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009190:	4689      	mov	r9, r1
 8009192:	2101      	movs	r1, #1
 8009194:	ec57 6b10 	vmov	r6, r7, d0
 8009198:	4690      	mov	r8, r2
 800919a:	f7ff fc09 	bl	80089b0 <_Balloc>
 800919e:	4604      	mov	r4, r0
 80091a0:	b930      	cbnz	r0, 80091b0 <__d2b+0x24>
 80091a2:	4602      	mov	r2, r0
 80091a4:	4b25      	ldr	r3, [pc, #148]	; (800923c <__d2b+0xb0>)
 80091a6:	4826      	ldr	r0, [pc, #152]	; (8009240 <__d2b+0xb4>)
 80091a8:	f240 310a 	movw	r1, #778	; 0x30a
 80091ac:	f000 fcfe 	bl	8009bac <__assert_func>
 80091b0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80091b4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80091b8:	bb35      	cbnz	r5, 8009208 <__d2b+0x7c>
 80091ba:	2e00      	cmp	r6, #0
 80091bc:	9301      	str	r3, [sp, #4]
 80091be:	d028      	beq.n	8009212 <__d2b+0x86>
 80091c0:	4668      	mov	r0, sp
 80091c2:	9600      	str	r6, [sp, #0]
 80091c4:	f7ff fd06 	bl	8008bd4 <__lo0bits>
 80091c8:	9900      	ldr	r1, [sp, #0]
 80091ca:	b300      	cbz	r0, 800920e <__d2b+0x82>
 80091cc:	9a01      	ldr	r2, [sp, #4]
 80091ce:	f1c0 0320 	rsb	r3, r0, #32
 80091d2:	fa02 f303 	lsl.w	r3, r2, r3
 80091d6:	430b      	orrs	r3, r1
 80091d8:	40c2      	lsrs	r2, r0
 80091da:	6163      	str	r3, [r4, #20]
 80091dc:	9201      	str	r2, [sp, #4]
 80091de:	9b01      	ldr	r3, [sp, #4]
 80091e0:	61a3      	str	r3, [r4, #24]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	bf14      	ite	ne
 80091e6:	2202      	movne	r2, #2
 80091e8:	2201      	moveq	r2, #1
 80091ea:	6122      	str	r2, [r4, #16]
 80091ec:	b1d5      	cbz	r5, 8009224 <__d2b+0x98>
 80091ee:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80091f2:	4405      	add	r5, r0
 80091f4:	f8c9 5000 	str.w	r5, [r9]
 80091f8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80091fc:	f8c8 0000 	str.w	r0, [r8]
 8009200:	4620      	mov	r0, r4
 8009202:	b003      	add	sp, #12
 8009204:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009208:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800920c:	e7d5      	b.n	80091ba <__d2b+0x2e>
 800920e:	6161      	str	r1, [r4, #20]
 8009210:	e7e5      	b.n	80091de <__d2b+0x52>
 8009212:	a801      	add	r0, sp, #4
 8009214:	f7ff fcde 	bl	8008bd4 <__lo0bits>
 8009218:	9b01      	ldr	r3, [sp, #4]
 800921a:	6163      	str	r3, [r4, #20]
 800921c:	2201      	movs	r2, #1
 800921e:	6122      	str	r2, [r4, #16]
 8009220:	3020      	adds	r0, #32
 8009222:	e7e3      	b.n	80091ec <__d2b+0x60>
 8009224:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009228:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800922c:	f8c9 0000 	str.w	r0, [r9]
 8009230:	6918      	ldr	r0, [r3, #16]
 8009232:	f7ff fcaf 	bl	8008b94 <__hi0bits>
 8009236:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800923a:	e7df      	b.n	80091fc <__d2b+0x70>
 800923c:	0800a080 	.word	0x0800a080
 8009240:	0800a170 	.word	0x0800a170

08009244 <__ratio>:
 8009244:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009248:	4688      	mov	r8, r1
 800924a:	4669      	mov	r1, sp
 800924c:	4681      	mov	r9, r0
 800924e:	f7ff ff4d 	bl	80090ec <__b2d>
 8009252:	a901      	add	r1, sp, #4
 8009254:	4640      	mov	r0, r8
 8009256:	ec55 4b10 	vmov	r4, r5, d0
 800925a:	f7ff ff47 	bl	80090ec <__b2d>
 800925e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009262:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009266:	eba3 0c02 	sub.w	ip, r3, r2
 800926a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800926e:	1a9b      	subs	r3, r3, r2
 8009270:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009274:	ec51 0b10 	vmov	r0, r1, d0
 8009278:	2b00      	cmp	r3, #0
 800927a:	bfd6      	itet	le
 800927c:	460a      	movle	r2, r1
 800927e:	462a      	movgt	r2, r5
 8009280:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009284:	468b      	mov	fp, r1
 8009286:	462f      	mov	r7, r5
 8009288:	bfd4      	ite	le
 800928a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800928e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009292:	4620      	mov	r0, r4
 8009294:	ee10 2a10 	vmov	r2, s0
 8009298:	465b      	mov	r3, fp
 800929a:	4639      	mov	r1, r7
 800929c:	f7f7 fae6 	bl	800086c <__aeabi_ddiv>
 80092a0:	ec41 0b10 	vmov	d0, r0, r1
 80092a4:	b003      	add	sp, #12
 80092a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080092aa <__copybits>:
 80092aa:	3901      	subs	r1, #1
 80092ac:	b570      	push	{r4, r5, r6, lr}
 80092ae:	1149      	asrs	r1, r1, #5
 80092b0:	6914      	ldr	r4, [r2, #16]
 80092b2:	3101      	adds	r1, #1
 80092b4:	f102 0314 	add.w	r3, r2, #20
 80092b8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80092bc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80092c0:	1f05      	subs	r5, r0, #4
 80092c2:	42a3      	cmp	r3, r4
 80092c4:	d30c      	bcc.n	80092e0 <__copybits+0x36>
 80092c6:	1aa3      	subs	r3, r4, r2
 80092c8:	3b11      	subs	r3, #17
 80092ca:	f023 0303 	bic.w	r3, r3, #3
 80092ce:	3211      	adds	r2, #17
 80092d0:	42a2      	cmp	r2, r4
 80092d2:	bf88      	it	hi
 80092d4:	2300      	movhi	r3, #0
 80092d6:	4418      	add	r0, r3
 80092d8:	2300      	movs	r3, #0
 80092da:	4288      	cmp	r0, r1
 80092dc:	d305      	bcc.n	80092ea <__copybits+0x40>
 80092de:	bd70      	pop	{r4, r5, r6, pc}
 80092e0:	f853 6b04 	ldr.w	r6, [r3], #4
 80092e4:	f845 6f04 	str.w	r6, [r5, #4]!
 80092e8:	e7eb      	b.n	80092c2 <__copybits+0x18>
 80092ea:	f840 3b04 	str.w	r3, [r0], #4
 80092ee:	e7f4      	b.n	80092da <__copybits+0x30>

080092f0 <__any_on>:
 80092f0:	f100 0214 	add.w	r2, r0, #20
 80092f4:	6900      	ldr	r0, [r0, #16]
 80092f6:	114b      	asrs	r3, r1, #5
 80092f8:	4298      	cmp	r0, r3
 80092fa:	b510      	push	{r4, lr}
 80092fc:	db11      	blt.n	8009322 <__any_on+0x32>
 80092fe:	dd0a      	ble.n	8009316 <__any_on+0x26>
 8009300:	f011 011f 	ands.w	r1, r1, #31
 8009304:	d007      	beq.n	8009316 <__any_on+0x26>
 8009306:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800930a:	fa24 f001 	lsr.w	r0, r4, r1
 800930e:	fa00 f101 	lsl.w	r1, r0, r1
 8009312:	428c      	cmp	r4, r1
 8009314:	d10b      	bne.n	800932e <__any_on+0x3e>
 8009316:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800931a:	4293      	cmp	r3, r2
 800931c:	d803      	bhi.n	8009326 <__any_on+0x36>
 800931e:	2000      	movs	r0, #0
 8009320:	bd10      	pop	{r4, pc}
 8009322:	4603      	mov	r3, r0
 8009324:	e7f7      	b.n	8009316 <__any_on+0x26>
 8009326:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800932a:	2900      	cmp	r1, #0
 800932c:	d0f5      	beq.n	800931a <__any_on+0x2a>
 800932e:	2001      	movs	r0, #1
 8009330:	e7f6      	b.n	8009320 <__any_on+0x30>

08009332 <_calloc_r>:
 8009332:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009334:	fba1 2402 	umull	r2, r4, r1, r2
 8009338:	b94c      	cbnz	r4, 800934e <_calloc_r+0x1c>
 800933a:	4611      	mov	r1, r2
 800933c:	9201      	str	r2, [sp, #4]
 800933e:	f000 f87b 	bl	8009438 <_malloc_r>
 8009342:	9a01      	ldr	r2, [sp, #4]
 8009344:	4605      	mov	r5, r0
 8009346:	b930      	cbnz	r0, 8009356 <_calloc_r+0x24>
 8009348:	4628      	mov	r0, r5
 800934a:	b003      	add	sp, #12
 800934c:	bd30      	pop	{r4, r5, pc}
 800934e:	220c      	movs	r2, #12
 8009350:	6002      	str	r2, [r0, #0]
 8009352:	2500      	movs	r5, #0
 8009354:	e7f8      	b.n	8009348 <_calloc_r+0x16>
 8009356:	4621      	mov	r1, r4
 8009358:	f7fc f852 	bl	8005400 <memset>
 800935c:	e7f4      	b.n	8009348 <_calloc_r+0x16>
	...

08009360 <_free_r>:
 8009360:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009362:	2900      	cmp	r1, #0
 8009364:	d044      	beq.n	80093f0 <_free_r+0x90>
 8009366:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800936a:	9001      	str	r0, [sp, #4]
 800936c:	2b00      	cmp	r3, #0
 800936e:	f1a1 0404 	sub.w	r4, r1, #4
 8009372:	bfb8      	it	lt
 8009374:	18e4      	addlt	r4, r4, r3
 8009376:	f000 fca7 	bl	8009cc8 <__malloc_lock>
 800937a:	4a1e      	ldr	r2, [pc, #120]	; (80093f4 <_free_r+0x94>)
 800937c:	9801      	ldr	r0, [sp, #4]
 800937e:	6813      	ldr	r3, [r2, #0]
 8009380:	b933      	cbnz	r3, 8009390 <_free_r+0x30>
 8009382:	6063      	str	r3, [r4, #4]
 8009384:	6014      	str	r4, [r2, #0]
 8009386:	b003      	add	sp, #12
 8009388:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800938c:	f000 bca2 	b.w	8009cd4 <__malloc_unlock>
 8009390:	42a3      	cmp	r3, r4
 8009392:	d908      	bls.n	80093a6 <_free_r+0x46>
 8009394:	6825      	ldr	r5, [r4, #0]
 8009396:	1961      	adds	r1, r4, r5
 8009398:	428b      	cmp	r3, r1
 800939a:	bf01      	itttt	eq
 800939c:	6819      	ldreq	r1, [r3, #0]
 800939e:	685b      	ldreq	r3, [r3, #4]
 80093a0:	1949      	addeq	r1, r1, r5
 80093a2:	6021      	streq	r1, [r4, #0]
 80093a4:	e7ed      	b.n	8009382 <_free_r+0x22>
 80093a6:	461a      	mov	r2, r3
 80093a8:	685b      	ldr	r3, [r3, #4]
 80093aa:	b10b      	cbz	r3, 80093b0 <_free_r+0x50>
 80093ac:	42a3      	cmp	r3, r4
 80093ae:	d9fa      	bls.n	80093a6 <_free_r+0x46>
 80093b0:	6811      	ldr	r1, [r2, #0]
 80093b2:	1855      	adds	r5, r2, r1
 80093b4:	42a5      	cmp	r5, r4
 80093b6:	d10b      	bne.n	80093d0 <_free_r+0x70>
 80093b8:	6824      	ldr	r4, [r4, #0]
 80093ba:	4421      	add	r1, r4
 80093bc:	1854      	adds	r4, r2, r1
 80093be:	42a3      	cmp	r3, r4
 80093c0:	6011      	str	r1, [r2, #0]
 80093c2:	d1e0      	bne.n	8009386 <_free_r+0x26>
 80093c4:	681c      	ldr	r4, [r3, #0]
 80093c6:	685b      	ldr	r3, [r3, #4]
 80093c8:	6053      	str	r3, [r2, #4]
 80093ca:	4421      	add	r1, r4
 80093cc:	6011      	str	r1, [r2, #0]
 80093ce:	e7da      	b.n	8009386 <_free_r+0x26>
 80093d0:	d902      	bls.n	80093d8 <_free_r+0x78>
 80093d2:	230c      	movs	r3, #12
 80093d4:	6003      	str	r3, [r0, #0]
 80093d6:	e7d6      	b.n	8009386 <_free_r+0x26>
 80093d8:	6825      	ldr	r5, [r4, #0]
 80093da:	1961      	adds	r1, r4, r5
 80093dc:	428b      	cmp	r3, r1
 80093de:	bf04      	itt	eq
 80093e0:	6819      	ldreq	r1, [r3, #0]
 80093e2:	685b      	ldreq	r3, [r3, #4]
 80093e4:	6063      	str	r3, [r4, #4]
 80093e6:	bf04      	itt	eq
 80093e8:	1949      	addeq	r1, r1, r5
 80093ea:	6021      	streq	r1, [r4, #0]
 80093ec:	6054      	str	r4, [r2, #4]
 80093ee:	e7ca      	b.n	8009386 <_free_r+0x26>
 80093f0:	b003      	add	sp, #12
 80093f2:	bd30      	pop	{r4, r5, pc}
 80093f4:	20000a1c 	.word	0x20000a1c

080093f8 <sbrk_aligned>:
 80093f8:	b570      	push	{r4, r5, r6, lr}
 80093fa:	4e0e      	ldr	r6, [pc, #56]	; (8009434 <sbrk_aligned+0x3c>)
 80093fc:	460c      	mov	r4, r1
 80093fe:	6831      	ldr	r1, [r6, #0]
 8009400:	4605      	mov	r5, r0
 8009402:	b911      	cbnz	r1, 800940a <sbrk_aligned+0x12>
 8009404:	f000 fb4c 	bl	8009aa0 <_sbrk_r>
 8009408:	6030      	str	r0, [r6, #0]
 800940a:	4621      	mov	r1, r4
 800940c:	4628      	mov	r0, r5
 800940e:	f000 fb47 	bl	8009aa0 <_sbrk_r>
 8009412:	1c43      	adds	r3, r0, #1
 8009414:	d00a      	beq.n	800942c <sbrk_aligned+0x34>
 8009416:	1cc4      	adds	r4, r0, #3
 8009418:	f024 0403 	bic.w	r4, r4, #3
 800941c:	42a0      	cmp	r0, r4
 800941e:	d007      	beq.n	8009430 <sbrk_aligned+0x38>
 8009420:	1a21      	subs	r1, r4, r0
 8009422:	4628      	mov	r0, r5
 8009424:	f000 fb3c 	bl	8009aa0 <_sbrk_r>
 8009428:	3001      	adds	r0, #1
 800942a:	d101      	bne.n	8009430 <sbrk_aligned+0x38>
 800942c:	f04f 34ff 	mov.w	r4, #4294967295
 8009430:	4620      	mov	r0, r4
 8009432:	bd70      	pop	{r4, r5, r6, pc}
 8009434:	20000a20 	.word	0x20000a20

08009438 <_malloc_r>:
 8009438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800943c:	1ccd      	adds	r5, r1, #3
 800943e:	f025 0503 	bic.w	r5, r5, #3
 8009442:	3508      	adds	r5, #8
 8009444:	2d0c      	cmp	r5, #12
 8009446:	bf38      	it	cc
 8009448:	250c      	movcc	r5, #12
 800944a:	2d00      	cmp	r5, #0
 800944c:	4607      	mov	r7, r0
 800944e:	db01      	blt.n	8009454 <_malloc_r+0x1c>
 8009450:	42a9      	cmp	r1, r5
 8009452:	d905      	bls.n	8009460 <_malloc_r+0x28>
 8009454:	230c      	movs	r3, #12
 8009456:	603b      	str	r3, [r7, #0]
 8009458:	2600      	movs	r6, #0
 800945a:	4630      	mov	r0, r6
 800945c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009460:	4e2e      	ldr	r6, [pc, #184]	; (800951c <_malloc_r+0xe4>)
 8009462:	f000 fc31 	bl	8009cc8 <__malloc_lock>
 8009466:	6833      	ldr	r3, [r6, #0]
 8009468:	461c      	mov	r4, r3
 800946a:	bb34      	cbnz	r4, 80094ba <_malloc_r+0x82>
 800946c:	4629      	mov	r1, r5
 800946e:	4638      	mov	r0, r7
 8009470:	f7ff ffc2 	bl	80093f8 <sbrk_aligned>
 8009474:	1c43      	adds	r3, r0, #1
 8009476:	4604      	mov	r4, r0
 8009478:	d14d      	bne.n	8009516 <_malloc_r+0xde>
 800947a:	6834      	ldr	r4, [r6, #0]
 800947c:	4626      	mov	r6, r4
 800947e:	2e00      	cmp	r6, #0
 8009480:	d140      	bne.n	8009504 <_malloc_r+0xcc>
 8009482:	6823      	ldr	r3, [r4, #0]
 8009484:	4631      	mov	r1, r6
 8009486:	4638      	mov	r0, r7
 8009488:	eb04 0803 	add.w	r8, r4, r3
 800948c:	f000 fb08 	bl	8009aa0 <_sbrk_r>
 8009490:	4580      	cmp	r8, r0
 8009492:	d13a      	bne.n	800950a <_malloc_r+0xd2>
 8009494:	6821      	ldr	r1, [r4, #0]
 8009496:	3503      	adds	r5, #3
 8009498:	1a6d      	subs	r5, r5, r1
 800949a:	f025 0503 	bic.w	r5, r5, #3
 800949e:	3508      	adds	r5, #8
 80094a0:	2d0c      	cmp	r5, #12
 80094a2:	bf38      	it	cc
 80094a4:	250c      	movcc	r5, #12
 80094a6:	4629      	mov	r1, r5
 80094a8:	4638      	mov	r0, r7
 80094aa:	f7ff ffa5 	bl	80093f8 <sbrk_aligned>
 80094ae:	3001      	adds	r0, #1
 80094b0:	d02b      	beq.n	800950a <_malloc_r+0xd2>
 80094b2:	6823      	ldr	r3, [r4, #0]
 80094b4:	442b      	add	r3, r5
 80094b6:	6023      	str	r3, [r4, #0]
 80094b8:	e00e      	b.n	80094d8 <_malloc_r+0xa0>
 80094ba:	6822      	ldr	r2, [r4, #0]
 80094bc:	1b52      	subs	r2, r2, r5
 80094be:	d41e      	bmi.n	80094fe <_malloc_r+0xc6>
 80094c0:	2a0b      	cmp	r2, #11
 80094c2:	d916      	bls.n	80094f2 <_malloc_r+0xba>
 80094c4:	1961      	adds	r1, r4, r5
 80094c6:	42a3      	cmp	r3, r4
 80094c8:	6025      	str	r5, [r4, #0]
 80094ca:	bf18      	it	ne
 80094cc:	6059      	strne	r1, [r3, #4]
 80094ce:	6863      	ldr	r3, [r4, #4]
 80094d0:	bf08      	it	eq
 80094d2:	6031      	streq	r1, [r6, #0]
 80094d4:	5162      	str	r2, [r4, r5]
 80094d6:	604b      	str	r3, [r1, #4]
 80094d8:	4638      	mov	r0, r7
 80094da:	f104 060b 	add.w	r6, r4, #11
 80094de:	f000 fbf9 	bl	8009cd4 <__malloc_unlock>
 80094e2:	f026 0607 	bic.w	r6, r6, #7
 80094e6:	1d23      	adds	r3, r4, #4
 80094e8:	1af2      	subs	r2, r6, r3
 80094ea:	d0b6      	beq.n	800945a <_malloc_r+0x22>
 80094ec:	1b9b      	subs	r3, r3, r6
 80094ee:	50a3      	str	r3, [r4, r2]
 80094f0:	e7b3      	b.n	800945a <_malloc_r+0x22>
 80094f2:	6862      	ldr	r2, [r4, #4]
 80094f4:	42a3      	cmp	r3, r4
 80094f6:	bf0c      	ite	eq
 80094f8:	6032      	streq	r2, [r6, #0]
 80094fa:	605a      	strne	r2, [r3, #4]
 80094fc:	e7ec      	b.n	80094d8 <_malloc_r+0xa0>
 80094fe:	4623      	mov	r3, r4
 8009500:	6864      	ldr	r4, [r4, #4]
 8009502:	e7b2      	b.n	800946a <_malloc_r+0x32>
 8009504:	4634      	mov	r4, r6
 8009506:	6876      	ldr	r6, [r6, #4]
 8009508:	e7b9      	b.n	800947e <_malloc_r+0x46>
 800950a:	230c      	movs	r3, #12
 800950c:	603b      	str	r3, [r7, #0]
 800950e:	4638      	mov	r0, r7
 8009510:	f000 fbe0 	bl	8009cd4 <__malloc_unlock>
 8009514:	e7a1      	b.n	800945a <_malloc_r+0x22>
 8009516:	6025      	str	r5, [r4, #0]
 8009518:	e7de      	b.n	80094d8 <_malloc_r+0xa0>
 800951a:	bf00      	nop
 800951c:	20000a1c 	.word	0x20000a1c

08009520 <__ssputs_r>:
 8009520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009524:	688e      	ldr	r6, [r1, #8]
 8009526:	429e      	cmp	r6, r3
 8009528:	4682      	mov	sl, r0
 800952a:	460c      	mov	r4, r1
 800952c:	4690      	mov	r8, r2
 800952e:	461f      	mov	r7, r3
 8009530:	d838      	bhi.n	80095a4 <__ssputs_r+0x84>
 8009532:	898a      	ldrh	r2, [r1, #12]
 8009534:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009538:	d032      	beq.n	80095a0 <__ssputs_r+0x80>
 800953a:	6825      	ldr	r5, [r4, #0]
 800953c:	6909      	ldr	r1, [r1, #16]
 800953e:	eba5 0901 	sub.w	r9, r5, r1
 8009542:	6965      	ldr	r5, [r4, #20]
 8009544:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009548:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800954c:	3301      	adds	r3, #1
 800954e:	444b      	add	r3, r9
 8009550:	106d      	asrs	r5, r5, #1
 8009552:	429d      	cmp	r5, r3
 8009554:	bf38      	it	cc
 8009556:	461d      	movcc	r5, r3
 8009558:	0553      	lsls	r3, r2, #21
 800955a:	d531      	bpl.n	80095c0 <__ssputs_r+0xa0>
 800955c:	4629      	mov	r1, r5
 800955e:	f7ff ff6b 	bl	8009438 <_malloc_r>
 8009562:	4606      	mov	r6, r0
 8009564:	b950      	cbnz	r0, 800957c <__ssputs_r+0x5c>
 8009566:	230c      	movs	r3, #12
 8009568:	f8ca 3000 	str.w	r3, [sl]
 800956c:	89a3      	ldrh	r3, [r4, #12]
 800956e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009572:	81a3      	strh	r3, [r4, #12]
 8009574:	f04f 30ff 	mov.w	r0, #4294967295
 8009578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800957c:	6921      	ldr	r1, [r4, #16]
 800957e:	464a      	mov	r2, r9
 8009580:	f7ff fa08 	bl	8008994 <memcpy>
 8009584:	89a3      	ldrh	r3, [r4, #12]
 8009586:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800958a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800958e:	81a3      	strh	r3, [r4, #12]
 8009590:	6126      	str	r6, [r4, #16]
 8009592:	6165      	str	r5, [r4, #20]
 8009594:	444e      	add	r6, r9
 8009596:	eba5 0509 	sub.w	r5, r5, r9
 800959a:	6026      	str	r6, [r4, #0]
 800959c:	60a5      	str	r5, [r4, #8]
 800959e:	463e      	mov	r6, r7
 80095a0:	42be      	cmp	r6, r7
 80095a2:	d900      	bls.n	80095a6 <__ssputs_r+0x86>
 80095a4:	463e      	mov	r6, r7
 80095a6:	6820      	ldr	r0, [r4, #0]
 80095a8:	4632      	mov	r2, r6
 80095aa:	4641      	mov	r1, r8
 80095ac:	f000 fb72 	bl	8009c94 <memmove>
 80095b0:	68a3      	ldr	r3, [r4, #8]
 80095b2:	1b9b      	subs	r3, r3, r6
 80095b4:	60a3      	str	r3, [r4, #8]
 80095b6:	6823      	ldr	r3, [r4, #0]
 80095b8:	4433      	add	r3, r6
 80095ba:	6023      	str	r3, [r4, #0]
 80095bc:	2000      	movs	r0, #0
 80095be:	e7db      	b.n	8009578 <__ssputs_r+0x58>
 80095c0:	462a      	mov	r2, r5
 80095c2:	f000 fb8d 	bl	8009ce0 <_realloc_r>
 80095c6:	4606      	mov	r6, r0
 80095c8:	2800      	cmp	r0, #0
 80095ca:	d1e1      	bne.n	8009590 <__ssputs_r+0x70>
 80095cc:	6921      	ldr	r1, [r4, #16]
 80095ce:	4650      	mov	r0, sl
 80095d0:	f7ff fec6 	bl	8009360 <_free_r>
 80095d4:	e7c7      	b.n	8009566 <__ssputs_r+0x46>
	...

080095d8 <_svfiprintf_r>:
 80095d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095dc:	4698      	mov	r8, r3
 80095de:	898b      	ldrh	r3, [r1, #12]
 80095e0:	061b      	lsls	r3, r3, #24
 80095e2:	b09d      	sub	sp, #116	; 0x74
 80095e4:	4607      	mov	r7, r0
 80095e6:	460d      	mov	r5, r1
 80095e8:	4614      	mov	r4, r2
 80095ea:	d50e      	bpl.n	800960a <_svfiprintf_r+0x32>
 80095ec:	690b      	ldr	r3, [r1, #16]
 80095ee:	b963      	cbnz	r3, 800960a <_svfiprintf_r+0x32>
 80095f0:	2140      	movs	r1, #64	; 0x40
 80095f2:	f7ff ff21 	bl	8009438 <_malloc_r>
 80095f6:	6028      	str	r0, [r5, #0]
 80095f8:	6128      	str	r0, [r5, #16]
 80095fa:	b920      	cbnz	r0, 8009606 <_svfiprintf_r+0x2e>
 80095fc:	230c      	movs	r3, #12
 80095fe:	603b      	str	r3, [r7, #0]
 8009600:	f04f 30ff 	mov.w	r0, #4294967295
 8009604:	e0d1      	b.n	80097aa <_svfiprintf_r+0x1d2>
 8009606:	2340      	movs	r3, #64	; 0x40
 8009608:	616b      	str	r3, [r5, #20]
 800960a:	2300      	movs	r3, #0
 800960c:	9309      	str	r3, [sp, #36]	; 0x24
 800960e:	2320      	movs	r3, #32
 8009610:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009614:	f8cd 800c 	str.w	r8, [sp, #12]
 8009618:	2330      	movs	r3, #48	; 0x30
 800961a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80097c4 <_svfiprintf_r+0x1ec>
 800961e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009622:	f04f 0901 	mov.w	r9, #1
 8009626:	4623      	mov	r3, r4
 8009628:	469a      	mov	sl, r3
 800962a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800962e:	b10a      	cbz	r2, 8009634 <_svfiprintf_r+0x5c>
 8009630:	2a25      	cmp	r2, #37	; 0x25
 8009632:	d1f9      	bne.n	8009628 <_svfiprintf_r+0x50>
 8009634:	ebba 0b04 	subs.w	fp, sl, r4
 8009638:	d00b      	beq.n	8009652 <_svfiprintf_r+0x7a>
 800963a:	465b      	mov	r3, fp
 800963c:	4622      	mov	r2, r4
 800963e:	4629      	mov	r1, r5
 8009640:	4638      	mov	r0, r7
 8009642:	f7ff ff6d 	bl	8009520 <__ssputs_r>
 8009646:	3001      	adds	r0, #1
 8009648:	f000 80aa 	beq.w	80097a0 <_svfiprintf_r+0x1c8>
 800964c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800964e:	445a      	add	r2, fp
 8009650:	9209      	str	r2, [sp, #36]	; 0x24
 8009652:	f89a 3000 	ldrb.w	r3, [sl]
 8009656:	2b00      	cmp	r3, #0
 8009658:	f000 80a2 	beq.w	80097a0 <_svfiprintf_r+0x1c8>
 800965c:	2300      	movs	r3, #0
 800965e:	f04f 32ff 	mov.w	r2, #4294967295
 8009662:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009666:	f10a 0a01 	add.w	sl, sl, #1
 800966a:	9304      	str	r3, [sp, #16]
 800966c:	9307      	str	r3, [sp, #28]
 800966e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009672:	931a      	str	r3, [sp, #104]	; 0x68
 8009674:	4654      	mov	r4, sl
 8009676:	2205      	movs	r2, #5
 8009678:	f814 1b01 	ldrb.w	r1, [r4], #1
 800967c:	4851      	ldr	r0, [pc, #324]	; (80097c4 <_svfiprintf_r+0x1ec>)
 800967e:	f7f6 fdbf 	bl	8000200 <memchr>
 8009682:	9a04      	ldr	r2, [sp, #16]
 8009684:	b9d8      	cbnz	r0, 80096be <_svfiprintf_r+0xe6>
 8009686:	06d0      	lsls	r0, r2, #27
 8009688:	bf44      	itt	mi
 800968a:	2320      	movmi	r3, #32
 800968c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009690:	0711      	lsls	r1, r2, #28
 8009692:	bf44      	itt	mi
 8009694:	232b      	movmi	r3, #43	; 0x2b
 8009696:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800969a:	f89a 3000 	ldrb.w	r3, [sl]
 800969e:	2b2a      	cmp	r3, #42	; 0x2a
 80096a0:	d015      	beq.n	80096ce <_svfiprintf_r+0xf6>
 80096a2:	9a07      	ldr	r2, [sp, #28]
 80096a4:	4654      	mov	r4, sl
 80096a6:	2000      	movs	r0, #0
 80096a8:	f04f 0c0a 	mov.w	ip, #10
 80096ac:	4621      	mov	r1, r4
 80096ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80096b2:	3b30      	subs	r3, #48	; 0x30
 80096b4:	2b09      	cmp	r3, #9
 80096b6:	d94e      	bls.n	8009756 <_svfiprintf_r+0x17e>
 80096b8:	b1b0      	cbz	r0, 80096e8 <_svfiprintf_r+0x110>
 80096ba:	9207      	str	r2, [sp, #28]
 80096bc:	e014      	b.n	80096e8 <_svfiprintf_r+0x110>
 80096be:	eba0 0308 	sub.w	r3, r0, r8
 80096c2:	fa09 f303 	lsl.w	r3, r9, r3
 80096c6:	4313      	orrs	r3, r2
 80096c8:	9304      	str	r3, [sp, #16]
 80096ca:	46a2      	mov	sl, r4
 80096cc:	e7d2      	b.n	8009674 <_svfiprintf_r+0x9c>
 80096ce:	9b03      	ldr	r3, [sp, #12]
 80096d0:	1d19      	adds	r1, r3, #4
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	9103      	str	r1, [sp, #12]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	bfbb      	ittet	lt
 80096da:	425b      	neglt	r3, r3
 80096dc:	f042 0202 	orrlt.w	r2, r2, #2
 80096e0:	9307      	strge	r3, [sp, #28]
 80096e2:	9307      	strlt	r3, [sp, #28]
 80096e4:	bfb8      	it	lt
 80096e6:	9204      	strlt	r2, [sp, #16]
 80096e8:	7823      	ldrb	r3, [r4, #0]
 80096ea:	2b2e      	cmp	r3, #46	; 0x2e
 80096ec:	d10c      	bne.n	8009708 <_svfiprintf_r+0x130>
 80096ee:	7863      	ldrb	r3, [r4, #1]
 80096f0:	2b2a      	cmp	r3, #42	; 0x2a
 80096f2:	d135      	bne.n	8009760 <_svfiprintf_r+0x188>
 80096f4:	9b03      	ldr	r3, [sp, #12]
 80096f6:	1d1a      	adds	r2, r3, #4
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	9203      	str	r2, [sp, #12]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	bfb8      	it	lt
 8009700:	f04f 33ff 	movlt.w	r3, #4294967295
 8009704:	3402      	adds	r4, #2
 8009706:	9305      	str	r3, [sp, #20]
 8009708:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80097d4 <_svfiprintf_r+0x1fc>
 800970c:	7821      	ldrb	r1, [r4, #0]
 800970e:	2203      	movs	r2, #3
 8009710:	4650      	mov	r0, sl
 8009712:	f7f6 fd75 	bl	8000200 <memchr>
 8009716:	b140      	cbz	r0, 800972a <_svfiprintf_r+0x152>
 8009718:	2340      	movs	r3, #64	; 0x40
 800971a:	eba0 000a 	sub.w	r0, r0, sl
 800971e:	fa03 f000 	lsl.w	r0, r3, r0
 8009722:	9b04      	ldr	r3, [sp, #16]
 8009724:	4303      	orrs	r3, r0
 8009726:	3401      	adds	r4, #1
 8009728:	9304      	str	r3, [sp, #16]
 800972a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800972e:	4826      	ldr	r0, [pc, #152]	; (80097c8 <_svfiprintf_r+0x1f0>)
 8009730:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009734:	2206      	movs	r2, #6
 8009736:	f7f6 fd63 	bl	8000200 <memchr>
 800973a:	2800      	cmp	r0, #0
 800973c:	d038      	beq.n	80097b0 <_svfiprintf_r+0x1d8>
 800973e:	4b23      	ldr	r3, [pc, #140]	; (80097cc <_svfiprintf_r+0x1f4>)
 8009740:	bb1b      	cbnz	r3, 800978a <_svfiprintf_r+0x1b2>
 8009742:	9b03      	ldr	r3, [sp, #12]
 8009744:	3307      	adds	r3, #7
 8009746:	f023 0307 	bic.w	r3, r3, #7
 800974a:	3308      	adds	r3, #8
 800974c:	9303      	str	r3, [sp, #12]
 800974e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009750:	4433      	add	r3, r6
 8009752:	9309      	str	r3, [sp, #36]	; 0x24
 8009754:	e767      	b.n	8009626 <_svfiprintf_r+0x4e>
 8009756:	fb0c 3202 	mla	r2, ip, r2, r3
 800975a:	460c      	mov	r4, r1
 800975c:	2001      	movs	r0, #1
 800975e:	e7a5      	b.n	80096ac <_svfiprintf_r+0xd4>
 8009760:	2300      	movs	r3, #0
 8009762:	3401      	adds	r4, #1
 8009764:	9305      	str	r3, [sp, #20]
 8009766:	4619      	mov	r1, r3
 8009768:	f04f 0c0a 	mov.w	ip, #10
 800976c:	4620      	mov	r0, r4
 800976e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009772:	3a30      	subs	r2, #48	; 0x30
 8009774:	2a09      	cmp	r2, #9
 8009776:	d903      	bls.n	8009780 <_svfiprintf_r+0x1a8>
 8009778:	2b00      	cmp	r3, #0
 800977a:	d0c5      	beq.n	8009708 <_svfiprintf_r+0x130>
 800977c:	9105      	str	r1, [sp, #20]
 800977e:	e7c3      	b.n	8009708 <_svfiprintf_r+0x130>
 8009780:	fb0c 2101 	mla	r1, ip, r1, r2
 8009784:	4604      	mov	r4, r0
 8009786:	2301      	movs	r3, #1
 8009788:	e7f0      	b.n	800976c <_svfiprintf_r+0x194>
 800978a:	ab03      	add	r3, sp, #12
 800978c:	9300      	str	r3, [sp, #0]
 800978e:	462a      	mov	r2, r5
 8009790:	4b0f      	ldr	r3, [pc, #60]	; (80097d0 <_svfiprintf_r+0x1f8>)
 8009792:	a904      	add	r1, sp, #16
 8009794:	4638      	mov	r0, r7
 8009796:	f7fb fedb 	bl	8005550 <_printf_float>
 800979a:	1c42      	adds	r2, r0, #1
 800979c:	4606      	mov	r6, r0
 800979e:	d1d6      	bne.n	800974e <_svfiprintf_r+0x176>
 80097a0:	89ab      	ldrh	r3, [r5, #12]
 80097a2:	065b      	lsls	r3, r3, #25
 80097a4:	f53f af2c 	bmi.w	8009600 <_svfiprintf_r+0x28>
 80097a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80097aa:	b01d      	add	sp, #116	; 0x74
 80097ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097b0:	ab03      	add	r3, sp, #12
 80097b2:	9300      	str	r3, [sp, #0]
 80097b4:	462a      	mov	r2, r5
 80097b6:	4b06      	ldr	r3, [pc, #24]	; (80097d0 <_svfiprintf_r+0x1f8>)
 80097b8:	a904      	add	r1, sp, #16
 80097ba:	4638      	mov	r0, r7
 80097bc:	f7fc f96c 	bl	8005a98 <_printf_i>
 80097c0:	e7eb      	b.n	800979a <_svfiprintf_r+0x1c2>
 80097c2:	bf00      	nop
 80097c4:	0800a2cc 	.word	0x0800a2cc
 80097c8:	0800a2d6 	.word	0x0800a2d6
 80097cc:	08005551 	.word	0x08005551
 80097d0:	08009521 	.word	0x08009521
 80097d4:	0800a2d2 	.word	0x0800a2d2

080097d8 <__sfputc_r>:
 80097d8:	6893      	ldr	r3, [r2, #8]
 80097da:	3b01      	subs	r3, #1
 80097dc:	2b00      	cmp	r3, #0
 80097de:	b410      	push	{r4}
 80097e0:	6093      	str	r3, [r2, #8]
 80097e2:	da08      	bge.n	80097f6 <__sfputc_r+0x1e>
 80097e4:	6994      	ldr	r4, [r2, #24]
 80097e6:	42a3      	cmp	r3, r4
 80097e8:	db01      	blt.n	80097ee <__sfputc_r+0x16>
 80097ea:	290a      	cmp	r1, #10
 80097ec:	d103      	bne.n	80097f6 <__sfputc_r+0x1e>
 80097ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80097f2:	f7fd bbe9 	b.w	8006fc8 <__swbuf_r>
 80097f6:	6813      	ldr	r3, [r2, #0]
 80097f8:	1c58      	adds	r0, r3, #1
 80097fa:	6010      	str	r0, [r2, #0]
 80097fc:	7019      	strb	r1, [r3, #0]
 80097fe:	4608      	mov	r0, r1
 8009800:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009804:	4770      	bx	lr

08009806 <__sfputs_r>:
 8009806:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009808:	4606      	mov	r6, r0
 800980a:	460f      	mov	r7, r1
 800980c:	4614      	mov	r4, r2
 800980e:	18d5      	adds	r5, r2, r3
 8009810:	42ac      	cmp	r4, r5
 8009812:	d101      	bne.n	8009818 <__sfputs_r+0x12>
 8009814:	2000      	movs	r0, #0
 8009816:	e007      	b.n	8009828 <__sfputs_r+0x22>
 8009818:	f814 1b01 	ldrb.w	r1, [r4], #1
 800981c:	463a      	mov	r2, r7
 800981e:	4630      	mov	r0, r6
 8009820:	f7ff ffda 	bl	80097d8 <__sfputc_r>
 8009824:	1c43      	adds	r3, r0, #1
 8009826:	d1f3      	bne.n	8009810 <__sfputs_r+0xa>
 8009828:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800982c <_vfiprintf_r>:
 800982c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009830:	460d      	mov	r5, r1
 8009832:	b09d      	sub	sp, #116	; 0x74
 8009834:	4614      	mov	r4, r2
 8009836:	4698      	mov	r8, r3
 8009838:	4606      	mov	r6, r0
 800983a:	b118      	cbz	r0, 8009844 <_vfiprintf_r+0x18>
 800983c:	6983      	ldr	r3, [r0, #24]
 800983e:	b90b      	cbnz	r3, 8009844 <_vfiprintf_r+0x18>
 8009840:	f7fe fc16 	bl	8008070 <__sinit>
 8009844:	4b89      	ldr	r3, [pc, #548]	; (8009a6c <_vfiprintf_r+0x240>)
 8009846:	429d      	cmp	r5, r3
 8009848:	d11b      	bne.n	8009882 <_vfiprintf_r+0x56>
 800984a:	6875      	ldr	r5, [r6, #4]
 800984c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800984e:	07d9      	lsls	r1, r3, #31
 8009850:	d405      	bmi.n	800985e <_vfiprintf_r+0x32>
 8009852:	89ab      	ldrh	r3, [r5, #12]
 8009854:	059a      	lsls	r2, r3, #22
 8009856:	d402      	bmi.n	800985e <_vfiprintf_r+0x32>
 8009858:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800985a:	f7ff f81a 	bl	8008892 <__retarget_lock_acquire_recursive>
 800985e:	89ab      	ldrh	r3, [r5, #12]
 8009860:	071b      	lsls	r3, r3, #28
 8009862:	d501      	bpl.n	8009868 <_vfiprintf_r+0x3c>
 8009864:	692b      	ldr	r3, [r5, #16]
 8009866:	b9eb      	cbnz	r3, 80098a4 <_vfiprintf_r+0x78>
 8009868:	4629      	mov	r1, r5
 800986a:	4630      	mov	r0, r6
 800986c:	f7fd fbfe 	bl	800706c <__swsetup_r>
 8009870:	b1c0      	cbz	r0, 80098a4 <_vfiprintf_r+0x78>
 8009872:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009874:	07dc      	lsls	r4, r3, #31
 8009876:	d50e      	bpl.n	8009896 <_vfiprintf_r+0x6a>
 8009878:	f04f 30ff 	mov.w	r0, #4294967295
 800987c:	b01d      	add	sp, #116	; 0x74
 800987e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009882:	4b7b      	ldr	r3, [pc, #492]	; (8009a70 <_vfiprintf_r+0x244>)
 8009884:	429d      	cmp	r5, r3
 8009886:	d101      	bne.n	800988c <_vfiprintf_r+0x60>
 8009888:	68b5      	ldr	r5, [r6, #8]
 800988a:	e7df      	b.n	800984c <_vfiprintf_r+0x20>
 800988c:	4b79      	ldr	r3, [pc, #484]	; (8009a74 <_vfiprintf_r+0x248>)
 800988e:	429d      	cmp	r5, r3
 8009890:	bf08      	it	eq
 8009892:	68f5      	ldreq	r5, [r6, #12]
 8009894:	e7da      	b.n	800984c <_vfiprintf_r+0x20>
 8009896:	89ab      	ldrh	r3, [r5, #12]
 8009898:	0598      	lsls	r0, r3, #22
 800989a:	d4ed      	bmi.n	8009878 <_vfiprintf_r+0x4c>
 800989c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800989e:	f7fe fff9 	bl	8008894 <__retarget_lock_release_recursive>
 80098a2:	e7e9      	b.n	8009878 <_vfiprintf_r+0x4c>
 80098a4:	2300      	movs	r3, #0
 80098a6:	9309      	str	r3, [sp, #36]	; 0x24
 80098a8:	2320      	movs	r3, #32
 80098aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80098ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80098b2:	2330      	movs	r3, #48	; 0x30
 80098b4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009a78 <_vfiprintf_r+0x24c>
 80098b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80098bc:	f04f 0901 	mov.w	r9, #1
 80098c0:	4623      	mov	r3, r4
 80098c2:	469a      	mov	sl, r3
 80098c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80098c8:	b10a      	cbz	r2, 80098ce <_vfiprintf_r+0xa2>
 80098ca:	2a25      	cmp	r2, #37	; 0x25
 80098cc:	d1f9      	bne.n	80098c2 <_vfiprintf_r+0x96>
 80098ce:	ebba 0b04 	subs.w	fp, sl, r4
 80098d2:	d00b      	beq.n	80098ec <_vfiprintf_r+0xc0>
 80098d4:	465b      	mov	r3, fp
 80098d6:	4622      	mov	r2, r4
 80098d8:	4629      	mov	r1, r5
 80098da:	4630      	mov	r0, r6
 80098dc:	f7ff ff93 	bl	8009806 <__sfputs_r>
 80098e0:	3001      	adds	r0, #1
 80098e2:	f000 80aa 	beq.w	8009a3a <_vfiprintf_r+0x20e>
 80098e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80098e8:	445a      	add	r2, fp
 80098ea:	9209      	str	r2, [sp, #36]	; 0x24
 80098ec:	f89a 3000 	ldrb.w	r3, [sl]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	f000 80a2 	beq.w	8009a3a <_vfiprintf_r+0x20e>
 80098f6:	2300      	movs	r3, #0
 80098f8:	f04f 32ff 	mov.w	r2, #4294967295
 80098fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009900:	f10a 0a01 	add.w	sl, sl, #1
 8009904:	9304      	str	r3, [sp, #16]
 8009906:	9307      	str	r3, [sp, #28]
 8009908:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800990c:	931a      	str	r3, [sp, #104]	; 0x68
 800990e:	4654      	mov	r4, sl
 8009910:	2205      	movs	r2, #5
 8009912:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009916:	4858      	ldr	r0, [pc, #352]	; (8009a78 <_vfiprintf_r+0x24c>)
 8009918:	f7f6 fc72 	bl	8000200 <memchr>
 800991c:	9a04      	ldr	r2, [sp, #16]
 800991e:	b9d8      	cbnz	r0, 8009958 <_vfiprintf_r+0x12c>
 8009920:	06d1      	lsls	r1, r2, #27
 8009922:	bf44      	itt	mi
 8009924:	2320      	movmi	r3, #32
 8009926:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800992a:	0713      	lsls	r3, r2, #28
 800992c:	bf44      	itt	mi
 800992e:	232b      	movmi	r3, #43	; 0x2b
 8009930:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009934:	f89a 3000 	ldrb.w	r3, [sl]
 8009938:	2b2a      	cmp	r3, #42	; 0x2a
 800993a:	d015      	beq.n	8009968 <_vfiprintf_r+0x13c>
 800993c:	9a07      	ldr	r2, [sp, #28]
 800993e:	4654      	mov	r4, sl
 8009940:	2000      	movs	r0, #0
 8009942:	f04f 0c0a 	mov.w	ip, #10
 8009946:	4621      	mov	r1, r4
 8009948:	f811 3b01 	ldrb.w	r3, [r1], #1
 800994c:	3b30      	subs	r3, #48	; 0x30
 800994e:	2b09      	cmp	r3, #9
 8009950:	d94e      	bls.n	80099f0 <_vfiprintf_r+0x1c4>
 8009952:	b1b0      	cbz	r0, 8009982 <_vfiprintf_r+0x156>
 8009954:	9207      	str	r2, [sp, #28]
 8009956:	e014      	b.n	8009982 <_vfiprintf_r+0x156>
 8009958:	eba0 0308 	sub.w	r3, r0, r8
 800995c:	fa09 f303 	lsl.w	r3, r9, r3
 8009960:	4313      	orrs	r3, r2
 8009962:	9304      	str	r3, [sp, #16]
 8009964:	46a2      	mov	sl, r4
 8009966:	e7d2      	b.n	800990e <_vfiprintf_r+0xe2>
 8009968:	9b03      	ldr	r3, [sp, #12]
 800996a:	1d19      	adds	r1, r3, #4
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	9103      	str	r1, [sp, #12]
 8009970:	2b00      	cmp	r3, #0
 8009972:	bfbb      	ittet	lt
 8009974:	425b      	neglt	r3, r3
 8009976:	f042 0202 	orrlt.w	r2, r2, #2
 800997a:	9307      	strge	r3, [sp, #28]
 800997c:	9307      	strlt	r3, [sp, #28]
 800997e:	bfb8      	it	lt
 8009980:	9204      	strlt	r2, [sp, #16]
 8009982:	7823      	ldrb	r3, [r4, #0]
 8009984:	2b2e      	cmp	r3, #46	; 0x2e
 8009986:	d10c      	bne.n	80099a2 <_vfiprintf_r+0x176>
 8009988:	7863      	ldrb	r3, [r4, #1]
 800998a:	2b2a      	cmp	r3, #42	; 0x2a
 800998c:	d135      	bne.n	80099fa <_vfiprintf_r+0x1ce>
 800998e:	9b03      	ldr	r3, [sp, #12]
 8009990:	1d1a      	adds	r2, r3, #4
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	9203      	str	r2, [sp, #12]
 8009996:	2b00      	cmp	r3, #0
 8009998:	bfb8      	it	lt
 800999a:	f04f 33ff 	movlt.w	r3, #4294967295
 800999e:	3402      	adds	r4, #2
 80099a0:	9305      	str	r3, [sp, #20]
 80099a2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009a88 <_vfiprintf_r+0x25c>
 80099a6:	7821      	ldrb	r1, [r4, #0]
 80099a8:	2203      	movs	r2, #3
 80099aa:	4650      	mov	r0, sl
 80099ac:	f7f6 fc28 	bl	8000200 <memchr>
 80099b0:	b140      	cbz	r0, 80099c4 <_vfiprintf_r+0x198>
 80099b2:	2340      	movs	r3, #64	; 0x40
 80099b4:	eba0 000a 	sub.w	r0, r0, sl
 80099b8:	fa03 f000 	lsl.w	r0, r3, r0
 80099bc:	9b04      	ldr	r3, [sp, #16]
 80099be:	4303      	orrs	r3, r0
 80099c0:	3401      	adds	r4, #1
 80099c2:	9304      	str	r3, [sp, #16]
 80099c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099c8:	482c      	ldr	r0, [pc, #176]	; (8009a7c <_vfiprintf_r+0x250>)
 80099ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80099ce:	2206      	movs	r2, #6
 80099d0:	f7f6 fc16 	bl	8000200 <memchr>
 80099d4:	2800      	cmp	r0, #0
 80099d6:	d03f      	beq.n	8009a58 <_vfiprintf_r+0x22c>
 80099d8:	4b29      	ldr	r3, [pc, #164]	; (8009a80 <_vfiprintf_r+0x254>)
 80099da:	bb1b      	cbnz	r3, 8009a24 <_vfiprintf_r+0x1f8>
 80099dc:	9b03      	ldr	r3, [sp, #12]
 80099de:	3307      	adds	r3, #7
 80099e0:	f023 0307 	bic.w	r3, r3, #7
 80099e4:	3308      	adds	r3, #8
 80099e6:	9303      	str	r3, [sp, #12]
 80099e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099ea:	443b      	add	r3, r7
 80099ec:	9309      	str	r3, [sp, #36]	; 0x24
 80099ee:	e767      	b.n	80098c0 <_vfiprintf_r+0x94>
 80099f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80099f4:	460c      	mov	r4, r1
 80099f6:	2001      	movs	r0, #1
 80099f8:	e7a5      	b.n	8009946 <_vfiprintf_r+0x11a>
 80099fa:	2300      	movs	r3, #0
 80099fc:	3401      	adds	r4, #1
 80099fe:	9305      	str	r3, [sp, #20]
 8009a00:	4619      	mov	r1, r3
 8009a02:	f04f 0c0a 	mov.w	ip, #10
 8009a06:	4620      	mov	r0, r4
 8009a08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a0c:	3a30      	subs	r2, #48	; 0x30
 8009a0e:	2a09      	cmp	r2, #9
 8009a10:	d903      	bls.n	8009a1a <_vfiprintf_r+0x1ee>
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d0c5      	beq.n	80099a2 <_vfiprintf_r+0x176>
 8009a16:	9105      	str	r1, [sp, #20]
 8009a18:	e7c3      	b.n	80099a2 <_vfiprintf_r+0x176>
 8009a1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a1e:	4604      	mov	r4, r0
 8009a20:	2301      	movs	r3, #1
 8009a22:	e7f0      	b.n	8009a06 <_vfiprintf_r+0x1da>
 8009a24:	ab03      	add	r3, sp, #12
 8009a26:	9300      	str	r3, [sp, #0]
 8009a28:	462a      	mov	r2, r5
 8009a2a:	4b16      	ldr	r3, [pc, #88]	; (8009a84 <_vfiprintf_r+0x258>)
 8009a2c:	a904      	add	r1, sp, #16
 8009a2e:	4630      	mov	r0, r6
 8009a30:	f7fb fd8e 	bl	8005550 <_printf_float>
 8009a34:	4607      	mov	r7, r0
 8009a36:	1c78      	adds	r0, r7, #1
 8009a38:	d1d6      	bne.n	80099e8 <_vfiprintf_r+0x1bc>
 8009a3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a3c:	07d9      	lsls	r1, r3, #31
 8009a3e:	d405      	bmi.n	8009a4c <_vfiprintf_r+0x220>
 8009a40:	89ab      	ldrh	r3, [r5, #12]
 8009a42:	059a      	lsls	r2, r3, #22
 8009a44:	d402      	bmi.n	8009a4c <_vfiprintf_r+0x220>
 8009a46:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a48:	f7fe ff24 	bl	8008894 <__retarget_lock_release_recursive>
 8009a4c:	89ab      	ldrh	r3, [r5, #12]
 8009a4e:	065b      	lsls	r3, r3, #25
 8009a50:	f53f af12 	bmi.w	8009878 <_vfiprintf_r+0x4c>
 8009a54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a56:	e711      	b.n	800987c <_vfiprintf_r+0x50>
 8009a58:	ab03      	add	r3, sp, #12
 8009a5a:	9300      	str	r3, [sp, #0]
 8009a5c:	462a      	mov	r2, r5
 8009a5e:	4b09      	ldr	r3, [pc, #36]	; (8009a84 <_vfiprintf_r+0x258>)
 8009a60:	a904      	add	r1, sp, #16
 8009a62:	4630      	mov	r0, r6
 8009a64:	f7fc f818 	bl	8005a98 <_printf_i>
 8009a68:	e7e4      	b.n	8009a34 <_vfiprintf_r+0x208>
 8009a6a:	bf00      	nop
 8009a6c:	0800a0b4 	.word	0x0800a0b4
 8009a70:	0800a0d4 	.word	0x0800a0d4
 8009a74:	0800a094 	.word	0x0800a094
 8009a78:	0800a2cc 	.word	0x0800a2cc
 8009a7c:	0800a2d6 	.word	0x0800a2d6
 8009a80:	08005551 	.word	0x08005551
 8009a84:	08009807 	.word	0x08009807
 8009a88:	0800a2d2 	.word	0x0800a2d2
 8009a8c:	00000000 	.word	0x00000000

08009a90 <nan>:
 8009a90:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009a98 <nan+0x8>
 8009a94:	4770      	bx	lr
 8009a96:	bf00      	nop
 8009a98:	00000000 	.word	0x00000000
 8009a9c:	7ff80000 	.word	0x7ff80000

08009aa0 <_sbrk_r>:
 8009aa0:	b538      	push	{r3, r4, r5, lr}
 8009aa2:	4d06      	ldr	r5, [pc, #24]	; (8009abc <_sbrk_r+0x1c>)
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	4604      	mov	r4, r0
 8009aa8:	4608      	mov	r0, r1
 8009aaa:	602b      	str	r3, [r5, #0]
 8009aac:	f7f8 f93c 	bl	8001d28 <_sbrk>
 8009ab0:	1c43      	adds	r3, r0, #1
 8009ab2:	d102      	bne.n	8009aba <_sbrk_r+0x1a>
 8009ab4:	682b      	ldr	r3, [r5, #0]
 8009ab6:	b103      	cbz	r3, 8009aba <_sbrk_r+0x1a>
 8009ab8:	6023      	str	r3, [r4, #0]
 8009aba:	bd38      	pop	{r3, r4, r5, pc}
 8009abc:	20000a24 	.word	0x20000a24

08009ac0 <__sread>:
 8009ac0:	b510      	push	{r4, lr}
 8009ac2:	460c      	mov	r4, r1
 8009ac4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ac8:	f000 f93a 	bl	8009d40 <_read_r>
 8009acc:	2800      	cmp	r0, #0
 8009ace:	bfab      	itete	ge
 8009ad0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009ad2:	89a3      	ldrhlt	r3, [r4, #12]
 8009ad4:	181b      	addge	r3, r3, r0
 8009ad6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009ada:	bfac      	ite	ge
 8009adc:	6563      	strge	r3, [r4, #84]	; 0x54
 8009ade:	81a3      	strhlt	r3, [r4, #12]
 8009ae0:	bd10      	pop	{r4, pc}

08009ae2 <__swrite>:
 8009ae2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ae6:	461f      	mov	r7, r3
 8009ae8:	898b      	ldrh	r3, [r1, #12]
 8009aea:	05db      	lsls	r3, r3, #23
 8009aec:	4605      	mov	r5, r0
 8009aee:	460c      	mov	r4, r1
 8009af0:	4616      	mov	r6, r2
 8009af2:	d505      	bpl.n	8009b00 <__swrite+0x1e>
 8009af4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009af8:	2302      	movs	r3, #2
 8009afa:	2200      	movs	r2, #0
 8009afc:	f000 f8b8 	bl	8009c70 <_lseek_r>
 8009b00:	89a3      	ldrh	r3, [r4, #12]
 8009b02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009b0a:	81a3      	strh	r3, [r4, #12]
 8009b0c:	4632      	mov	r2, r6
 8009b0e:	463b      	mov	r3, r7
 8009b10:	4628      	mov	r0, r5
 8009b12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b16:	f000 b837 	b.w	8009b88 <_write_r>

08009b1a <__sseek>:
 8009b1a:	b510      	push	{r4, lr}
 8009b1c:	460c      	mov	r4, r1
 8009b1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b22:	f000 f8a5 	bl	8009c70 <_lseek_r>
 8009b26:	1c43      	adds	r3, r0, #1
 8009b28:	89a3      	ldrh	r3, [r4, #12]
 8009b2a:	bf15      	itete	ne
 8009b2c:	6560      	strne	r0, [r4, #84]	; 0x54
 8009b2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009b32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009b36:	81a3      	strheq	r3, [r4, #12]
 8009b38:	bf18      	it	ne
 8009b3a:	81a3      	strhne	r3, [r4, #12]
 8009b3c:	bd10      	pop	{r4, pc}

08009b3e <__sclose>:
 8009b3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b42:	f000 b851 	b.w	8009be8 <_close_r>

08009b46 <strncmp>:
 8009b46:	b510      	push	{r4, lr}
 8009b48:	b17a      	cbz	r2, 8009b6a <strncmp+0x24>
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	3901      	subs	r1, #1
 8009b4e:	1884      	adds	r4, r0, r2
 8009b50:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009b54:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009b58:	4290      	cmp	r0, r2
 8009b5a:	d101      	bne.n	8009b60 <strncmp+0x1a>
 8009b5c:	42a3      	cmp	r3, r4
 8009b5e:	d101      	bne.n	8009b64 <strncmp+0x1e>
 8009b60:	1a80      	subs	r0, r0, r2
 8009b62:	bd10      	pop	{r4, pc}
 8009b64:	2800      	cmp	r0, #0
 8009b66:	d1f3      	bne.n	8009b50 <strncmp+0xa>
 8009b68:	e7fa      	b.n	8009b60 <strncmp+0x1a>
 8009b6a:	4610      	mov	r0, r2
 8009b6c:	e7f9      	b.n	8009b62 <strncmp+0x1c>

08009b6e <__ascii_wctomb>:
 8009b6e:	b149      	cbz	r1, 8009b84 <__ascii_wctomb+0x16>
 8009b70:	2aff      	cmp	r2, #255	; 0xff
 8009b72:	bf85      	ittet	hi
 8009b74:	238a      	movhi	r3, #138	; 0x8a
 8009b76:	6003      	strhi	r3, [r0, #0]
 8009b78:	700a      	strbls	r2, [r1, #0]
 8009b7a:	f04f 30ff 	movhi.w	r0, #4294967295
 8009b7e:	bf98      	it	ls
 8009b80:	2001      	movls	r0, #1
 8009b82:	4770      	bx	lr
 8009b84:	4608      	mov	r0, r1
 8009b86:	4770      	bx	lr

08009b88 <_write_r>:
 8009b88:	b538      	push	{r3, r4, r5, lr}
 8009b8a:	4d07      	ldr	r5, [pc, #28]	; (8009ba8 <_write_r+0x20>)
 8009b8c:	4604      	mov	r4, r0
 8009b8e:	4608      	mov	r0, r1
 8009b90:	4611      	mov	r1, r2
 8009b92:	2200      	movs	r2, #0
 8009b94:	602a      	str	r2, [r5, #0]
 8009b96:	461a      	mov	r2, r3
 8009b98:	f7f7 fe1c 	bl	80017d4 <_write>
 8009b9c:	1c43      	adds	r3, r0, #1
 8009b9e:	d102      	bne.n	8009ba6 <_write_r+0x1e>
 8009ba0:	682b      	ldr	r3, [r5, #0]
 8009ba2:	b103      	cbz	r3, 8009ba6 <_write_r+0x1e>
 8009ba4:	6023      	str	r3, [r4, #0]
 8009ba6:	bd38      	pop	{r3, r4, r5, pc}
 8009ba8:	20000a24 	.word	0x20000a24

08009bac <__assert_func>:
 8009bac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009bae:	4614      	mov	r4, r2
 8009bb0:	461a      	mov	r2, r3
 8009bb2:	4b09      	ldr	r3, [pc, #36]	; (8009bd8 <__assert_func+0x2c>)
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	4605      	mov	r5, r0
 8009bb8:	68d8      	ldr	r0, [r3, #12]
 8009bba:	b14c      	cbz	r4, 8009bd0 <__assert_func+0x24>
 8009bbc:	4b07      	ldr	r3, [pc, #28]	; (8009bdc <__assert_func+0x30>)
 8009bbe:	9100      	str	r1, [sp, #0]
 8009bc0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009bc4:	4906      	ldr	r1, [pc, #24]	; (8009be0 <__assert_func+0x34>)
 8009bc6:	462b      	mov	r3, r5
 8009bc8:	f000 f81e 	bl	8009c08 <fiprintf>
 8009bcc:	f000 f8ca 	bl	8009d64 <abort>
 8009bd0:	4b04      	ldr	r3, [pc, #16]	; (8009be4 <__assert_func+0x38>)
 8009bd2:	461c      	mov	r4, r3
 8009bd4:	e7f3      	b.n	8009bbe <__assert_func+0x12>
 8009bd6:	bf00      	nop
 8009bd8:	2000000c 	.word	0x2000000c
 8009bdc:	0800a2dd 	.word	0x0800a2dd
 8009be0:	0800a2ea 	.word	0x0800a2ea
 8009be4:	0800a318 	.word	0x0800a318

08009be8 <_close_r>:
 8009be8:	b538      	push	{r3, r4, r5, lr}
 8009bea:	4d06      	ldr	r5, [pc, #24]	; (8009c04 <_close_r+0x1c>)
 8009bec:	2300      	movs	r3, #0
 8009bee:	4604      	mov	r4, r0
 8009bf0:	4608      	mov	r0, r1
 8009bf2:	602b      	str	r3, [r5, #0]
 8009bf4:	f7f8 f863 	bl	8001cbe <_close>
 8009bf8:	1c43      	adds	r3, r0, #1
 8009bfa:	d102      	bne.n	8009c02 <_close_r+0x1a>
 8009bfc:	682b      	ldr	r3, [r5, #0]
 8009bfe:	b103      	cbz	r3, 8009c02 <_close_r+0x1a>
 8009c00:	6023      	str	r3, [r4, #0]
 8009c02:	bd38      	pop	{r3, r4, r5, pc}
 8009c04:	20000a24 	.word	0x20000a24

08009c08 <fiprintf>:
 8009c08:	b40e      	push	{r1, r2, r3}
 8009c0a:	b503      	push	{r0, r1, lr}
 8009c0c:	4601      	mov	r1, r0
 8009c0e:	ab03      	add	r3, sp, #12
 8009c10:	4805      	ldr	r0, [pc, #20]	; (8009c28 <fiprintf+0x20>)
 8009c12:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c16:	6800      	ldr	r0, [r0, #0]
 8009c18:	9301      	str	r3, [sp, #4]
 8009c1a:	f7ff fe07 	bl	800982c <_vfiprintf_r>
 8009c1e:	b002      	add	sp, #8
 8009c20:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c24:	b003      	add	sp, #12
 8009c26:	4770      	bx	lr
 8009c28:	2000000c 	.word	0x2000000c

08009c2c <_fstat_r>:
 8009c2c:	b538      	push	{r3, r4, r5, lr}
 8009c2e:	4d07      	ldr	r5, [pc, #28]	; (8009c4c <_fstat_r+0x20>)
 8009c30:	2300      	movs	r3, #0
 8009c32:	4604      	mov	r4, r0
 8009c34:	4608      	mov	r0, r1
 8009c36:	4611      	mov	r1, r2
 8009c38:	602b      	str	r3, [r5, #0]
 8009c3a:	f7f8 f84c 	bl	8001cd6 <_fstat>
 8009c3e:	1c43      	adds	r3, r0, #1
 8009c40:	d102      	bne.n	8009c48 <_fstat_r+0x1c>
 8009c42:	682b      	ldr	r3, [r5, #0]
 8009c44:	b103      	cbz	r3, 8009c48 <_fstat_r+0x1c>
 8009c46:	6023      	str	r3, [r4, #0]
 8009c48:	bd38      	pop	{r3, r4, r5, pc}
 8009c4a:	bf00      	nop
 8009c4c:	20000a24 	.word	0x20000a24

08009c50 <_isatty_r>:
 8009c50:	b538      	push	{r3, r4, r5, lr}
 8009c52:	4d06      	ldr	r5, [pc, #24]	; (8009c6c <_isatty_r+0x1c>)
 8009c54:	2300      	movs	r3, #0
 8009c56:	4604      	mov	r4, r0
 8009c58:	4608      	mov	r0, r1
 8009c5a:	602b      	str	r3, [r5, #0]
 8009c5c:	f7f8 f84b 	bl	8001cf6 <_isatty>
 8009c60:	1c43      	adds	r3, r0, #1
 8009c62:	d102      	bne.n	8009c6a <_isatty_r+0x1a>
 8009c64:	682b      	ldr	r3, [r5, #0]
 8009c66:	b103      	cbz	r3, 8009c6a <_isatty_r+0x1a>
 8009c68:	6023      	str	r3, [r4, #0]
 8009c6a:	bd38      	pop	{r3, r4, r5, pc}
 8009c6c:	20000a24 	.word	0x20000a24

08009c70 <_lseek_r>:
 8009c70:	b538      	push	{r3, r4, r5, lr}
 8009c72:	4d07      	ldr	r5, [pc, #28]	; (8009c90 <_lseek_r+0x20>)
 8009c74:	4604      	mov	r4, r0
 8009c76:	4608      	mov	r0, r1
 8009c78:	4611      	mov	r1, r2
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	602a      	str	r2, [r5, #0]
 8009c7e:	461a      	mov	r2, r3
 8009c80:	f7f8 f844 	bl	8001d0c <_lseek>
 8009c84:	1c43      	adds	r3, r0, #1
 8009c86:	d102      	bne.n	8009c8e <_lseek_r+0x1e>
 8009c88:	682b      	ldr	r3, [r5, #0]
 8009c8a:	b103      	cbz	r3, 8009c8e <_lseek_r+0x1e>
 8009c8c:	6023      	str	r3, [r4, #0]
 8009c8e:	bd38      	pop	{r3, r4, r5, pc}
 8009c90:	20000a24 	.word	0x20000a24

08009c94 <memmove>:
 8009c94:	4288      	cmp	r0, r1
 8009c96:	b510      	push	{r4, lr}
 8009c98:	eb01 0402 	add.w	r4, r1, r2
 8009c9c:	d902      	bls.n	8009ca4 <memmove+0x10>
 8009c9e:	4284      	cmp	r4, r0
 8009ca0:	4623      	mov	r3, r4
 8009ca2:	d807      	bhi.n	8009cb4 <memmove+0x20>
 8009ca4:	1e43      	subs	r3, r0, #1
 8009ca6:	42a1      	cmp	r1, r4
 8009ca8:	d008      	beq.n	8009cbc <memmove+0x28>
 8009caa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009cae:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009cb2:	e7f8      	b.n	8009ca6 <memmove+0x12>
 8009cb4:	4402      	add	r2, r0
 8009cb6:	4601      	mov	r1, r0
 8009cb8:	428a      	cmp	r2, r1
 8009cba:	d100      	bne.n	8009cbe <memmove+0x2a>
 8009cbc:	bd10      	pop	{r4, pc}
 8009cbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009cc2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009cc6:	e7f7      	b.n	8009cb8 <memmove+0x24>

08009cc8 <__malloc_lock>:
 8009cc8:	4801      	ldr	r0, [pc, #4]	; (8009cd0 <__malloc_lock+0x8>)
 8009cca:	f7fe bde2 	b.w	8008892 <__retarget_lock_acquire_recursive>
 8009cce:	bf00      	nop
 8009cd0:	20000a18 	.word	0x20000a18

08009cd4 <__malloc_unlock>:
 8009cd4:	4801      	ldr	r0, [pc, #4]	; (8009cdc <__malloc_unlock+0x8>)
 8009cd6:	f7fe bddd 	b.w	8008894 <__retarget_lock_release_recursive>
 8009cda:	bf00      	nop
 8009cdc:	20000a18 	.word	0x20000a18

08009ce0 <_realloc_r>:
 8009ce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ce4:	4680      	mov	r8, r0
 8009ce6:	4614      	mov	r4, r2
 8009ce8:	460e      	mov	r6, r1
 8009cea:	b921      	cbnz	r1, 8009cf6 <_realloc_r+0x16>
 8009cec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009cf0:	4611      	mov	r1, r2
 8009cf2:	f7ff bba1 	b.w	8009438 <_malloc_r>
 8009cf6:	b92a      	cbnz	r2, 8009d04 <_realloc_r+0x24>
 8009cf8:	f7ff fb32 	bl	8009360 <_free_r>
 8009cfc:	4625      	mov	r5, r4
 8009cfe:	4628      	mov	r0, r5
 8009d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d04:	f000 f835 	bl	8009d72 <_malloc_usable_size_r>
 8009d08:	4284      	cmp	r4, r0
 8009d0a:	4607      	mov	r7, r0
 8009d0c:	d802      	bhi.n	8009d14 <_realloc_r+0x34>
 8009d0e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009d12:	d812      	bhi.n	8009d3a <_realloc_r+0x5a>
 8009d14:	4621      	mov	r1, r4
 8009d16:	4640      	mov	r0, r8
 8009d18:	f7ff fb8e 	bl	8009438 <_malloc_r>
 8009d1c:	4605      	mov	r5, r0
 8009d1e:	2800      	cmp	r0, #0
 8009d20:	d0ed      	beq.n	8009cfe <_realloc_r+0x1e>
 8009d22:	42bc      	cmp	r4, r7
 8009d24:	4622      	mov	r2, r4
 8009d26:	4631      	mov	r1, r6
 8009d28:	bf28      	it	cs
 8009d2a:	463a      	movcs	r2, r7
 8009d2c:	f7fe fe32 	bl	8008994 <memcpy>
 8009d30:	4631      	mov	r1, r6
 8009d32:	4640      	mov	r0, r8
 8009d34:	f7ff fb14 	bl	8009360 <_free_r>
 8009d38:	e7e1      	b.n	8009cfe <_realloc_r+0x1e>
 8009d3a:	4635      	mov	r5, r6
 8009d3c:	e7df      	b.n	8009cfe <_realloc_r+0x1e>
	...

08009d40 <_read_r>:
 8009d40:	b538      	push	{r3, r4, r5, lr}
 8009d42:	4d07      	ldr	r5, [pc, #28]	; (8009d60 <_read_r+0x20>)
 8009d44:	4604      	mov	r4, r0
 8009d46:	4608      	mov	r0, r1
 8009d48:	4611      	mov	r1, r2
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	602a      	str	r2, [r5, #0]
 8009d4e:	461a      	mov	r2, r3
 8009d50:	f7f7 ff98 	bl	8001c84 <_read>
 8009d54:	1c43      	adds	r3, r0, #1
 8009d56:	d102      	bne.n	8009d5e <_read_r+0x1e>
 8009d58:	682b      	ldr	r3, [r5, #0]
 8009d5a:	b103      	cbz	r3, 8009d5e <_read_r+0x1e>
 8009d5c:	6023      	str	r3, [r4, #0]
 8009d5e:	bd38      	pop	{r3, r4, r5, pc}
 8009d60:	20000a24 	.word	0x20000a24

08009d64 <abort>:
 8009d64:	b508      	push	{r3, lr}
 8009d66:	2006      	movs	r0, #6
 8009d68:	f000 f834 	bl	8009dd4 <raise>
 8009d6c:	2001      	movs	r0, #1
 8009d6e:	f7f7 ff7f 	bl	8001c70 <_exit>

08009d72 <_malloc_usable_size_r>:
 8009d72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d76:	1f18      	subs	r0, r3, #4
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	bfbc      	itt	lt
 8009d7c:	580b      	ldrlt	r3, [r1, r0]
 8009d7e:	18c0      	addlt	r0, r0, r3
 8009d80:	4770      	bx	lr

08009d82 <_raise_r>:
 8009d82:	291f      	cmp	r1, #31
 8009d84:	b538      	push	{r3, r4, r5, lr}
 8009d86:	4604      	mov	r4, r0
 8009d88:	460d      	mov	r5, r1
 8009d8a:	d904      	bls.n	8009d96 <_raise_r+0x14>
 8009d8c:	2316      	movs	r3, #22
 8009d8e:	6003      	str	r3, [r0, #0]
 8009d90:	f04f 30ff 	mov.w	r0, #4294967295
 8009d94:	bd38      	pop	{r3, r4, r5, pc}
 8009d96:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009d98:	b112      	cbz	r2, 8009da0 <_raise_r+0x1e>
 8009d9a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009d9e:	b94b      	cbnz	r3, 8009db4 <_raise_r+0x32>
 8009da0:	4620      	mov	r0, r4
 8009da2:	f000 f831 	bl	8009e08 <_getpid_r>
 8009da6:	462a      	mov	r2, r5
 8009da8:	4601      	mov	r1, r0
 8009daa:	4620      	mov	r0, r4
 8009dac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009db0:	f000 b818 	b.w	8009de4 <_kill_r>
 8009db4:	2b01      	cmp	r3, #1
 8009db6:	d00a      	beq.n	8009dce <_raise_r+0x4c>
 8009db8:	1c59      	adds	r1, r3, #1
 8009dba:	d103      	bne.n	8009dc4 <_raise_r+0x42>
 8009dbc:	2316      	movs	r3, #22
 8009dbe:	6003      	str	r3, [r0, #0]
 8009dc0:	2001      	movs	r0, #1
 8009dc2:	e7e7      	b.n	8009d94 <_raise_r+0x12>
 8009dc4:	2400      	movs	r4, #0
 8009dc6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009dca:	4628      	mov	r0, r5
 8009dcc:	4798      	blx	r3
 8009dce:	2000      	movs	r0, #0
 8009dd0:	e7e0      	b.n	8009d94 <_raise_r+0x12>
	...

08009dd4 <raise>:
 8009dd4:	4b02      	ldr	r3, [pc, #8]	; (8009de0 <raise+0xc>)
 8009dd6:	4601      	mov	r1, r0
 8009dd8:	6818      	ldr	r0, [r3, #0]
 8009dda:	f7ff bfd2 	b.w	8009d82 <_raise_r>
 8009dde:	bf00      	nop
 8009de0:	2000000c 	.word	0x2000000c

08009de4 <_kill_r>:
 8009de4:	b538      	push	{r3, r4, r5, lr}
 8009de6:	4d07      	ldr	r5, [pc, #28]	; (8009e04 <_kill_r+0x20>)
 8009de8:	2300      	movs	r3, #0
 8009dea:	4604      	mov	r4, r0
 8009dec:	4608      	mov	r0, r1
 8009dee:	4611      	mov	r1, r2
 8009df0:	602b      	str	r3, [r5, #0]
 8009df2:	f7f7 ff2d 	bl	8001c50 <_kill>
 8009df6:	1c43      	adds	r3, r0, #1
 8009df8:	d102      	bne.n	8009e00 <_kill_r+0x1c>
 8009dfa:	682b      	ldr	r3, [r5, #0]
 8009dfc:	b103      	cbz	r3, 8009e00 <_kill_r+0x1c>
 8009dfe:	6023      	str	r3, [r4, #0]
 8009e00:	bd38      	pop	{r3, r4, r5, pc}
 8009e02:	bf00      	nop
 8009e04:	20000a24 	.word	0x20000a24

08009e08 <_getpid_r>:
 8009e08:	f7f7 bf1a 	b.w	8001c40 <_getpid>

08009e0c <_init>:
 8009e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e0e:	bf00      	nop
 8009e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e12:	bc08      	pop	{r3}
 8009e14:	469e      	mov	lr, r3
 8009e16:	4770      	bx	lr

08009e18 <_fini>:
 8009e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e1a:	bf00      	nop
 8009e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e1e:	bc08      	pop	{r3}
 8009e20:	469e      	mov	lr, r3
 8009e22:	4770      	bx	lr
